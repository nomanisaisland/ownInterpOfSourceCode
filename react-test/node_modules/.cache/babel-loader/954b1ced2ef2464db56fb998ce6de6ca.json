{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\nimport { registerDirectEvent } from '../EventRegistry';\nimport { isReplayingEvent } from '../CurrentReplayingEvent';\nimport { SyntheticMouseEvent, SyntheticPointerEvent } from '../SyntheticEvent';\nimport { getClosestInstanceFromNode, getNodeFromInstance, isContainerMarkedAsRoot } from '../../client/ReactDOMComponentTree';\nimport { accumulateEnterLeaveTwoPhaseListeners } from '../DOMPluginEventSystem';\nimport { HostComponent, HostText } from 'react-reconciler/src/ReactWorkTags';\nimport { getNearestMountedFiber } from 'react-reconciler/src/ReactFiberTreeReflection';\n\nfunction registerEvents() {\n  registerDirectEvent('onMouseEnter', ['mouseout', 'mouseover']);\n  registerDirectEvent('onMouseLeave', ['mouseout', 'mouseover']);\n  registerDirectEvent('onPointerEnter', ['pointerout', 'pointerover']);\n  registerDirectEvent('onPointerLeave', ['pointerout', 'pointerover']);\n}\n/**\r\n * For almost every interaction we care about, there will be both a top-level\r\n * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that\r\n * we do not extract duplicate events. However, moving the mouse into the\r\n * browser from outside will not fire a `mouseout` event. In this case, we use\r\n * the `mouseover` top-level event.\r\n */\n\n\nfunction extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {\n  const isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';\n  const isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';\n\n  if (isOverEvent && !isReplayingEvent(nativeEvent)) {\n    // If this is an over event with a target, we might have already dispatched\n    // the event in the out event of the other target. If this is replayed,\n    // then it's because we couldn't dispatch against this target previously\n    // so we have to do it now instead.\n    const related = nativeEvent.relatedTarget || nativeEvent.fromElement;\n\n    if (related) {\n      // If the related node is managed by React, we can assume that we have\n      // already dispatched the corresponding events during its mouseout.\n      if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {\n        return;\n      }\n    }\n  }\n\n  if (!isOutEvent && !isOverEvent) {\n    // Must not be a mouse or pointer in or out - ignoring.\n    return;\n  }\n\n  let win; // TODO: why is this nullable in the types but we read from it?\n\n  if (nativeEventTarget.window === nativeEventTarget) {\n    // `nativeEventTarget` is probably a window object.\n    win = nativeEventTarget;\n  } else {\n    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.\n    const doc = nativeEventTarget.ownerDocument;\n\n    if (doc) {\n      win = doc.defaultView || doc.parentWindow;\n    } else {\n      win = window;\n    }\n  }\n\n  let from;\n  let to;\n\n  if (isOutEvent) {\n    const related = nativeEvent.relatedTarget || nativeEvent.toElement;\n    from = targetInst;\n    to = related ? getClosestInstanceFromNode(related) : null;\n\n    if (to !== null) {\n      const nearestMounted = getNearestMountedFiber(to);\n\n      if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {\n        to = null;\n      }\n    }\n  } else {\n    // Moving to a node from outside the window.\n    from = null;\n    to = targetInst;\n  }\n\n  if (from === to) {\n    // Nothing pertains to our managed components.\n    return;\n  }\n\n  let SyntheticEventCtor = SyntheticMouseEvent;\n  let leaveEventType = 'onMouseLeave';\n  let enterEventType = 'onMouseEnter';\n  let eventTypePrefix = 'mouse';\n\n  if (domEventName === 'pointerout' || domEventName === 'pointerover') {\n    SyntheticEventCtor = SyntheticPointerEvent;\n    leaveEventType = 'onPointerLeave';\n    enterEventType = 'onPointerEnter';\n    eventTypePrefix = 'pointer';\n  }\n\n  const fromNode = from == null ? win : getNodeFromInstance(from);\n  const toNode = to == null ? win : getNodeFromInstance(to);\n  const leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);\n  leave.target = fromNode;\n  leave.relatedTarget = toNode;\n  let enter = null; // We should only process this nativeEvent if we are processing\n  // the first ancestor. Next time, we will ignore the event.\n\n  const nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);\n\n  if (nativeTargetInst === targetInst) {\n    const enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);\n    enterEvent.target = toNode;\n    enterEvent.relatedTarget = fromNode;\n    enter = enterEvent;\n  }\n\n  accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);\n}\n\nexport { registerEvents, extractEvents };","map":{"version":3,"names":["registerDirectEvent","isReplayingEvent","SyntheticMouseEvent","SyntheticPointerEvent","getClosestInstanceFromNode","getNodeFromInstance","isContainerMarkedAsRoot","accumulateEnterLeaveTwoPhaseListeners","HostComponent","HostText","getNearestMountedFiber","registerEvents","extractEvents","dispatchQueue","domEventName","targetInst","nativeEvent","nativeEventTarget","eventSystemFlags","targetContainer","isOverEvent","isOutEvent","related","relatedTarget","fromElement","win","window","doc","ownerDocument","defaultView","parentWindow","from","to","toElement","nearestMounted","tag","SyntheticEventCtor","leaveEventType","enterEventType","eventTypePrefix","fromNode","toNode","leave","target","enter","nativeTargetInst","enterEvent"],"sources":["D:/project/font-end/debug-anything/react-test/src/react/packages/react-dom/src/events/plugins/EnterLeaveEventPlugin.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {AnyNativeEvent} from '../PluginModuleType';\r\nimport type {DOMEventName} from '../DOMEventNames';\r\nimport type {DispatchQueue} from '../DOMPluginEventSystem';\r\nimport type {EventSystemFlags} from '../EventSystemFlags';\r\n\r\nimport {registerDirectEvent} from '../EventRegistry';\r\nimport {isReplayingEvent} from '../CurrentReplayingEvent';\r\nimport {SyntheticMouseEvent, SyntheticPointerEvent} from '../SyntheticEvent';\r\nimport {\r\n  getClosestInstanceFromNode,\r\n  getNodeFromInstance,\r\n  isContainerMarkedAsRoot,\r\n} from '../../client/ReactDOMComponentTree';\r\nimport {accumulateEnterLeaveTwoPhaseListeners} from '../DOMPluginEventSystem';\r\nimport type {KnownReactSyntheticEvent} from '../ReactSyntheticEventType';\r\n\r\nimport {HostComponent, HostText} from 'react-reconciler/src/ReactWorkTags';\r\nimport {getNearestMountedFiber} from 'react-reconciler/src/ReactFiberTreeReflection';\r\n\r\nfunction registerEvents() {\r\n  registerDirectEvent('onMouseEnter', ['mouseout', 'mouseover']);\r\n  registerDirectEvent('onMouseLeave', ['mouseout', 'mouseover']);\r\n  registerDirectEvent('onPointerEnter', ['pointerout', 'pointerover']);\r\n  registerDirectEvent('onPointerLeave', ['pointerout', 'pointerover']);\r\n}\r\n\r\n/**\r\n * For almost every interaction we care about, there will be both a top-level\r\n * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that\r\n * we do not extract duplicate events. However, moving the mouse into the\r\n * browser from outside will not fire a `mouseout` event. In this case, we use\r\n * the `mouseover` top-level event.\r\n */\r\nfunction extractEvents(\r\n  dispatchQueue: DispatchQueue,\r\n  domEventName: DOMEventName,\r\n  targetInst: null | Fiber,\r\n  nativeEvent: AnyNativeEvent,\r\n  nativeEventTarget: null | EventTarget,\r\n  eventSystemFlags: EventSystemFlags,\r\n  targetContainer: EventTarget,\r\n) {\r\n  const isOverEvent =\r\n    domEventName === 'mouseover' || domEventName === 'pointerover';\r\n  const isOutEvent =\r\n    domEventName === 'mouseout' || domEventName === 'pointerout';\r\n\r\n  if (isOverEvent && !isReplayingEvent(nativeEvent)) {\r\n    // If this is an over event with a target, we might have already dispatched\r\n    // the event in the out event of the other target. If this is replayed,\r\n    // then it's because we couldn't dispatch against this target previously\r\n    // so we have to do it now instead.\r\n    const related =\r\n      (nativeEvent: any).relatedTarget || (nativeEvent: any).fromElement;\r\n    if (related) {\r\n      // If the related node is managed by React, we can assume that we have\r\n      // already dispatched the corresponding events during its mouseout.\r\n      if (\r\n        getClosestInstanceFromNode(related) ||\r\n        isContainerMarkedAsRoot(related)\r\n      ) {\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!isOutEvent && !isOverEvent) {\r\n    // Must not be a mouse or pointer in or out - ignoring.\r\n    return;\r\n  }\r\n\r\n  let win;\r\n  // TODO: why is this nullable in the types but we read from it?\r\n  if ((nativeEventTarget: any).window === nativeEventTarget) {\r\n    // `nativeEventTarget` is probably a window object.\r\n    win = nativeEventTarget;\r\n  } else {\r\n    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.\r\n    const doc = (nativeEventTarget: any).ownerDocument;\r\n    if (doc) {\r\n      win = doc.defaultView || doc.parentWindow;\r\n    } else {\r\n      win = window;\r\n    }\r\n  }\r\n\r\n  let from;\r\n  let to;\r\n  if (isOutEvent) {\r\n    const related = nativeEvent.relatedTarget || (nativeEvent: any).toElement;\r\n    from = targetInst;\r\n    to = related ? getClosestInstanceFromNode((related: any)) : null;\r\n    if (to !== null) {\r\n      const nearestMounted = getNearestMountedFiber(to);\r\n      if (\r\n        to !== nearestMounted ||\r\n        (to.tag !== HostComponent && to.tag !== HostText)\r\n      ) {\r\n        to = null;\r\n      }\r\n    }\r\n  } else {\r\n    // Moving to a node from outside the window.\r\n    from = null;\r\n    to = targetInst;\r\n  }\r\n\r\n  if (from === to) {\r\n    // Nothing pertains to our managed components.\r\n    return;\r\n  }\r\n\r\n  let SyntheticEventCtor = SyntheticMouseEvent;\r\n  let leaveEventType = 'onMouseLeave';\r\n  let enterEventType = 'onMouseEnter';\r\n  let eventTypePrefix = 'mouse';\r\n  if (domEventName === 'pointerout' || domEventName === 'pointerover') {\r\n    SyntheticEventCtor = SyntheticPointerEvent;\r\n    leaveEventType = 'onPointerLeave';\r\n    enterEventType = 'onPointerEnter';\r\n    eventTypePrefix = 'pointer';\r\n  }\r\n\r\n  const fromNode = from == null ? win : getNodeFromInstance(from);\r\n  const toNode = to == null ? win : getNodeFromInstance(to);\r\n\r\n  const leave = new SyntheticEventCtor(\r\n    leaveEventType,\r\n    eventTypePrefix + 'leave',\r\n    from,\r\n    nativeEvent,\r\n    nativeEventTarget,\r\n  );\r\n  leave.target = fromNode;\r\n  leave.relatedTarget = toNode;\r\n\r\n  let enter: KnownReactSyntheticEvent | null = null;\r\n\r\n  // We should only process this nativeEvent if we are processing\r\n  // the first ancestor. Next time, we will ignore the event.\r\n  const nativeTargetInst = getClosestInstanceFromNode((nativeEventTarget: any));\r\n  if (nativeTargetInst === targetInst) {\r\n    const enterEvent: KnownReactSyntheticEvent = new SyntheticEventCtor(\r\n      enterEventType,\r\n      eventTypePrefix + 'enter',\r\n      to,\r\n      nativeEvent,\r\n      nativeEventTarget,\r\n    );\r\n    enterEvent.target = toNode;\r\n    enterEvent.relatedTarget = fromNode;\r\n    enter = enterEvent;\r\n  }\r\n\r\n  accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);\r\n}\r\n\r\nexport {registerEvents, extractEvents};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}