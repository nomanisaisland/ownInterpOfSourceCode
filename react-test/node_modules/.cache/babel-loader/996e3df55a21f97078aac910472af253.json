{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\n\n/**\r\n * ReactElementValidator provides a wrapper around a element factory\r\n * which validates the props passed to the element. This is intended to be\r\n * used only in DEV and could be replaced by a static type checker for languages\r\n * that support it.\r\n */\nimport isValidElementType from 'shared/isValidElementType';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport { getIteratorFn, REACT_FORWARD_REF_TYPE, REACT_MEMO_TYPE, REACT_FRAGMENT_TYPE, REACT_ELEMENT_TYPE } from 'shared/ReactSymbols';\nimport { warnAboutSpreadingKeyToJSX } from 'shared/ReactFeatureFlags';\nimport checkPropTypes from 'shared/checkPropTypes';\nimport isArray from 'shared/isArray';\nimport ReactCurrentOwner from './ReactCurrentOwner';\nimport { isValidElement, createElement, cloneElement, jsxDEV } from './ReactElement';\nimport { setExtraStackFrame } from './ReactDebugCurrentFrame';\nimport { describeUnknownElementTypeFrameInDEV } from 'shared/ReactComponentStackFrame';\nimport hasOwnProperty from 'shared/hasOwnProperty';\n\nfunction setCurrentlyValidatingElement(element) {\n  if (__DEV__) {\n    if (element) {\n      const owner = element._owner;\n      const stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      setExtraStackFrame(stack);\n    } else {\n      setExtraStackFrame(null);\n    }\n  }\n}\n\nlet propTypesMisspellWarningShown;\n\nif (__DEV__) {\n  propTypesMisspellWarningShown = false;\n}\n\nfunction getDeclarationErrorAddendum() {\n  if (ReactCurrentOwner.current) {\n    const name = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n    if (name) {\n      return '\\n\\nCheck the render method of `' + name + '`.';\n    }\n  }\n\n  return '';\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  if (source !== undefined) {\n    const fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n    const lineNumber = source.lineNumber;\n    return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n  }\n\n  return '';\n}\n\nfunction getSourceInfoErrorAddendumForProps(elementProps) {\n  if (elementProps !== null && elementProps !== undefined) {\n    return getSourceInfoErrorAddendum(elementProps.__source);\n  }\n\n  return '';\n}\n/**\r\n * Warn if there's no key explicitly set on dynamic arrays of children or\r\n * object keys are not valid. This allows us to keep track of children between\r\n * updates.\r\n */\n\n\nconst ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  let info = getDeclarationErrorAddendum();\n\n  if (!info) {\n    const parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n    if (parentName) {\n      info = `\\n\\nCheck the top-level render call using <${parentName}>.`;\n    }\n  }\n\n  return info;\n}\n/**\r\n * Warn if the element doesn't have an explicit key assigned to it.\r\n * This element is in an array. The array could grow and shrink or be\r\n * reordered. All children that haven't already been validated are required to\r\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\r\n * will only be shown once.\r\n *\r\n * @internal\r\n * @param {ReactElement} element Element that requires a key.\r\n * @param {*} parentType element's parent's type.\r\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  if (!element._store || element._store.validated || element.key != null) {\n    return;\n  }\n\n  element._store.validated = true;\n  const currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n    return;\n  }\n\n  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n  // property, it may be the creator of the child that's responsible for\n  // assigning it a key.\n\n  let childOwner = '';\n\n  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n    // Give the component that originally created this child.\n    childOwner = ` It was passed a child from ${getComponentNameFromType(element._owner.type)}.`;\n  }\n\n  if (__DEV__) {\n    setCurrentlyValidatingElement(element);\n    console.error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n    setCurrentlyValidatingElement(null);\n  }\n}\n/**\r\n * Ensure that every element either is passed in a static location, in an\r\n * array with an explicit keys property defined, or in an object literal\r\n * with valid key property.\r\n *\r\n * @internal\r\n * @param {ReactNode} node Statically passed child of any type.\r\n * @param {*} parentType node's parent's type.\r\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  console.log(node);\n\n  if (typeof node !== 'object') {\n    return;\n  }\n\n  if (isArray(node)) {\n    for (let i = 0; i < node.length; i++) {\n      const child = node[i];\n\n      if (isValidElement(child)) {\n        validateExplicitKey(child, parentType);\n      }\n    }\n  } else if (isValidElement(node)) {\n    // This element was passed in a valid location.\n    if (node._store) {\n      node._store.validated = true;\n    }\n  } else if (node) {\n    const iteratorFn = getIteratorFn(node);\n\n    if (typeof iteratorFn === 'function') {\n      // Entry iterators used to provide implicit keys,\n      // but now we print a separate warning for them later.\n      if (iteratorFn !== node.entries) {\n        const iterator = iteratorFn.call(node);\n        let step;\n\n        while (!(step = iterator.next()).done) {\n          if (isValidElement(step.value)) {\n            validateExplicitKey(step.value, parentType);\n          }\n        }\n      }\n    }\n  }\n}\n/**\r\n * Given an element, validate that its props follow the propTypes definition,\r\n * provided by the type.\r\n *\r\n * @param {ReactElement} element\r\n */\n\n\nfunction validatePropTypes(element) {\n  if (__DEV__) {\n    const type = element.type;\n\n    if (type === null || type === undefined || typeof type === 'string') {\n      return;\n    }\n\n    let propTypes;\n\n    if (typeof type === 'function') {\n      propTypes = type.propTypes;\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n    // Inner props are checked in the reconciler.\n    type.$$typeof === REACT_MEMO_TYPE)) {\n      propTypes = type.propTypes;\n    } else {\n      return;\n    }\n\n    if (propTypes) {\n      // Intentionally inside to avoid triggering lazy initializers:\n      const name = getComponentNameFromType(type);\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n      const name = getComponentNameFromType(type);\n      console.error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');\n    }\n\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n      console.error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n    }\n  }\n}\n/**\r\n * Given a fragment, validate that it can only be provided with fragment props\r\n * @param {ReactElement} fragment\r\n */\n\n\nfunction validateFragmentProps(fragment) {\n  if (__DEV__) {\n    const keys = Object.keys(fragment.props);\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement(fragment);\n        console.error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n        setCurrentlyValidatingElement(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement(fragment);\n      console.error('Invalid attribute `ref` supplied to `React.Fragment`.');\n      setCurrentlyValidatingElement(null);\n    }\n  }\n}\n\nexport function jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n  const validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n  // succeed and there will likely be errors in render.\n\n  if (!validType) {\n    let info = '';\n\n    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n      info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n    }\n\n    const sourceInfo = getSourceInfoErrorAddendum(source);\n\n    if (sourceInfo) {\n      info += sourceInfo;\n    } else {\n      info += getDeclarationErrorAddendum();\n    }\n\n    let typeString;\n\n    if (type === null) {\n      typeString = 'null';\n    } else if (isArray(type)) {\n      typeString = 'array';\n    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n      typeString = `<${getComponentNameFromType(type.type) || 'Unknown'} />`;\n      info = ' Did you accidentally export a JSX literal instead of a component?';\n    } else {\n      typeString = typeof type;\n    }\n\n    if (__DEV__) {\n      console.error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    }\n  }\n\n  const element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n  // TODO: Drop this when these are no longer allowed as the type argument.\n\n  if (element == null) {\n    return element;\n  } // Skip key warning if the type isn't valid since our key validation logic\n  // doesn't expect a non-string/function type and can throw confusing errors.\n  // We don't want exception behavior to differ between dev and prod.\n  // (Rendering will throw with a helpful message and as soon as the type is\n  // fixed, the key warnings will appear.)\n\n\n  if (validType) {\n    const children = props.children;\n\n    if (children !== undefined) {\n      if (isStaticChildren) {\n        if (isArray(children)) {\n          for (let i = 0; i < children.length; i++) {\n            validateChildKeys(children[i], type);\n          }\n\n          if (Object.freeze) {\n            Object.freeze(children);\n          }\n        } else {\n          if (__DEV__) {\n            console.error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        }\n      } else {\n        validateChildKeys(children, type);\n      }\n    }\n  }\n\n  if (__DEV__) {\n    if (warnAboutSpreadingKeyToJSX) {\n      if (hasOwnProperty.call(props, 'key')) {\n        console.error('React.jsx: Spreading a key to JSX is a deprecated pattern. ' + 'Explicitly pass a key after spreading props in your JSX call. ' + 'E.g. <%s {...props} key={key} />', getComponentNameFromType(type) || 'ComponentName');\n      }\n    }\n  }\n\n  if (type === REACT_FRAGMENT_TYPE) {\n    validateFragmentProps(element);\n  } else {\n    validatePropTypes(element);\n  }\n\n  return element;\n} // These two functions exist to still get child warnings in dev\n// even with the prod transform. This means that jsxDEV is purely\n// opt-in behavior for better messages but that we won't stop\n// giving you warnings if you use production apis.\n\nexport function jsxWithValidationStatic(type, props, key) {\n  return jsxWithValidation(type, props, key, true);\n}\nexport function jsxWithValidationDynamic(type, props, key) {\n  return jsxWithValidation(type, props, key, false);\n}\nexport function createElementWithValidation(type, props, children) {\n  // 验证标签类型是否是原生标签或者是react自定义的标签\n  const validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n  // succeed and there will likely be errors in render.\n\n  if (!validType) {\n    let info = '';\n\n    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n      info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n    }\n\n    const sourceInfo = getSourceInfoErrorAddendumForProps(props);\n\n    if (sourceInfo) {\n      info += sourceInfo;\n    } else {\n      info += getDeclarationErrorAddendum();\n    }\n\n    let typeString;\n\n    if (type === null) {\n      typeString = 'null';\n    } else if (isArray(type)) {\n      typeString = 'array';\n    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n      typeString = `<${getComponentNameFromType(type.type) || 'Unknown'} />`;\n      info = ' Did you accidentally export a JSX literal instead of a component?';\n    } else {\n      typeString = typeof type;\n    }\n\n    if (__DEV__) {\n      console.error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    }\n  } // 返回的虚拟dom对象\n\n\n  const element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.\n  // TODO: Drop this when these are no longer allowed as the type argument.\n\n  if (element == null) {\n    return element;\n  } // Skip key warning if the type isn't valid since our key validation logic\n  // doesn't expect a non-string/function type and can throw confusing errors.\n  // We don't want exception behavior to differ between dev and prod.\n  // (Rendering will throw with a helpful message and as soon as the type is\n  // fixed, the key warnings will appear.)\n\n\n  if (validType) {\n    for (let i = 2; i < arguments.length; i++) {\n      validateChildKeys(arguments[i], type);\n    }\n  }\n\n  if (type === REACT_FRAGMENT_TYPE) {\n    validateFragmentProps(element);\n  } else {\n    validatePropTypes(element);\n  }\n\n  return element;\n}\nlet didWarnAboutDeprecatedCreateFactory = false;\nexport function createFactoryWithValidation(type) {\n  const validatedFactory = createElementWithValidation.bind(null, type);\n  validatedFactory.type = type;\n\n  if (__DEV__) {\n    if (!didWarnAboutDeprecatedCreateFactory) {\n      didWarnAboutDeprecatedCreateFactory = true;\n      console.warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');\n    } // Legacy hook: remove it\n\n\n    Object.defineProperty(validatedFactory, 'type', {\n      enumerable: false,\n      get: function () {\n        console.warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');\n        Object.defineProperty(this, 'type', {\n          value: type\n        });\n        return type;\n      }\n    });\n  }\n\n  return validatedFactory;\n}\nexport function cloneElementWithValidation(element, props, children) {\n  const newElement = cloneElement.apply(this, arguments);\n\n  for (let i = 2; i < arguments.length; i++) {\n    validateChildKeys(arguments[i], newElement.type);\n  }\n\n  validatePropTypes(newElement);\n  return newElement;\n}","map":{"version":3,"names":["isValidElementType","getComponentNameFromType","getIteratorFn","REACT_FORWARD_REF_TYPE","REACT_MEMO_TYPE","REACT_FRAGMENT_TYPE","REACT_ELEMENT_TYPE","warnAboutSpreadingKeyToJSX","checkPropTypes","isArray","ReactCurrentOwner","isValidElement","createElement","cloneElement","jsxDEV","setExtraStackFrame","describeUnknownElementTypeFrameInDEV","hasOwnProperty","setCurrentlyValidatingElement","element","__DEV__","owner","_owner","stack","type","_source","propTypesMisspellWarningShown","getDeclarationErrorAddendum","current","name","getSourceInfoErrorAddendum","source","undefined","fileName","replace","lineNumber","getSourceInfoErrorAddendumForProps","elementProps","__source","ownerHasKeyUseWarning","getCurrentComponentErrorInfo","parentType","info","parentName","displayName","validateExplicitKey","_store","validated","key","currentComponentErrorInfo","childOwner","console","error","validateChildKeys","node","log","i","length","child","iteratorFn","entries","iterator","call","step","next","done","value","validatePropTypes","propTypes","$$typeof","props","PropTypes","getDefaultProps","isReactClassApproved","validateFragmentProps","fragment","keys","Object","ref","jsxWithValidation","isStaticChildren","self","validType","sourceInfo","typeString","children","freeze","jsxWithValidationStatic","jsxWithValidationDynamic","createElementWithValidation","apply","arguments","didWarnAboutDeprecatedCreateFactory","createFactoryWithValidation","validatedFactory","bind","warn","defineProperty","enumerable","get","cloneElementWithValidation","newElement"],"sources":["D:/project/font-end/debug-anything/react-test/src/react/packages/react/src/ReactElementValidator.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n/**\r\n * ReactElementValidator provides a wrapper around a element factory\r\n * which validates the props passed to the element. This is intended to be\r\n * used only in DEV and could be replaced by a static type checker for languages\r\n * that support it.\r\n */\r\n\r\nimport isValidElementType from 'shared/isValidElementType';\r\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\r\nimport {\r\n  getIteratorFn,\r\n  REACT_FORWARD_REF_TYPE,\r\n  REACT_MEMO_TYPE,\r\n  REACT_FRAGMENT_TYPE,\r\n  REACT_ELEMENT_TYPE,\r\n} from 'shared/ReactSymbols';\r\nimport { warnAboutSpreadingKeyToJSX } from 'shared/ReactFeatureFlags';\r\nimport checkPropTypes from 'shared/checkPropTypes';\r\nimport isArray from 'shared/isArray';\r\n\r\nimport ReactCurrentOwner from './ReactCurrentOwner';\r\nimport {\r\n  isValidElement,\r\n  createElement,\r\n  cloneElement,\r\n  jsxDEV,\r\n} from './ReactElement';\r\nimport { setExtraStackFrame } from './ReactDebugCurrentFrame';\r\nimport { describeUnknownElementTypeFrameInDEV } from 'shared/ReactComponentStackFrame';\r\nimport hasOwnProperty from 'shared/hasOwnProperty';\r\n\r\nfunction setCurrentlyValidatingElement (element) {\r\n  if (__DEV__) {\r\n    if (element) {\r\n      const owner = element._owner;\r\n      const stack = describeUnknownElementTypeFrameInDEV(\r\n        element.type,\r\n        element._source,\r\n        owner ? owner.type : null,\r\n      );\r\n      setExtraStackFrame(stack);\r\n    } else {\r\n      setExtraStackFrame(null);\r\n    }\r\n  }\r\n}\r\n\r\nlet propTypesMisspellWarningShown;\r\n\r\nif (__DEV__) {\r\n  propTypesMisspellWarningShown = false;\r\n}\r\n\r\nfunction getDeclarationErrorAddendum () {\r\n  if (ReactCurrentOwner.current) {\r\n    const name = getComponentNameFromType(ReactCurrentOwner.current.type);\r\n    if (name) {\r\n      return '\\n\\nCheck the render method of `' + name + '`.';\r\n    }\r\n  }\r\n  return '';\r\n}\r\n\r\nfunction getSourceInfoErrorAddendum (source) {\r\n  if (source !== undefined) {\r\n    const fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\r\n    const lineNumber = source.lineNumber;\r\n    return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\r\n  }\r\n  return '';\r\n}\r\n\r\nfunction getSourceInfoErrorAddendumForProps (elementProps) {\r\n  if (elementProps !== null && elementProps !== undefined) {\r\n    return getSourceInfoErrorAddendum(elementProps.__source);\r\n  }\r\n  return '';\r\n}\r\n\r\n/**\r\n * Warn if there's no key explicitly set on dynamic arrays of children or\r\n * object keys are not valid. This allows us to keep track of children between\r\n * updates.\r\n */\r\nconst ownerHasKeyUseWarning = {};\r\n\r\nfunction getCurrentComponentErrorInfo (parentType) {\r\n  let info = getDeclarationErrorAddendum();\r\n\r\n  if (!info) {\r\n    const parentName =\r\n      typeof parentType === 'string'\r\n        ? parentType\r\n        : parentType.displayName || parentType.name;\r\n    if (parentName) {\r\n      info = `\\n\\nCheck the top-level render call using <${parentName}>.`;\r\n    }\r\n  }\r\n  return info;\r\n}\r\n\r\n/**\r\n * Warn if the element doesn't have an explicit key assigned to it.\r\n * This element is in an array. The array could grow and shrink or be\r\n * reordered. All children that haven't already been validated are required to\r\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\r\n * will only be shown once.\r\n *\r\n * @internal\r\n * @param {ReactElement} element Element that requires a key.\r\n * @param {*} parentType element's parent's type.\r\n */\r\nfunction validateExplicitKey (element, parentType) {\r\n  if (!element._store || element._store.validated || element.key != null) {\r\n    return;\r\n  }\r\n  element._store.validated = true;\r\n\r\n  const currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\r\n  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\r\n    return;\r\n  }\r\n  ownerHasKeyUseWarning[currentComponentErrorInfo] = true;\r\n\r\n  // Usually the current owner is the offender, but if it accepts children as a\r\n  // property, it may be the creator of the child that's responsible for\r\n  // assigning it a key.\r\n  let childOwner = '';\r\n  if (\r\n    element &&\r\n    element._owner &&\r\n    element._owner !== ReactCurrentOwner.current\r\n  ) {\r\n    // Give the component that originally created this child.\r\n    childOwner = ` It was passed a child from ${getComponentNameFromType(\r\n      element._owner.type,\r\n    )}.`;\r\n  }\r\n\r\n  if (__DEV__) {\r\n    setCurrentlyValidatingElement(element);\r\n    console.error(\r\n      'Each child in a list should have a unique \"key\" prop.' +\r\n      '%s%s See https://reactjs.org/link/warning-keys for more information.',\r\n      currentComponentErrorInfo,\r\n      childOwner,\r\n    );\r\n    setCurrentlyValidatingElement(null);\r\n  }\r\n}\r\n\r\n/**\r\n * Ensure that every element either is passed in a static location, in an\r\n * array with an explicit keys property defined, or in an object literal\r\n * with valid key property.\r\n *\r\n * @internal\r\n * @param {ReactNode} node Statically passed child of any type.\r\n * @param {*} parentType node's parent's type.\r\n */\r\nfunction validateChildKeys (node, parentType) {\r\n  console.log(node)\r\n  if (typeof node !== 'object') {\r\n    return;\r\n  }\r\n  if (isArray(node)) {\r\n    for (let i = 0; i < node.length; i++) {\r\n      const child = node[i];\r\n      if (isValidElement(child)) {\r\n        validateExplicitKey(child, parentType);\r\n      }\r\n    }\r\n  } else if (isValidElement(node)) {\r\n    // This element was passed in a valid location.\r\n    if (node._store) {\r\n      node._store.validated = true;\r\n    }\r\n  } else if (node) {\r\n    const iteratorFn = getIteratorFn(node);\r\n    if (typeof iteratorFn === 'function') {\r\n      // Entry iterators used to provide implicit keys,\r\n      // but now we print a separate warning for them later.\r\n      if (iteratorFn !== node.entries) {\r\n        const iterator = iteratorFn.call(node);\r\n        let step;\r\n        while (!(step = iterator.next()).done) {\r\n          if (isValidElement(step.value)) {\r\n            validateExplicitKey(step.value, parentType);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Given an element, validate that its props follow the propTypes definition,\r\n * provided by the type.\r\n *\r\n * @param {ReactElement} element\r\n */\r\nfunction validatePropTypes (element) {\r\n  if (__DEV__) {\r\n    const type = element.type;\r\n    if (type === null || type === undefined || typeof type === 'string') {\r\n      return;\r\n    }\r\n    let propTypes;\r\n    if (typeof type === 'function') {\r\n      propTypes = type.propTypes;\r\n    } else if (\r\n      typeof type === 'object' &&\r\n      (type.$$typeof === REACT_FORWARD_REF_TYPE ||\r\n        // Note: Memo only checks outer props here.\r\n        // Inner props are checked in the reconciler.\r\n        type.$$typeof === REACT_MEMO_TYPE)\r\n    ) {\r\n      propTypes = type.propTypes;\r\n    } else {\r\n      return;\r\n    }\r\n    if (propTypes) {\r\n      // Intentionally inside to avoid triggering lazy initializers:\r\n      const name = getComponentNameFromType(type);\r\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\r\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\r\n      propTypesMisspellWarningShown = true;\r\n      // Intentionally inside to avoid triggering lazy initializers:\r\n      const name = getComponentNameFromType(type);\r\n      console.error(\r\n        'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?',\r\n        name || 'Unknown',\r\n      );\r\n    }\r\n    if (\r\n      typeof type.getDefaultProps === 'function' &&\r\n      !type.getDefaultProps.isReactClassApproved\r\n    ) {\r\n      console.error(\r\n        'getDefaultProps is only used on classic React.createClass ' +\r\n        'definitions. Use a static property named `defaultProps` instead.',\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Given a fragment, validate that it can only be provided with fragment props\r\n * @param {ReactElement} fragment\r\n */\r\nfunction validateFragmentProps (fragment) {\r\n  if (__DEV__) {\r\n    const keys = Object.keys(fragment.props);\r\n    for (let i = 0; i < keys.length; i++) {\r\n      const key = keys[i];\r\n      if (key !== 'children' && key !== 'key') {\r\n        setCurrentlyValidatingElement(fragment);\r\n        console.error(\r\n          'Invalid prop `%s` supplied to `React.Fragment`. ' +\r\n          'React.Fragment can only have `key` and `children` props.',\r\n          key,\r\n        );\r\n        setCurrentlyValidatingElement(null);\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (fragment.ref !== null) {\r\n      setCurrentlyValidatingElement(fragment);\r\n      console.error('Invalid attribute `ref` supplied to `React.Fragment`.');\r\n      setCurrentlyValidatingElement(null);\r\n    }\r\n  }\r\n}\r\n\r\nexport function jsxWithValidation (\r\n  type,\r\n  props,\r\n  key,\r\n  isStaticChildren,\r\n  source,\r\n  self,\r\n) {\r\n  const validType = isValidElementType(type);\r\n\r\n  // We warn in this case but don't throw. We expect the element creation to\r\n  // succeed and there will likely be errors in render.\r\n  if (!validType) {\r\n    let info = '';\r\n    if (\r\n      type === undefined ||\r\n      (typeof type === 'object' &&\r\n        type !== null &&\r\n        Object.keys(type).length === 0)\r\n    ) {\r\n      info +=\r\n        ' You likely forgot to export your component from the file ' +\r\n        \"it's defined in, or you might have mixed up default and named imports.\";\r\n    }\r\n\r\n    const sourceInfo = getSourceInfoErrorAddendum(source);\r\n    if (sourceInfo) {\r\n      info += sourceInfo;\r\n    } else {\r\n      info += getDeclarationErrorAddendum();\r\n    }\r\n\r\n    let typeString;\r\n    if (type === null) {\r\n      typeString = 'null';\r\n    } else if (isArray(type)) {\r\n      typeString = 'array';\r\n    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\r\n      typeString = `<${getComponentNameFromType(type.type) || 'Unknown'} />`;\r\n      info =\r\n        ' Did you accidentally export a JSX literal instead of a component?';\r\n    } else {\r\n      typeString = typeof type;\r\n    }\r\n\r\n    if (__DEV__) {\r\n      console.error(\r\n        'React.jsx: type is invalid -- expected a string (for ' +\r\n        'built-in components) or a class/function (for composite ' +\r\n        'components) but got: %s.%s',\r\n        typeString,\r\n        info,\r\n      );\r\n    }\r\n  }\r\n\r\n  const element = jsxDEV(type, props, key, source, self);\r\n\r\n  // The result can be nullish if a mock or a custom function is used.\r\n  // TODO: Drop this when these are no longer allowed as the type argument.\r\n  if (element == null) {\r\n    return element;\r\n  }\r\n\r\n  // Skip key warning if the type isn't valid since our key validation logic\r\n  // doesn't expect a non-string/function type and can throw confusing errors.\r\n  // We don't want exception behavior to differ between dev and prod.\r\n  // (Rendering will throw with a helpful message and as soon as the type is\r\n  // fixed, the key warnings will appear.)\r\n\r\n  if (validType) {\r\n    const children = props.children;\r\n    if (children !== undefined) {\r\n      if (isStaticChildren) {\r\n        if (isArray(children)) {\r\n          for (let i = 0; i < children.length; i++) {\r\n            validateChildKeys(children[i], type);\r\n          }\r\n\r\n          if (Object.freeze) {\r\n            Object.freeze(children);\r\n          }\r\n        } else {\r\n          if (__DEV__) {\r\n            console.error(\r\n              'React.jsx: Static children should always be an array. ' +\r\n              'You are likely explicitly calling React.jsxs or React.jsxDEV. ' +\r\n              'Use the Babel transform instead.',\r\n            );\r\n          }\r\n        }\r\n      } else {\r\n        validateChildKeys(children, type);\r\n      }\r\n    }\r\n  }\r\n\r\n  if (__DEV__) {\r\n    if (warnAboutSpreadingKeyToJSX) {\r\n      if (hasOwnProperty.call(props, 'key')) {\r\n        console.error(\r\n          'React.jsx: Spreading a key to JSX is a deprecated pattern. ' +\r\n          'Explicitly pass a key after spreading props in your JSX call. ' +\r\n          'E.g. <%s {...props} key={key} />',\r\n          getComponentNameFromType(type) || 'ComponentName',\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  if (type === REACT_FRAGMENT_TYPE) {\r\n    validateFragmentProps(element);\r\n  } else {\r\n    validatePropTypes(element);\r\n  }\r\n\r\n  return element;\r\n}\r\n\r\n// These two functions exist to still get child warnings in dev\r\n// even with the prod transform. This means that jsxDEV is purely\r\n// opt-in behavior for better messages but that we won't stop\r\n// giving you warnings if you use production apis.\r\nexport function jsxWithValidationStatic (type, props, key) {\r\n  return jsxWithValidation(type, props, key, true);\r\n}\r\n\r\nexport function jsxWithValidationDynamic (type, props, key) {\r\n  return jsxWithValidation(type, props, key, false);\r\n}\r\n\r\nexport function createElementWithValidation (type, props, children) {\r\n  // 验证标签类型是否是原生标签或者是react自定义的标签\r\n  const validType = isValidElementType(type);\r\n  // We warn in this case but don't throw. We expect the element creation to\r\n  // succeed and there will likely be errors in render.\r\n  if (!validType) {\r\n    let info = '';\r\n    if (\r\n      type === undefined ||\r\n      (typeof type === 'object' &&\r\n        type !== null &&\r\n        Object.keys(type).length === 0)\r\n    ) {\r\n      info +=\r\n        ' You likely forgot to export your component from the file ' +\r\n        \"it's defined in, or you might have mixed up default and named imports.\";\r\n    }\r\n\r\n    const sourceInfo = getSourceInfoErrorAddendumForProps(props);\r\n    if (sourceInfo) {\r\n      info += sourceInfo;\r\n    } else {\r\n      info += getDeclarationErrorAddendum();\r\n    }\r\n\r\n    let typeString;\r\n    if (type === null) {\r\n      typeString = 'null';\r\n    } else if (isArray(type)) {\r\n      typeString = 'array';\r\n    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\r\n      typeString = `<${getComponentNameFromType(type.type) || 'Unknown'} />`;\r\n      info =\r\n        ' Did you accidentally export a JSX literal instead of a component?';\r\n    } else {\r\n      typeString = typeof type;\r\n    }\r\n\r\n    if (__DEV__) {\r\n      console.error(\r\n        'React.createElement: type is invalid -- expected a string (for ' +\r\n        'built-in components) or a class/function (for composite ' +\r\n        'components) but got: %s.%s',\r\n        typeString,\r\n        info,\r\n      );\r\n    }\r\n  }\r\n\r\n  // 返回的虚拟dom对象\r\n  const element = createElement.apply(this, arguments);\r\n  // The result can be nullish if a mock or a custom function is used.\r\n  // TODO: Drop this when these are no longer allowed as the type argument.\r\n  if (element == null) {\r\n    return element;\r\n  }\r\n\r\n  // Skip key warning if the type isn't valid since our key validation logic\r\n  // doesn't expect a non-string/function type and can throw confusing errors.\r\n  // We don't want exception behavior to differ between dev and prod.\r\n  // (Rendering will throw with a helpful message and as soon as the type is\r\n  // fixed, the key warnings will appear.)\r\n  if (validType) {\r\n    for (let i = 2; i < arguments.length; i++) {\r\n      validateChildKeys(arguments[i], type);\r\n    }\r\n  }\r\n\r\n  if (type === REACT_FRAGMENT_TYPE) {\r\n    validateFragmentProps(element);\r\n  } else {\r\n    validatePropTypes(element);\r\n  }\r\n\r\n  return element;\r\n}\r\n\r\nlet didWarnAboutDeprecatedCreateFactory = false;\r\n\r\nexport function createFactoryWithValidation (type) {\r\n  const validatedFactory = createElementWithValidation.bind(null, type);\r\n  validatedFactory.type = type;\r\n  if (__DEV__) {\r\n    if (!didWarnAboutDeprecatedCreateFactory) {\r\n      didWarnAboutDeprecatedCreateFactory = true;\r\n      console.warn(\r\n        'React.createFactory() is deprecated and will be removed in ' +\r\n        'a future major release. Consider using JSX ' +\r\n        'or use React.createElement() directly instead.',\r\n      );\r\n    }\r\n    // Legacy hook: remove it\r\n    Object.defineProperty(validatedFactory, 'type', {\r\n      enumerable: false,\r\n      get: function () {\r\n        console.warn(\r\n          'Factory.type is deprecated. Access the class directly ' +\r\n          'before passing it to createFactory.',\r\n        );\r\n        Object.defineProperty(this, 'type', {\r\n          value: type,\r\n        });\r\n        return type;\r\n      },\r\n    });\r\n  }\r\n\r\n  return validatedFactory;\r\n}\r\n\r\nexport function cloneElementWithValidation (element, props, children) {\r\n  const newElement = cloneElement.apply(this, arguments);\r\n  for (let i = 2; i < arguments.length; i++) {\r\n    validateChildKeys(arguments[i], newElement.type);\r\n  }\r\n  validatePropTypes(newElement);\r\n  return newElement;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}