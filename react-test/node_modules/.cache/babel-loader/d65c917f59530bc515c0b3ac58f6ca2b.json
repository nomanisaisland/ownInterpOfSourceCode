{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\nimport isArray from 'shared/isArray';\nimport { checkControlledValueProps } from '../shared/ReactControlledValuePropTypes';\nimport { getCurrentFiberOwnerNameInDevOrNull } from 'react-reconciler/src/ReactCurrentFiber';\nimport { getToStringValue, toString } from './ToStringValue';\nimport { disableTextareaChildren } from 'shared/ReactFeatureFlags';\nlet didWarnValDefaultVal = false;\n\n/**\r\n * Implements a <textarea> host component that allows setting `value`, and\r\n * `defaultValue`. This differs from the traditional DOM API because value is\r\n * usually set as PCDATA children.\r\n *\r\n * If `value` is not supplied (or null/undefined), user actions that affect the\r\n * value will trigger updates to the element.\r\n *\r\n * If `value` is supplied (and not null/undefined), the rendered element will\r\n * not trigger updates to the element. Instead, the `value` prop must change in\r\n * order for the rendered element to be updated.\r\n *\r\n * The rendered element will be initialized with an empty value, the prop\r\n * `defaultValue` if specified, or the children content (deprecated).\r\n */\nexport function getHostProps(element, props) {\n  const node = element;\n\n  if (props.dangerouslySetInnerHTML != null) {\n    throw new Error('`dangerouslySetInnerHTML` does not make sense on <textarea>.');\n  } // Always set children to the same thing. In IE9, the selection range will\n  // get reset if `textContent` is mutated.  We could add a check in setTextContent\n  // to only set the value if/when the value differs from the node value (which would\n  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this\n  // solution. The value can be a boolean or object so that's why it's forced\n  // to be a string.\n\n\n  const hostProps = { ...props,\n    value: undefined,\n    defaultValue: undefined,\n    children: toString(node._wrapperState.initialValue)\n  };\n  return hostProps;\n}\nexport function initWrapperState(element, props) {\n  const node = element;\n\n  if (__DEV__) {\n    checkControlledValueProps('textarea', props);\n\n    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {\n      console.error('%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');\n      didWarnValDefaultVal = true;\n    }\n  }\n\n  let initialValue = props.value; // Only bother fetching default value if we're going to use it\n\n  if (initialValue == null) {\n    let {\n      children,\n      defaultValue\n    } = props;\n\n    if (children != null) {\n      if (__DEV__) {\n        console.error('Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');\n      }\n\n      if (!disableTextareaChildren) {\n        if (defaultValue != null) {\n          throw new Error('If you supply `defaultValue` on a <textarea>, do not pass children.');\n        }\n\n        if (isArray(children)) {\n          if (children.length > 1) {\n            throw new Error('<textarea> can only have at most one child.');\n          }\n\n          children = children[0];\n        }\n\n        defaultValue = children;\n      }\n    }\n\n    if (defaultValue == null) {\n      defaultValue = '';\n    }\n\n    initialValue = defaultValue;\n  }\n\n  node._wrapperState = {\n    initialValue: getToStringValue(initialValue)\n  };\n}\nexport function updateWrapper(element, props) {\n  const node = element;\n  const value = getToStringValue(props.value);\n  const defaultValue = getToStringValue(props.defaultValue);\n\n  if (value != null) {\n    // Cast `value` to a string to ensure the value is set correctly. While\n    // browsers typically do this as necessary, jsdom doesn't.\n    const newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed\n\n    if (newValue !== node.value) {\n      node.value = newValue;\n    }\n\n    if (props.defaultValue == null && node.defaultValue !== newValue) {\n      node.defaultValue = newValue;\n    }\n  }\n\n  if (defaultValue != null) {\n    node.defaultValue = toString(defaultValue);\n  }\n}\nexport function postMountWrapper(element, props) {\n  const node = element; // This is in postMount because we need access to the DOM node, which is not\n  // available until after the component has mounted.\n\n  const textContent = node.textContent; // Only set node.value if textContent is equal to the expected\n  // initial value. In IE10/IE11 there is a bug where the placeholder attribute\n  // will populate textContent as well.\n  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/\n\n  if (textContent === node._wrapperState.initialValue) {\n    if (textContent !== '' && textContent !== null) {\n      node.value = textContent;\n    }\n  }\n}\nexport function restoreControlledState(element, props) {\n  // DOM component is still mounted; update\n  updateWrapper(element, props);\n}","map":{"version":3,"names":["isArray","checkControlledValueProps","getCurrentFiberOwnerNameInDevOrNull","getToStringValue","toString","disableTextareaChildren","didWarnValDefaultVal","getHostProps","element","props","node","dangerouslySetInnerHTML","Error","hostProps","value","undefined","defaultValue","children","_wrapperState","initialValue","initWrapperState","__DEV__","console","error","length","updateWrapper","newValue","postMountWrapper","textContent","restoreControlledState"],"sources":["D:/project/font-end/debug-anything/react-test/src/react/packages/react-dom/src/client/ReactDOMTextarea.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport isArray from 'shared/isArray';\r\n\r\nimport {checkControlledValueProps} from '../shared/ReactControlledValuePropTypes';\r\nimport {getCurrentFiberOwnerNameInDevOrNull} from 'react-reconciler/src/ReactCurrentFiber';\r\nimport {getToStringValue, toString} from './ToStringValue';\r\nimport type {ToStringValue} from './ToStringValue';\r\nimport {disableTextareaChildren} from 'shared/ReactFeatureFlags';\r\n\r\nlet didWarnValDefaultVal = false;\r\n\r\ntype TextAreaWithWrapperState = HTMLTextAreaElement & {|\r\n  _wrapperState: {|initialValue: ToStringValue|},\r\n|};\r\n\r\n/**\r\n * Implements a <textarea> host component that allows setting `value`, and\r\n * `defaultValue`. This differs from the traditional DOM API because value is\r\n * usually set as PCDATA children.\r\n *\r\n * If `value` is not supplied (or null/undefined), user actions that affect the\r\n * value will trigger updates to the element.\r\n *\r\n * If `value` is supplied (and not null/undefined), the rendered element will\r\n * not trigger updates to the element. Instead, the `value` prop must change in\r\n * order for the rendered element to be updated.\r\n *\r\n * The rendered element will be initialized with an empty value, the prop\r\n * `defaultValue` if specified, or the children content (deprecated).\r\n */\r\n\r\nexport function getHostProps(element: Element, props: Object) {\r\n  const node = ((element: any): TextAreaWithWrapperState);\r\n\r\n  if (props.dangerouslySetInnerHTML != null) {\r\n    throw new Error(\r\n      '`dangerouslySetInnerHTML` does not make sense on <textarea>.',\r\n    );\r\n  }\r\n\r\n  // Always set children to the same thing. In IE9, the selection range will\r\n  // get reset if `textContent` is mutated.  We could add a check in setTextContent\r\n  // to only set the value if/when the value differs from the node value (which would\r\n  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this\r\n  // solution. The value can be a boolean or object so that's why it's forced\r\n  // to be a string.\r\n  const hostProps = {\r\n    ...props,\r\n    value: undefined,\r\n    defaultValue: undefined,\r\n    children: toString(node._wrapperState.initialValue),\r\n  };\r\n\r\n  return hostProps;\r\n}\r\n\r\nexport function initWrapperState(element: Element, props: Object) {\r\n  const node = ((element: any): TextAreaWithWrapperState);\r\n  if (__DEV__) {\r\n    checkControlledValueProps('textarea', props);\r\n    if (\r\n      props.value !== undefined &&\r\n      props.defaultValue !== undefined &&\r\n      !didWarnValDefaultVal\r\n    ) {\r\n      console.error(\r\n        '%s contains a textarea with both value and defaultValue props. ' +\r\n          'Textarea elements must be either controlled or uncontrolled ' +\r\n          '(specify either the value prop, or the defaultValue prop, but not ' +\r\n          'both). Decide between using a controlled or uncontrolled textarea ' +\r\n          'and remove one of these props. More info: ' +\r\n          'https://reactjs.org/link/controlled-components',\r\n        getCurrentFiberOwnerNameInDevOrNull() || 'A component',\r\n      );\r\n      didWarnValDefaultVal = true;\r\n    }\r\n  }\r\n\r\n  let initialValue = props.value;\r\n\r\n  // Only bother fetching default value if we're going to use it\r\n  if (initialValue == null) {\r\n    let {children, defaultValue} = props;\r\n    if (children != null) {\r\n      if (__DEV__) {\r\n        console.error(\r\n          'Use the `defaultValue` or `value` props instead of setting ' +\r\n            'children on <textarea>.',\r\n        );\r\n      }\r\n      if (!disableTextareaChildren) {\r\n        if (defaultValue != null) {\r\n          throw new Error(\r\n            'If you supply `defaultValue` on a <textarea>, do not pass children.',\r\n          );\r\n        }\r\n\r\n        if (isArray(children)) {\r\n          if (children.length > 1) {\r\n            throw new Error('<textarea> can only have at most one child.');\r\n          }\r\n\r\n          children = children[0];\r\n        }\r\n\r\n        defaultValue = children;\r\n      }\r\n    }\r\n    if (defaultValue == null) {\r\n      defaultValue = '';\r\n    }\r\n    initialValue = defaultValue;\r\n  }\r\n\r\n  node._wrapperState = {\r\n    initialValue: getToStringValue(initialValue),\r\n  };\r\n}\r\n\r\nexport function updateWrapper(element: Element, props: Object) {\r\n  const node = ((element: any): TextAreaWithWrapperState);\r\n  const value = getToStringValue(props.value);\r\n  const defaultValue = getToStringValue(props.defaultValue);\r\n  if (value != null) {\r\n    // Cast `value` to a string to ensure the value is set correctly. While\r\n    // browsers typically do this as necessary, jsdom doesn't.\r\n    const newValue = toString(value);\r\n    // To avoid side effects (such as losing text selection), only set value if changed\r\n    if (newValue !== node.value) {\r\n      node.value = newValue;\r\n    }\r\n    if (props.defaultValue == null && node.defaultValue !== newValue) {\r\n      node.defaultValue = newValue;\r\n    }\r\n  }\r\n  if (defaultValue != null) {\r\n    node.defaultValue = toString(defaultValue);\r\n  }\r\n}\r\n\r\nexport function postMountWrapper(element: Element, props: Object) {\r\n  const node = ((element: any): TextAreaWithWrapperState);\r\n  // This is in postMount because we need access to the DOM node, which is not\r\n  // available until after the component has mounted.\r\n  const textContent = node.textContent;\r\n\r\n  // Only set node.value if textContent is equal to the expected\r\n  // initial value. In IE10/IE11 there is a bug where the placeholder attribute\r\n  // will populate textContent as well.\r\n  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/\r\n  if (textContent === node._wrapperState.initialValue) {\r\n    if (textContent !== '' && textContent !== null) {\r\n      node.value = textContent;\r\n    }\r\n  }\r\n}\r\n\r\nexport function restoreControlledState(element: Element, props: Object) {\r\n  // DOM component is still mounted; update\r\n  updateWrapper(element, props);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}