{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\nimport { getPropertyInfo, shouldIgnoreAttribute, shouldRemoveAttribute, isAttributeNameSafe, BOOLEAN, OVERLOADED_BOOLEAN } from '../shared/DOMProperty';\nimport sanitizeURL from '../shared/sanitizeURL';\nimport { disableJavaScriptURLs, enableTrustedTypesIntegration, enableCustomElementPropertySupport } from 'shared/ReactFeatureFlags';\nimport { checkAttributeStringCoercion } from 'shared/CheckStringCoercion';\nimport { getFiberCurrentPropsFromNode } from './ReactDOMComponentTree';\n\n/**\r\n * Get the value for a property on a node. Only used in DEV for SSR validation.\r\n * The \"expected\" argument is used as a hint of what the expected value is.\r\n * Some properties have multiple equivalent values.\r\n */\nexport function getValueForProperty(node, name, expected, propertyInfo) {\n  if (__DEV__) {\n    if (propertyInfo.mustUseProperty) {\n      const {\n        propertyName\n      } = propertyInfo;\n      return node[propertyName];\n    } else {\n      // This check protects multiple uses of `expected`, which is why the\n      // react-internal/safe-string-coercion rule is disabled in several spots\n      // below.\n      if (__DEV__) {\n        checkAttributeStringCoercion(expected, name);\n      }\n\n      if (!disableJavaScriptURLs && propertyInfo.sanitizeURL) {\n        // If we haven't fully disabled javascript: URLs, and if\n        // the hydration is successful of a javascript: URL, we\n        // still want to warn on the client.\n        // eslint-disable-next-line react-internal/safe-string-coercion\n        sanitizeURL('' + expected);\n      }\n\n      const attributeName = propertyInfo.attributeName;\n      let stringValue = null;\n\n      if (propertyInfo.type === OVERLOADED_BOOLEAN) {\n        if (node.hasAttribute(attributeName)) {\n          const value = node.getAttribute(attributeName);\n\n          if (value === '') {\n            return true;\n          }\n\n          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {\n            return value;\n          } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n          if (value === '' + expected) {\n            return expected;\n          }\n\n          return value;\n        }\n      } else if (node.hasAttribute(attributeName)) {\n        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {\n          // We had an attribute but shouldn't have had one, so read it\n          // for the error message.\n          return node.getAttribute(attributeName);\n        }\n\n        if (propertyInfo.type === BOOLEAN) {\n          // If this was a boolean, it doesn't matter what the value is\n          // the fact that we have it is the same as the expected.\n          return expected;\n        } // Even if this property uses a namespace we use getAttribute\n        // because we assume its namespaced name is the same as our config.\n        // To use getAttributeNS we need the local name which we don't have\n        // in our config atm.\n\n\n        stringValue = node.getAttribute(attributeName);\n      }\n\n      if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {\n        return stringValue === null ? expected : stringValue; // eslint-disable-next-line react-internal/safe-string-coercion\n      } else if (stringValue === '' + expected) {\n        return expected;\n      } else {\n        return stringValue;\n      }\n    }\n  }\n}\n/**\r\n * Get the value for a attribute on a node. Only used in DEV for SSR validation.\r\n * The third argument is used as a hint of what the expected value is. Some\r\n * attributes have multiple equivalent values.\r\n */\n\nexport function getValueForAttribute(node, name, expected) {\n  if (__DEV__) {\n    if (!isAttributeNameSafe(name)) {\n      return;\n    }\n\n    if (!node.hasAttribute(name)) {\n      return expected === undefined ? undefined : null;\n    }\n\n    const value = node.getAttribute(name);\n\n    if (__DEV__) {\n      checkAttributeStringCoercion(expected, name);\n    }\n\n    if (value === '' + expected) {\n      return expected;\n    }\n\n    return value;\n  }\n}\n/**\r\n * Sets the value for a property on a node.\r\n *\r\n * @param {DOMElement} node\r\n * @param {string} name\r\n * @param {*} value\r\n */\n\nexport function setValueForProperty(node, name, value, isCustomComponentTag) {\n  const propertyInfo = getPropertyInfo(name);\n\n  if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {\n    return;\n  }\n\n  if (enableCustomElementPropertySupport && isCustomComponentTag && name[0] === 'o' && name[1] === 'n') {\n    let eventName = name.replace(/Capture$/, '');\n    const useCapture = name !== eventName;\n    eventName = eventName.slice(2);\n    const prevProps = getFiberCurrentPropsFromNode(node);\n    const prevValue = prevProps != null ? prevProps[name] : null;\n\n    if (typeof prevValue === 'function') {\n      node.removeEventListener(eventName, prevValue, useCapture);\n    }\n\n    if (typeof value === 'function') {\n      if (typeof prevValue !== 'function' && prevValue !== null) {\n        // If we previously assigned a non-function type into this node, then\n        // remove it when switching to event listener mode.\n        if (name in node) {\n          node[name] = null;\n        } else if (node.hasAttribute(name)) {\n          node.removeAttribute(name);\n        }\n      } // $FlowFixMe value can't be casted to EventListener.\n\n\n      node.addEventListener(eventName, value, useCapture);\n      return;\n    }\n  }\n\n  if (enableCustomElementPropertySupport && isCustomComponentTag && name in node) {\n    node[name] = value;\n    return;\n  }\n\n  if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {\n    value = null;\n  } // If the prop isn't in the special list, treat it as a simple attribute.\n\n\n  if (isCustomComponentTag || propertyInfo === null) {\n    if (isAttributeNameSafe(name)) {\n      const attributeName = name;\n\n      if (value === null) {\n        node.removeAttribute(attributeName);\n      } else {\n        if (__DEV__) {\n          checkAttributeStringCoercion(value, name);\n        }\n\n        node.setAttribute(attributeName, enableTrustedTypesIntegration ? value : '' + value);\n      }\n    }\n\n    return;\n  }\n\n  const {\n    mustUseProperty\n  } = propertyInfo;\n\n  if (mustUseProperty) {\n    const {\n      propertyName\n    } = propertyInfo;\n\n    if (value === null) {\n      const {\n        type\n      } = propertyInfo;\n      node[propertyName] = type === BOOLEAN ? false : '';\n    } else {\n      // Contrary to `setAttribute`, object properties are properly\n      // `toString`ed by IE8/9.\n      node[propertyName] = value;\n    }\n\n    return;\n  } // The rest are treated as attributes with special cases.\n\n\n  const {\n    attributeName,\n    attributeNamespace\n  } = propertyInfo;\n\n  if (value === null) {\n    node.removeAttribute(attributeName);\n  } else {\n    const {\n      type\n    } = propertyInfo;\n    let attributeValue;\n\n    if (type === BOOLEAN || type === OVERLOADED_BOOLEAN && value === true) {\n      // If attribute type is boolean, we know for sure it won't be an execution sink\n      // and we won't require Trusted Type here.\n      attributeValue = '';\n    } else {\n      // `setAttribute` with objects becomes only `[object]` in IE8/9,\n      // ('' + value) makes it output the correct toString()-value.\n      if (enableTrustedTypesIntegration) {\n        attributeValue = value;\n      } else {\n        if (__DEV__) {\n          checkAttributeStringCoercion(value, attributeName);\n        }\n\n        attributeValue = '' + value;\n      }\n\n      if (propertyInfo.sanitizeURL) {\n        sanitizeURL(attributeValue.toString());\n      }\n    }\n\n    if (attributeNamespace) {\n      node.setAttributeNS(attributeNamespace, attributeName, attributeValue);\n    } else {\n      node.setAttribute(attributeName, attributeValue);\n    }\n  }\n}","map":{"version":3,"names":["getPropertyInfo","shouldIgnoreAttribute","shouldRemoveAttribute","isAttributeNameSafe","BOOLEAN","OVERLOADED_BOOLEAN","sanitizeURL","disableJavaScriptURLs","enableTrustedTypesIntegration","enableCustomElementPropertySupport","checkAttributeStringCoercion","getFiberCurrentPropsFromNode","getValueForProperty","node","name","expected","propertyInfo","__DEV__","mustUseProperty","propertyName","attributeName","stringValue","type","hasAttribute","value","getAttribute","getValueForAttribute","undefined","setValueForProperty","isCustomComponentTag","eventName","replace","useCapture","slice","prevProps","prevValue","removeEventListener","removeAttribute","addEventListener","setAttribute","attributeNamespace","attributeValue","toString","setAttributeNS"],"sources":["E:/debug-anything/react-test/src/react/packages/react-dom/src/client/DOMPropertyOperations.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport {\r\n  getPropertyInfo,\r\n  shouldIgnoreAttribute,\r\n  shouldRemoveAttribute,\r\n  isAttributeNameSafe,\r\n  BOOLEAN,\r\n  OVERLOADED_BOOLEAN,\r\n} from '../shared/DOMProperty';\r\nimport sanitizeURL from '../shared/sanitizeURL';\r\nimport {\r\n  disableJavaScriptURLs,\r\n  enableTrustedTypesIntegration,\r\n  enableCustomElementPropertySupport,\r\n} from 'shared/ReactFeatureFlags';\r\nimport {checkAttributeStringCoercion} from 'shared/CheckStringCoercion';\r\nimport {getFiberCurrentPropsFromNode} from './ReactDOMComponentTree';\r\n\r\nimport type {PropertyInfo} from '../shared/DOMProperty';\r\n\r\n/**\r\n * Get the value for a property on a node. Only used in DEV for SSR validation.\r\n * The \"expected\" argument is used as a hint of what the expected value is.\r\n * Some properties have multiple equivalent values.\r\n */\r\nexport function getValueForProperty(\r\n  node: Element,\r\n  name: string,\r\n  expected: mixed,\r\n  propertyInfo: PropertyInfo,\r\n): mixed {\r\n  if (__DEV__) {\r\n    if (propertyInfo.mustUseProperty) {\r\n      const {propertyName} = propertyInfo;\r\n      return (node: any)[propertyName];\r\n    } else {\r\n      // This check protects multiple uses of `expected`, which is why the\r\n      // react-internal/safe-string-coercion rule is disabled in several spots\r\n      // below.\r\n      if (__DEV__) {\r\n        checkAttributeStringCoercion(expected, name);\r\n      }\r\n\r\n      if (!disableJavaScriptURLs && propertyInfo.sanitizeURL) {\r\n        // If we haven't fully disabled javascript: URLs, and if\r\n        // the hydration is successful of a javascript: URL, we\r\n        // still want to warn on the client.\r\n        // eslint-disable-next-line react-internal/safe-string-coercion\r\n        sanitizeURL('' + (expected: any));\r\n      }\r\n\r\n      const attributeName = propertyInfo.attributeName;\r\n\r\n      let stringValue = null;\r\n\r\n      if (propertyInfo.type === OVERLOADED_BOOLEAN) {\r\n        if (node.hasAttribute(attributeName)) {\r\n          const value = node.getAttribute(attributeName);\r\n          if (value === '') {\r\n            return true;\r\n          }\r\n          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {\r\n            return value;\r\n          }\r\n          // eslint-disable-next-line react-internal/safe-string-coercion\r\n          if (value === '' + (expected: any)) {\r\n            return expected;\r\n          }\r\n          return value;\r\n        }\r\n      } else if (node.hasAttribute(attributeName)) {\r\n        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {\r\n          // We had an attribute but shouldn't have had one, so read it\r\n          // for the error message.\r\n          return node.getAttribute(attributeName);\r\n        }\r\n        if (propertyInfo.type === BOOLEAN) {\r\n          // If this was a boolean, it doesn't matter what the value is\r\n          // the fact that we have it is the same as the expected.\r\n          return expected;\r\n        }\r\n        // Even if this property uses a namespace we use getAttribute\r\n        // because we assume its namespaced name is the same as our config.\r\n        // To use getAttributeNS we need the local name which we don't have\r\n        // in our config atm.\r\n        stringValue = node.getAttribute(attributeName);\r\n      }\r\n\r\n      if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {\r\n        return stringValue === null ? expected : stringValue;\r\n        // eslint-disable-next-line react-internal/safe-string-coercion\r\n      } else if (stringValue === '' + (expected: any)) {\r\n        return expected;\r\n      } else {\r\n        return stringValue;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Get the value for a attribute on a node. Only used in DEV for SSR validation.\r\n * The third argument is used as a hint of what the expected value is. Some\r\n * attributes have multiple equivalent values.\r\n */\r\nexport function getValueForAttribute(\r\n  node: Element,\r\n  name: string,\r\n  expected: mixed,\r\n): mixed {\r\n  if (__DEV__) {\r\n    if (!isAttributeNameSafe(name)) {\r\n      return;\r\n    }\r\n    if (!node.hasAttribute(name)) {\r\n      return expected === undefined ? undefined : null;\r\n    }\r\n    const value = node.getAttribute(name);\r\n    if (__DEV__) {\r\n      checkAttributeStringCoercion(expected, name);\r\n    }\r\n    if (value === '' + (expected: any)) {\r\n      return expected;\r\n    }\r\n    return value;\r\n  }\r\n}\r\n\r\n/**\r\n * Sets the value for a property on a node.\r\n *\r\n * @param {DOMElement} node\r\n * @param {string} name\r\n * @param {*} value\r\n */\r\nexport function setValueForProperty(\r\n  node: Element,\r\n  name: string,\r\n  value: mixed,\r\n  isCustomComponentTag: boolean,\r\n) {\r\n  const propertyInfo = getPropertyInfo(name);\r\n  if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {\r\n    return;\r\n  }\r\n\r\n  if (\r\n    enableCustomElementPropertySupport &&\r\n    isCustomComponentTag &&\r\n    name[0] === 'o' &&\r\n    name[1] === 'n'\r\n  ) {\r\n    let eventName = name.replace(/Capture$/, '');\r\n    const useCapture = name !== eventName;\r\n    eventName = eventName.slice(2);\r\n\r\n    const prevProps = getFiberCurrentPropsFromNode(node);\r\n    const prevValue = prevProps != null ? prevProps[name] : null;\r\n    if (typeof prevValue === 'function') {\r\n      node.removeEventListener(eventName, prevValue, useCapture);\r\n    }\r\n    if (typeof value === 'function') {\r\n      if (typeof prevValue !== 'function' && prevValue !== null) {\r\n        // If we previously assigned a non-function type into this node, then\r\n        // remove it when switching to event listener mode.\r\n        if (name in (node: any)) {\r\n          (node: any)[name] = null;\r\n        } else if (node.hasAttribute(name)) {\r\n          node.removeAttribute(name);\r\n        }\r\n      }\r\n\r\n      // $FlowFixMe value can't be casted to EventListener.\r\n      node.addEventListener(eventName, (value: EventListener), useCapture);\r\n      return;\r\n    }\r\n  }\r\n\r\n  if (\r\n    enableCustomElementPropertySupport &&\r\n    isCustomComponentTag &&\r\n    name in (node: any)\r\n  ) {\r\n    (node: any)[name] = value;\r\n    return;\r\n  }\r\n\r\n  if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {\r\n    value = null;\r\n  }\r\n\r\n  // If the prop isn't in the special list, treat it as a simple attribute.\r\n  if (isCustomComponentTag || propertyInfo === null) {\r\n    if (isAttributeNameSafe(name)) {\r\n      const attributeName = name;\r\n      if (value === null) {\r\n        node.removeAttribute(attributeName);\r\n      } else {\r\n        if (__DEV__) {\r\n          checkAttributeStringCoercion(value, name);\r\n        }\r\n        node.setAttribute(\r\n          attributeName,\r\n          enableTrustedTypesIntegration ? (value: any) : '' + (value: any),\r\n        );\r\n      }\r\n    }\r\n    return;\r\n  }\r\n  const {mustUseProperty} = propertyInfo;\r\n  if (mustUseProperty) {\r\n    const {propertyName} = propertyInfo;\r\n    if (value === null) {\r\n      const {type} = propertyInfo;\r\n      (node: any)[propertyName] = type === BOOLEAN ? false : '';\r\n    } else {\r\n      // Contrary to `setAttribute`, object properties are properly\r\n      // `toString`ed by IE8/9.\r\n      (node: any)[propertyName] = value;\r\n    }\r\n    return;\r\n  }\r\n  // The rest are treated as attributes with special cases.\r\n  const {attributeName, attributeNamespace} = propertyInfo;\r\n  if (value === null) {\r\n    node.removeAttribute(attributeName);\r\n  } else {\r\n    const {type} = propertyInfo;\r\n    let attributeValue;\r\n    if (type === BOOLEAN || (type === OVERLOADED_BOOLEAN && value === true)) {\r\n      // If attribute type is boolean, we know for sure it won't be an execution sink\r\n      // and we won't require Trusted Type here.\r\n      attributeValue = '';\r\n    } else {\r\n      // `setAttribute` with objects becomes only `[object]` in IE8/9,\r\n      // ('' + value) makes it output the correct toString()-value.\r\n      if (enableTrustedTypesIntegration) {\r\n        attributeValue = (value: any);\r\n      } else {\r\n        if (__DEV__) {\r\n          checkAttributeStringCoercion(value, attributeName);\r\n        }\r\n        attributeValue = '' + (value: any);\r\n      }\r\n      if (propertyInfo.sanitizeURL) {\r\n        sanitizeURL(attributeValue.toString());\r\n      }\r\n    }\r\n    if (attributeNamespace) {\r\n      node.setAttributeNS(attributeNamespace, attributeName, attributeValue);\r\n    } else {\r\n      node.setAttribute(attributeName, attributeValue);\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}