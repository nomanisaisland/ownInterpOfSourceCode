{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\nexport function addEventBubbleListener(target, eventType, listener) {\n  target.addEventListener(eventType, listener, false);\n  return listener;\n}\nexport function addEventCaptureListener(target, eventType, listener) {\n  target.addEventListener(eventType, listener, true);\n  return listener;\n}\nexport function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {\n  // 当我们在滚动页面的时候（通常是我们监听touch事件的时候），页面其实会有一个短暂的停顿（大概200ms），浏览器不知道我们是否要preventDefault，所以它需要一个延迟来检测。这就导致了我们的滑动显得比较卡顿。\n  // 我们可以通过对addEventListener的第三个参数设置{ passive: true }来避免浏览器检测这个我们是否有在touch事件的handler里调用preventDefault\n  // 你可以这么理解： 当你触摸滑动页面时，页面应该跟随手指一起滚动。而此时你绑定了一个 touchmove 事件，你的事件大概执行 200 毫秒。这时浏览器就犯迷糊了：如果你在事件绑定函数中调用了 preventDefault，那么页面就不应该滚动，如果你没有调用 preventDefault，页面就需要滚动。但是你到底调用了还是没有调用，浏览器不知道。只能先执行你的函数，等 200 毫秒后，绑定事件执行完了，浏览器才知道，“哦，原来你没有阻止默认行为，好的，我马上滚”。此时，页面开始滚。\n  // 所以设置{ passive: true }的意义是s\n  // 告诉浏览器立马滚动，不用等200毫秒后确认了，我根本就没有preventDefault，此时你滚动起来再也没有延迟感了，舒服了\n  target.addEventListener(eventType, listener, {\n    capture: true,\n    passive\n  });\n  return listener;\n}\nexport function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {\n  // passive 设置为 true 时，表示 listener 永远告诉浏览器不会调用 preventDefault()，不用来检测我有没有调用，检测的话会有200ms的延迟\n  target.addEventListener(eventType, listener, {\n    passive\n  });\n  return listener;\n}\nexport function removeEventListener(target, eventType, listener, capture) {\n  target.removeEventListener(eventType, listener, capture);\n}","map":{"version":3,"names":["addEventBubbleListener","target","eventType","listener","addEventListener","addEventCaptureListener","addEventCaptureListenerWithPassiveFlag","passive","capture","addEventBubbleListenerWithPassiveFlag","removeEventListener"],"sources":["D:/project/font-end/debug-anything/react-test/src/react/packages/react-dom/src/events/EventListener.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nexport function addEventBubbleListener (\r\n  target: EventTarget,\r\n  eventType: string,\r\n  listener: Function,\r\n): Function {\r\n  target.addEventListener(eventType, listener, false);\r\n  return listener;\r\n}\r\n\r\nexport function addEventCaptureListener (\r\n  target: EventTarget,\r\n  eventType: string,\r\n  listener: Function,\r\n): Function {\r\n  target.addEventListener(eventType, listener, true);\r\n  return listener;\r\n}\r\n\r\nexport function addEventCaptureListenerWithPassiveFlag (\r\n  target: EventTarget,\r\n  eventType: string,\r\n  listener: Function,\r\n  passive: boolean,\r\n): Function {\r\n  // 当我们在滚动页面的时候（通常是我们监听touch事件的时候），页面其实会有一个短暂的停顿（大概200ms），浏览器不知道我们是否要preventDefault，所以它需要一个延迟来检测。这就导致了我们的滑动显得比较卡顿。\r\n  // 我们可以通过对addEventListener的第三个参数设置{ passive: true }来避免浏览器检测这个我们是否有在touch事件的handler里调用preventDefault\r\n  // 你可以这么理解： 当你触摸滑动页面时，页面应该跟随手指一起滚动。而此时你绑定了一个 touchmove 事件，你的事件大概执行 200 毫秒。这时浏览器就犯迷糊了：如果你在事件绑定函数中调用了 preventDefault，那么页面就不应该滚动，如果你没有调用 preventDefault，页面就需要滚动。但是你到底调用了还是没有调用，浏览器不知道。只能先执行你的函数，等 200 毫秒后，绑定事件执行完了，浏览器才知道，“哦，原来你没有阻止默认行为，好的，我马上滚”。此时，页面开始滚。\r\n  // 所以设置{ passive: true }的意义是s\r\n  // 告诉浏览器立马滚动，不用等200毫秒后确认了，我根本就没有preventDefault，此时你滚动起来再也没有延迟感了，舒服了\r\n  target.addEventListener(eventType, listener, {\r\n    capture: true,\r\n    passive,\r\n  });\r\n  return listener;\r\n}\r\n\r\nexport function addEventBubbleListenerWithPassiveFlag (\r\n  target: EventTarget,\r\n  eventType: string,\r\n  listener: Function,\r\n  passive: boolean,\r\n): Function {\r\n  // passive 设置为 true 时，表示 listener 永远告诉浏览器不会调用 preventDefault()，不用来检测我有没有调用，检测的话会有200ms的延迟\r\n  target.addEventListener(eventType, listener, {\r\n    passive,\r\n  });\r\n  return listener;\r\n}\r\n\r\nexport function removeEventListener (\r\n  target: EventTarget,\r\n  eventType: string,\r\n  listener: Function,\r\n  capture: boolean,\r\n): void {\r\n  target.removeEventListener(eventType, listener, capture);\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,SAASA,sBAAT,CACLC,MADK,EAELC,SAFK,EAGLC,QAHK,EAIK;EACVF,MAAM,CAACG,gBAAP,CAAwBF,SAAxB,EAAmCC,QAAnC,EAA6C,KAA7C;EACA,OAAOA,QAAP;AACD;AAED,OAAO,SAASE,uBAAT,CACLJ,MADK,EAELC,SAFK,EAGLC,QAHK,EAIK;EACVF,MAAM,CAACG,gBAAP,CAAwBF,SAAxB,EAAmCC,QAAnC,EAA6C,IAA7C;EACA,OAAOA,QAAP;AACD;AAED,OAAO,SAASG,sCAAT,CACLL,MADK,EAELC,SAFK,EAGLC,QAHK,EAILI,OAJK,EAKK;EACV;EACA;EACA;EACA;EACA;EACAN,MAAM,CAACG,gBAAP,CAAwBF,SAAxB,EAAmCC,QAAnC,EAA6C;IAC3CK,OAAO,EAAE,IADkC;IAE3CD;EAF2C,CAA7C;EAIA,OAAOJ,QAAP;AACD;AAED,OAAO,SAASM,qCAAT,CACLR,MADK,EAELC,SAFK,EAGLC,QAHK,EAILI,OAJK,EAKK;EACV;EACAN,MAAM,CAACG,gBAAP,CAAwBF,SAAxB,EAAmCC,QAAnC,EAA6C;IAC3CI;EAD2C,CAA7C;EAGA,OAAOJ,QAAP;AACD;AAED,OAAO,SAASO,mBAAT,CACLT,MADK,EAELC,SAFK,EAGLC,QAHK,EAILK,OAJK,EAKC;EACNP,MAAM,CAACS,mBAAP,CAA2BR,SAA3B,EAAsCC,QAAtC,EAAgDK,OAAhD;AACD"},"metadata":{},"sourceType":"module"}