{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\nimport { isPrimaryRenderer } from './ReactFiberHostConfig'; // Work in progress version numbers only apply to a single render,\n// and should be reset before starting a new render.\n// This tracks which mutable sources need to be reset after a render.\n\nconst workInProgressSources = [];\nlet rendererSigil;\n\nif (__DEV__) {\n  // Used to detect multiple renderers using the same mutable source.\n  rendererSigil = {};\n}\n\nexport function markSourceAsDirty(mutableSource) {\n  workInProgressSources.push(mutableSource);\n}\nexport function resetWorkInProgressVersions() {\n  for (let i = 0; i < workInProgressSources.length; i++) {\n    const mutableSource = workInProgressSources[i];\n\n    if (isPrimaryRenderer) {\n      mutableSource._workInProgressVersionPrimary = null;\n    } else {\n      mutableSource._workInProgressVersionSecondary = null;\n    }\n  }\n\n  workInProgressSources.length = 0;\n}\nexport function getWorkInProgressVersion(mutableSource) {\n  if (isPrimaryRenderer) {\n    return mutableSource._workInProgressVersionPrimary;\n  } else {\n    return mutableSource._workInProgressVersionSecondary;\n  }\n}\nexport function setWorkInProgressVersion(mutableSource, version) {\n  if (isPrimaryRenderer) {\n    mutableSource._workInProgressVersionPrimary = version;\n  } else {\n    mutableSource._workInProgressVersionSecondary = version;\n  }\n\n  workInProgressSources.push(mutableSource);\n}\nexport function warnAboutMultipleRenderersDEV(mutableSource) {\n  if (__DEV__) {\n    if (isPrimaryRenderer) {\n      if (mutableSource._currentPrimaryRenderer == null) {\n        mutableSource._currentPrimaryRenderer = rendererSigil;\n      } else if (mutableSource._currentPrimaryRenderer !== rendererSigil) {\n        console.error('Detected multiple renderers concurrently rendering the ' + 'same mutable source. This is currently unsupported.');\n      }\n    } else {\n      if (mutableSource._currentSecondaryRenderer == null) {\n        mutableSource._currentSecondaryRenderer = rendererSigil;\n      } else if (mutableSource._currentSecondaryRenderer !== rendererSigil) {\n        console.error('Detected multiple renderers concurrently rendering the ' + 'same mutable source. This is currently unsupported.');\n      }\n    }\n  }\n} // Eager reads the version of a mutable source and stores it on the root.\n// This ensures that the version used for server rendering matches the one\n// that is eventually read during hydration.\n// If they don't match there's a potential tear and a full deopt render is required.\n\nexport function registerMutableSourceForHydration(root, mutableSource) {\n  const getVersion = mutableSource._getVersion;\n  const version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.\n  // Retaining it forever may interfere with GC.\n\n  if (root.mutableSourceEagerHydrationData == null) {\n    root.mutableSourceEagerHydrationData = [mutableSource, version];\n  } else {\n    root.mutableSourceEagerHydrationData.push(mutableSource, version);\n  }\n}","map":{"version":3,"names":["isPrimaryRenderer","workInProgressSources","rendererSigil","__DEV__","markSourceAsDirty","mutableSource","push","resetWorkInProgressVersions","i","length","_workInProgressVersionPrimary","_workInProgressVersionSecondary","getWorkInProgressVersion","setWorkInProgressVersion","version","warnAboutMultipleRenderersDEV","_currentPrimaryRenderer","console","error","_currentSecondaryRenderer","registerMutableSourceForHydration","root","getVersion","_getVersion","_source","mutableSourceEagerHydrationData"],"sources":["E:/debug-anything/react-test/src/react/packages/react-reconciler/src/ReactMutableSource.new.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {MutableSource, MutableSourceVersion} from 'shared/ReactTypes';\r\nimport type {FiberRoot} from './ReactInternalTypes';\r\n\r\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\r\n\r\n// Work in progress version numbers only apply to a single render,\r\n// and should be reset before starting a new render.\r\n// This tracks which mutable sources need to be reset after a render.\r\nconst workInProgressSources: Array<MutableSource<any>> = [];\r\n\r\nlet rendererSigil;\r\nif (__DEV__) {\r\n  // Used to detect multiple renderers using the same mutable source.\r\n  rendererSigil = {};\r\n}\r\n\r\nexport function markSourceAsDirty(mutableSource: MutableSource<any>): void {\r\n  workInProgressSources.push(mutableSource);\r\n}\r\n\r\nexport function resetWorkInProgressVersions(): void {\r\n  for (let i = 0; i < workInProgressSources.length; i++) {\r\n    const mutableSource = workInProgressSources[i];\r\n    if (isPrimaryRenderer) {\r\n      mutableSource._workInProgressVersionPrimary = null;\r\n    } else {\r\n      mutableSource._workInProgressVersionSecondary = null;\r\n    }\r\n  }\r\n  workInProgressSources.length = 0;\r\n}\r\n\r\nexport function getWorkInProgressVersion(\r\n  mutableSource: MutableSource<any>,\r\n): null | MutableSourceVersion {\r\n  if (isPrimaryRenderer) {\r\n    return mutableSource._workInProgressVersionPrimary;\r\n  } else {\r\n    return mutableSource._workInProgressVersionSecondary;\r\n  }\r\n}\r\n\r\nexport function setWorkInProgressVersion(\r\n  mutableSource: MutableSource<any>,\r\n  version: MutableSourceVersion,\r\n): void {\r\n  if (isPrimaryRenderer) {\r\n    mutableSource._workInProgressVersionPrimary = version;\r\n  } else {\r\n    mutableSource._workInProgressVersionSecondary = version;\r\n  }\r\n  workInProgressSources.push(mutableSource);\r\n}\r\n\r\nexport function warnAboutMultipleRenderersDEV(\r\n  mutableSource: MutableSource<any>,\r\n): void {\r\n  if (__DEV__) {\r\n    if (isPrimaryRenderer) {\r\n      if (mutableSource._currentPrimaryRenderer == null) {\r\n        mutableSource._currentPrimaryRenderer = rendererSigil;\r\n      } else if (mutableSource._currentPrimaryRenderer !== rendererSigil) {\r\n        console.error(\r\n          'Detected multiple renderers concurrently rendering the ' +\r\n            'same mutable source. This is currently unsupported.',\r\n        );\r\n      }\r\n    } else {\r\n      if (mutableSource._currentSecondaryRenderer == null) {\r\n        mutableSource._currentSecondaryRenderer = rendererSigil;\r\n      } else if (mutableSource._currentSecondaryRenderer !== rendererSigil) {\r\n        console.error(\r\n          'Detected multiple renderers concurrently rendering the ' +\r\n            'same mutable source. This is currently unsupported.',\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Eager reads the version of a mutable source and stores it on the root.\r\n// This ensures that the version used for server rendering matches the one\r\n// that is eventually read during hydration.\r\n// If they don't match there's a potential tear and a full deopt render is required.\r\nexport function registerMutableSourceForHydration(\r\n  root: FiberRoot,\r\n  mutableSource: MutableSource<any>,\r\n): void {\r\n  const getVersion = mutableSource._getVersion;\r\n  const version = getVersion(mutableSource._source);\r\n\r\n  // TODO Clear this data once all pending hydration work is finished.\r\n  // Retaining it forever may interfere with GC.\r\n  if (root.mutableSourceEagerHydrationData == null) {\r\n    root.mutableSourceEagerHydrationData = [mutableSource, version];\r\n  } else {\r\n    root.mutableSourceEagerHydrationData.push(mutableSource, version);\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA,SAAQA,iBAAR,QAAgC,wBAAhC,C,CAEA;AACA;AACA;;AACA,MAAMC,qBAAgD,GAAG,EAAzD;AAEA,IAAIC,aAAJ;;AACA,IAAIC,OAAJ,EAAa;EACX;EACAD,aAAa,GAAG,EAAhB;AACD;;AAED,OAAO,SAASE,iBAAT,CAA2BC,aAA3B,EAAoE;EACzEJ,qBAAqB,CAACK,IAAtB,CAA2BD,aAA3B;AACD;AAED,OAAO,SAASE,2BAAT,GAA6C;EAClD,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,qBAAqB,CAACQ,MAA1C,EAAkDD,CAAC,EAAnD,EAAuD;IACrD,MAAMH,aAAa,GAAGJ,qBAAqB,CAACO,CAAD,CAA3C;;IACA,IAAIR,iBAAJ,EAAuB;MACrBK,aAAa,CAACK,6BAAd,GAA8C,IAA9C;IACD,CAFD,MAEO;MACLL,aAAa,CAACM,+BAAd,GAAgD,IAAhD;IACD;EACF;;EACDV,qBAAqB,CAACQ,MAAtB,GAA+B,CAA/B;AACD;AAED,OAAO,SAASG,wBAAT,CACLP,aADK,EAEwB;EAC7B,IAAIL,iBAAJ,EAAuB;IACrB,OAAOK,aAAa,CAACK,6BAArB;EACD,CAFD,MAEO;IACL,OAAOL,aAAa,CAACM,+BAArB;EACD;AACF;AAED,OAAO,SAASE,wBAAT,CACLR,aADK,EAELS,OAFK,EAGC;EACN,IAAId,iBAAJ,EAAuB;IACrBK,aAAa,CAACK,6BAAd,GAA8CI,OAA9C;EACD,CAFD,MAEO;IACLT,aAAa,CAACM,+BAAd,GAAgDG,OAAhD;EACD;;EACDb,qBAAqB,CAACK,IAAtB,CAA2BD,aAA3B;AACD;AAED,OAAO,SAASU,6BAAT,CACLV,aADK,EAEC;EACN,IAAIF,OAAJ,EAAa;IACX,IAAIH,iBAAJ,EAAuB;MACrB,IAAIK,aAAa,CAACW,uBAAd,IAAyC,IAA7C,EAAmD;QACjDX,aAAa,CAACW,uBAAd,GAAwCd,aAAxC;MACD,CAFD,MAEO,IAAIG,aAAa,CAACW,uBAAd,KAA0Cd,aAA9C,EAA6D;QAClEe,OAAO,CAACC,KAAR,CACE,4DACE,qDAFJ;MAID;IACF,CATD,MASO;MACL,IAAIb,aAAa,CAACc,yBAAd,IAA2C,IAA/C,EAAqD;QACnDd,aAAa,CAACc,yBAAd,GAA0CjB,aAA1C;MACD,CAFD,MAEO,IAAIG,aAAa,CAACc,yBAAd,KAA4CjB,aAAhD,EAA+D;QACpEe,OAAO,CAACC,KAAR,CACE,4DACE,qDAFJ;MAID;IACF;EACF;AACF,C,CAED;AACA;AACA;AACA;;AACA,OAAO,SAASE,iCAAT,CACLC,IADK,EAELhB,aAFK,EAGC;EACN,MAAMiB,UAAU,GAAGjB,aAAa,CAACkB,WAAjC;EACA,MAAMT,OAAO,GAAGQ,UAAU,CAACjB,aAAa,CAACmB,OAAf,CAA1B,CAFM,CAIN;EACA;;EACA,IAAIH,IAAI,CAACI,+BAAL,IAAwC,IAA5C,EAAkD;IAChDJ,IAAI,CAACI,+BAAL,GAAuC,CAACpB,aAAD,EAAgBS,OAAhB,CAAvC;EACD,CAFD,MAEO;IACLO,IAAI,CAACI,+BAAL,CAAqCnB,IAArC,CAA0CD,aAA1C,EAAyDS,OAAzD;EACD;AACF"},"metadata":{},"sourceType":"module"}