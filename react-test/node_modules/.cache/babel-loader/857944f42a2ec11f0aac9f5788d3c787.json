{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\nimport ReactNoopUpdateQueue from './ReactNoopUpdateQueue';\nimport assign from 'shared/assign';\nconst emptyObject = {};\n\nif (__DEV__) {\n  Object.freeze(emptyObject);\n}\n/**\r\n * Base class helpers for the updating state of a component.\r\n */\n\n\nfunction Component(props, context, updater) {\n  console.log(props, context, updater, \"12321321\");\n  this.props = props;\n  this.context = context; // If a component has string refs, we will assign a different object later.\n\n  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the\n  // renderer.\n\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\n_c = Component;\nComponent.prototype.isReactComponent = {};\n/**\r\n * Sets a subset of the state. Always use this to mutate\r\n * state. You should treat `this.state` as immutable.\r\n *\r\n * There is no guarantee that `this.state` will be immediately updated, so\r\n * accessing `this.state` after calling this method may return the old value.\r\n *\r\n * There is no guarantee that calls to `setState` will run synchronously,\r\n * as they may eventually be batched together.  You can provide an optional\r\n * callback that will be executed when the call to setState is actually\r\n * completed.\r\n *\r\n * When a function is provided to setState, it will be called at some point in\r\n * the future (not synchronously). It will be called with the up to date\r\n * component arguments (state, props, context). These values can be different\r\n * from this.* because your function may be called after receiveProps but before\r\n * shouldComponentUpdate, and this new state, props, and context will not yet be\r\n * assigned to this.\r\n *\r\n * @param {object|function} partialState Next partial state or function to\r\n *        produce next partial state to be merged with current state.\r\n * @param {?function} callback Called after state is updated.\r\n * @final\r\n * @protected\r\n */\n\nComponent.prototype.setState = function (partialState, callback) {\n  if (typeof partialState !== 'object' && typeof partialState !== 'function' && partialState != null) {\n    throw new Error('setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.');\n  }\n\n  this.updater.enqueueSetState(this, partialState, callback, 'setState');\n};\n/**\r\n * Forces an update. This should only be invoked when it is known with\r\n * certainty that we are **not** in a DOM transaction.\r\n *\r\n * You may want to call this when you know that some deeper aspect of the\r\n * component's state has changed but `setState` was not called.\r\n *\r\n * This will not invoke `shouldComponentUpdate`, but it will invoke\r\n * `componentWillUpdate` and `componentDidUpdate`.\r\n *\r\n * @param {?function} callback Called after update is complete.\r\n * @final\r\n * @protected\r\n */\n\n\nComponent.prototype.forceUpdate = function (callback) {\n  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');\n};\n/**\r\n * Deprecated APIs. These APIs used to exist on classic React classes but since\r\n * we would like to deprecate them, we're not going to move them over to this\r\n * modern base class. Instead, we define a getter that warns if it's accessed.\r\n */\n\n\nif (__DEV__) {\n  const deprecatedAPIs = {\n    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']\n  };\n\n  const defineDeprecationWarning = function (methodName, info) {\n    Object.defineProperty(Component.prototype, methodName, {\n      get: function () {\n        console.warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);\n        return undefined;\n      }\n    });\n  };\n\n  for (const fnName in deprecatedAPIs) {\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n    }\n  }\n}\n\nfunction ComponentDummy() {}\n\n_c2 = ComponentDummy;\nComponentDummy.prototype = Component.prototype;\n/**\r\n * Convenience component with default shallow equality check for sCU.\r\n */\n\nfunction PureComponent(props, context, updater) {\n  this.props = props;\n  this.context = context; // If a component has string refs, we will assign a different object later.\n\n  this.refs = emptyObject;\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\n_c3 = PureComponent;\nconst pureComponentPrototype = PureComponent.prototype = new ComponentDummy();\npureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.\n\nassign(pureComponentPrototype, Component.prototype);\npureComponentPrototype.isPureReactComponent = true;\nexport { Component, PureComponent };\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Component\");\n$RefreshReg$(_c2, \"ComponentDummy\");\n$RefreshReg$(_c3, \"PureComponent\");","map":{"version":3,"names":["ReactNoopUpdateQueue","assign","emptyObject","__DEV__","Object","freeze","Component","props","context","updater","console","log","refs","prototype","isReactComponent","setState","partialState","callback","Error","enqueueSetState","forceUpdate","enqueueForceUpdate","deprecatedAPIs","isMounted","replaceState","defineDeprecationWarning","methodName","info","defineProperty","get","warn","undefined","fnName","hasOwnProperty","ComponentDummy","PureComponent","pureComponentPrototype","constructor","isPureReactComponent"],"sources":["D:/project/font-end/debug-anything/react-test/src/react/packages/react/src/ReactBaseClasses.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport ReactNoopUpdateQueue from './ReactNoopUpdateQueue';\r\nimport assign from 'shared/assign';\r\n\r\nconst emptyObject = {};\r\nif (__DEV__) {\r\n  Object.freeze(emptyObject);\r\n}\r\n\r\n/**\r\n * Base class helpers for the updating state of a component.\r\n */\r\nfunction Component(props, context, updater) {\r\n  console.log(props, context, updater,\"12321321\")\r\n  this.props = props;\r\n  this.context = context;\r\n  // If a component has string refs, we will assign a different object later.\r\n  this.refs = emptyObject;\r\n  // We initialize the default updater but the real one gets injected by the\r\n  // renderer.\r\n  this.updater = updater || ReactNoopUpdateQueue;\r\n}\r\n\r\nComponent.prototype.isReactComponent = {};\r\n\r\n/**\r\n * Sets a subset of the state. Always use this to mutate\r\n * state. You should treat `this.state` as immutable.\r\n *\r\n * There is no guarantee that `this.state` will be immediately updated, so\r\n * accessing `this.state` after calling this method may return the old value.\r\n *\r\n * There is no guarantee that calls to `setState` will run synchronously,\r\n * as they may eventually be batched together.  You can provide an optional\r\n * callback that will be executed when the call to setState is actually\r\n * completed.\r\n *\r\n * When a function is provided to setState, it will be called at some point in\r\n * the future (not synchronously). It will be called with the up to date\r\n * component arguments (state, props, context). These values can be different\r\n * from this.* because your function may be called after receiveProps but before\r\n * shouldComponentUpdate, and this new state, props, and context will not yet be\r\n * assigned to this.\r\n *\r\n * @param {object|function} partialState Next partial state or function to\r\n *        produce next partial state to be merged with current state.\r\n * @param {?function} callback Called after state is updated.\r\n * @final\r\n * @protected\r\n */\r\nComponent.prototype.setState = function(partialState, callback) {\r\n  if (\r\n    typeof partialState !== 'object' &&\r\n    typeof partialState !== 'function' &&\r\n    partialState != null\r\n  ) {\r\n    throw new Error(\r\n      'setState(...): takes an object of state variables to update or a ' +\r\n        'function which returns an object of state variables.',\r\n    );\r\n  }\r\n\r\n  this.updater.enqueueSetState(this, partialState, callback, 'setState');\r\n};\r\n\r\n/**\r\n * Forces an update. This should only be invoked when it is known with\r\n * certainty that we are **not** in a DOM transaction.\r\n *\r\n * You may want to call this when you know that some deeper aspect of the\r\n * component's state has changed but `setState` was not called.\r\n *\r\n * This will not invoke `shouldComponentUpdate`, but it will invoke\r\n * `componentWillUpdate` and `componentDidUpdate`.\r\n *\r\n * @param {?function} callback Called after update is complete.\r\n * @final\r\n * @protected\r\n */\r\nComponent.prototype.forceUpdate = function(callback) {\r\n  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');\r\n};\r\n\r\n/**\r\n * Deprecated APIs. These APIs used to exist on classic React classes but since\r\n * we would like to deprecate them, we're not going to move them over to this\r\n * modern base class. Instead, we define a getter that warns if it's accessed.\r\n */\r\nif (__DEV__) {\r\n  const deprecatedAPIs = {\r\n    isMounted: [\r\n      'isMounted',\r\n      'Instead, make sure to clean up subscriptions and pending requests in ' +\r\n        'componentWillUnmount to prevent memory leaks.',\r\n    ],\r\n    replaceState: [\r\n      'replaceState',\r\n      'Refactor your code to use setState instead (see ' +\r\n        'https://github.com/facebook/react/issues/3236).',\r\n    ],\r\n  };\r\n  const defineDeprecationWarning = function(methodName, info) {\r\n    Object.defineProperty(Component.prototype, methodName, {\r\n      get: function() {\r\n        console.warn(\r\n          '%s(...) is deprecated in plain JavaScript React classes. %s',\r\n          info[0],\r\n          info[1],\r\n        );\r\n        return undefined;\r\n      },\r\n    });\r\n  };\r\n  for (const fnName in deprecatedAPIs) {\r\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\r\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\r\n    }\r\n  }\r\n}\r\n\r\nfunction ComponentDummy() {}\r\nComponentDummy.prototype = Component.prototype;\r\n\r\n/**\r\n * Convenience component with default shallow equality check for sCU.\r\n */\r\nfunction PureComponent(props, context, updater) {\r\n  this.props = props;\r\n  this.context = context;\r\n  // If a component has string refs, we will assign a different object later.\r\n  this.refs = emptyObject;\r\n  this.updater = updater || ReactNoopUpdateQueue;\r\n}\r\n\r\nconst pureComponentPrototype = (PureComponent.prototype = new ComponentDummy());\r\npureComponentPrototype.constructor = PureComponent;\r\n// Avoid an extra prototype jump for these methods.\r\nassign(pureComponentPrototype, Component.prototype);\r\npureComponentPrototype.isPureReactComponent = true;\r\n\r\nexport {Component, PureComponent};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}