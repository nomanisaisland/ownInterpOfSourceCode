{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport { getStackByFiberInDevAndProd } from './ReactFiberComponentStack';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\nexport let current = null;\nexport let isRendering = false;\nexport function getCurrentFiberOwnerNameInDevOrNull() {\n  if (__DEV__) {\n    if (current === null) {\n      return null;\n    }\n\n    const owner = current._debugOwner;\n\n    if (owner !== null && typeof owner !== 'undefined') {\n      return getComponentNameFromFiber(owner);\n    }\n  }\n\n  return null;\n}\n\nfunction getCurrentFiberStackInDev() {\n  if (__DEV__) {\n    if (current === null) {\n      return '';\n    } // Safe because if current fiber exists, we are reconciling,\n    // and it is guaranteed to be the work-in-progress version.\n\n\n    return getStackByFiberInDevAndProd(current);\n  }\n\n  return '';\n}\n\nexport function resetCurrentFiber() {\n  if (__DEV__) {\n    ReactDebugCurrentFrame.getCurrentStack = null;\n    current = null;\n    isRendering = false;\n  }\n}\nexport function setCurrentFiber(fiber) {\n  if (__DEV__) {\n    ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;\n    current = fiber;\n    isRendering = false;\n  }\n}\nexport function getCurrentFiber() {\n  if (__DEV__) {\n    return current;\n  }\n\n  return null;\n}\nexport function setIsRendering(rendering) {\n  if (__DEV__) {\n    isRendering = rendering;\n  }\n}\nexport function getIsRendering() {\n  if (__DEV__) {\n    return isRendering;\n  }\n}","map":{"version":3,"names":["ReactSharedInternals","getStackByFiberInDevAndProd","getComponentNameFromFiber","ReactDebugCurrentFrame","current","isRendering","getCurrentFiberOwnerNameInDevOrNull","__DEV__","owner","_debugOwner","getCurrentFiberStackInDev","resetCurrentFiber","getCurrentStack","setCurrentFiber","fiber","getCurrentFiber","setIsRendering","rendering","getIsRendering"],"sources":["E:/react-test/src/react/packages/react-reconciler/src/ReactCurrentFiber.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {Fiber} from './ReactInternalTypes';\r\n\r\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\r\nimport {getStackByFiberInDevAndProd} from './ReactFiberComponentStack';\r\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\r\n\r\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\r\n\r\nexport let current: Fiber | null = null;\r\nexport let isRendering: boolean = false;\r\n\r\nexport function getCurrentFiberOwnerNameInDevOrNull(): string | null {\r\n  if (__DEV__) {\r\n    if (current === null) {\r\n      return null;\r\n    }\r\n    const owner = current._debugOwner;\r\n    if (owner !== null && typeof owner !== 'undefined') {\r\n      return getComponentNameFromFiber(owner);\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction getCurrentFiberStackInDev(): string {\r\n  if (__DEV__) {\r\n    if (current === null) {\r\n      return '';\r\n    }\r\n    // Safe because if current fiber exists, we are reconciling,\r\n    // and it is guaranteed to be the work-in-progress version.\r\n    return getStackByFiberInDevAndProd(current);\r\n  }\r\n  return '';\r\n}\r\n\r\nexport function resetCurrentFiber() {\r\n  if (__DEV__) {\r\n    ReactDebugCurrentFrame.getCurrentStack = null;\r\n    current = null;\r\n    isRendering = false;\r\n  }\r\n}\r\n\r\nexport function setCurrentFiber(fiber: Fiber | null) {\r\n  if (__DEV__) {\r\n    ReactDebugCurrentFrame.getCurrentStack =\r\n      fiber === null ? null : getCurrentFiberStackInDev;\r\n    current = fiber;\r\n    isRendering = false;\r\n  }\r\n}\r\n\r\nexport function getCurrentFiber(): Fiber | null {\r\n  if (__DEV__) {\r\n    return current;\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function setIsRendering(rendering: boolean) {\r\n  if (__DEV__) {\r\n    isRendering = rendering;\r\n  }\r\n}\r\n\r\nexport function getIsRendering() {\r\n  if (__DEV__) {\r\n    return isRendering;\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA,OAAOA,oBAAP,MAAiC,6BAAjC;AACA,SAAQC,2BAAR,QAA0C,4BAA1C;AACA,OAAOC,yBAAP,MAAsC,gDAAtC;AAEA,MAAMC,sBAAsB,GAAGH,oBAAoB,CAACG,sBAApD;AAEA,OAAO,IAAIC,OAAqB,GAAG,IAA5B;AACP,OAAO,IAAIC,WAAoB,GAAG,KAA3B;AAEP,OAAO,SAASC,mCAAT,GAA8D;EACnE,IAAIC,OAAJ,EAAa;IACX,IAAIH,OAAO,KAAK,IAAhB,EAAsB;MACpB,OAAO,IAAP;IACD;;IACD,MAAMI,KAAK,GAAGJ,OAAO,CAACK,WAAtB;;IACA,IAAID,KAAK,KAAK,IAAV,IAAkB,OAAOA,KAAP,KAAiB,WAAvC,EAAoD;MAClD,OAAON,yBAAyB,CAACM,KAAD,CAAhC;IACD;EACF;;EACD,OAAO,IAAP;AACD;;AAED,SAASE,yBAAT,GAA6C;EAC3C,IAAIH,OAAJ,EAAa;IACX,IAAIH,OAAO,KAAK,IAAhB,EAAsB;MACpB,OAAO,EAAP;IACD,CAHU,CAIX;IACA;;;IACA,OAAOH,2BAA2B,CAACG,OAAD,CAAlC;EACD;;EACD,OAAO,EAAP;AACD;;AAED,OAAO,SAASO,iBAAT,GAA6B;EAClC,IAAIJ,OAAJ,EAAa;IACXJ,sBAAsB,CAACS,eAAvB,GAAyC,IAAzC;IACAR,OAAO,GAAG,IAAV;IACAC,WAAW,GAAG,KAAd;EACD;AACF;AAED,OAAO,SAASQ,eAAT,CAAyBC,KAAzB,EAA8C;EACnD,IAAIP,OAAJ,EAAa;IACXJ,sBAAsB,CAACS,eAAvB,GACEE,KAAK,KAAK,IAAV,GAAiB,IAAjB,GAAwBJ,yBAD1B;IAEAN,OAAO,GAAGU,KAAV;IACAT,WAAW,GAAG,KAAd;EACD;AACF;AAED,OAAO,SAASU,eAAT,GAAyC;EAC9C,IAAIR,OAAJ,EAAa;IACX,OAAOH,OAAP;EACD;;EACD,OAAO,IAAP;AACD;AAED,OAAO,SAASY,cAAT,CAAwBC,SAAxB,EAA4C;EACjD,IAAIV,OAAJ,EAAa;IACXF,WAAW,GAAGY,SAAd;EACD;AACF;AAED,OAAO,SAASC,cAAT,GAA0B;EAC/B,IAAIX,OAAJ,EAAa;IACX,OAAOF,WAAP;EACD;AACF"},"metadata":{},"sourceType":"module"}