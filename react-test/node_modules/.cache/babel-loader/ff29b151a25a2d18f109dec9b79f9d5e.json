{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\nimport { enableCreateEventHandleAPI } from 'shared/ReactFeatureFlags';\nexport const allNativeEvents = new Set();\n\nif (enableCreateEventHandleAPI) {\n  allNativeEvents.add('beforeblur');\n  allNativeEvents.add('afterblur');\n}\n/**\r\n * Mapping from registration name to event name\r\n */\n\n\nexport const registrationNameDependencies = {};\n/**\r\n * Mapping from lowercase registration names to the properly cased version,\r\n * used to warn in the case of missing event handlers. Available\r\n * only in __DEV__.\r\n * @type {Object}\r\n */\n\nexport const possibleRegistrationNames = __DEV__ ? {} : null; // Trust the developer to only use possibleRegistrationNames in __DEV__\n\nexport function registerTwoPhaseEvent(registrationName, dependencies) {\n  registerDirectEvent(registrationName, dependencies);\n  registerDirectEvent(registrationName + 'Capture', dependencies);\n}\nexport function registerDirectEvent(registrationName, dependencies) {\n  if (__DEV__) {\n    if (registrationNameDependencies[registrationName]) {\n      console.error('EventRegistry: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName);\n    }\n  }\n\n  registrationNameDependencies[registrationName] = dependencies;\n\n  if (__DEV__) {\n    const lowerCasedName = registrationName.toLowerCase();\n    possibleRegistrationNames[lowerCasedName] = registrationName;\n\n    if (registrationName === 'onDoubleClick') {\n      possibleRegistrationNames.ondblclick = registrationName;\n    }\n  }\n\n  for (let i = 0; i < dependencies.length; i++) {\n    console.log(dependencies, \"dependencies\");\n    allNativeEvents.add(dependencies[i]);\n  }\n}","map":{"version":3,"names":["enableCreateEventHandleAPI","allNativeEvents","Set","add","registrationNameDependencies","possibleRegistrationNames","__DEV__","registerTwoPhaseEvent","registrationName","dependencies","registerDirectEvent","console","error","lowerCasedName","toLowerCase","ondblclick","i","length","log"],"sources":["D:/project/font-end/debug-anything/react-test/src/react/packages/react-dom/src/events/EventRegistry.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {DOMEventName} from './DOMEventNames';\r\n\r\nimport {enableCreateEventHandleAPI} from 'shared/ReactFeatureFlags';\r\n\r\nexport const allNativeEvents: Set<DOMEventName> = new Set();\r\n\r\nif (enableCreateEventHandleAPI) {\r\n  allNativeEvents.add('beforeblur');\r\n  allNativeEvents.add('afterblur');\r\n}\r\n\r\n/**\r\n * Mapping from registration name to event name\r\n */\r\nexport const registrationNameDependencies = {};\r\n\r\n/**\r\n * Mapping from lowercase registration names to the properly cased version,\r\n * used to warn in the case of missing event handlers. Available\r\n * only in __DEV__.\r\n * @type {Object}\r\n */\r\nexport const possibleRegistrationNames = __DEV__ ? {} : (null: any);\r\n// Trust the developer to only use possibleRegistrationNames in __DEV__\r\n\r\nexport function registerTwoPhaseEvent(\r\n  registrationName: string,\r\n  dependencies: Array<DOMEventName>,\r\n): void {\r\n  registerDirectEvent(registrationName, dependencies);\r\n  registerDirectEvent(registrationName + 'Capture', dependencies);\r\n}\r\n\r\nexport function registerDirectEvent(\r\n  registrationName: string,\r\n  dependencies: Array<DOMEventName>,\r\n) {\r\n  if (__DEV__) {\r\n    if (registrationNameDependencies[registrationName]) {\r\n      console.error(\r\n        'EventRegistry: More than one plugin attempted to publish the same ' +\r\n          'registration name, `%s`.',\r\n        registrationName,\r\n      );\r\n    }\r\n  }\r\n\r\n  registrationNameDependencies[registrationName] = dependencies;\r\n\r\n  if (__DEV__) {\r\n    const lowerCasedName = registrationName.toLowerCase();\r\n    possibleRegistrationNames[lowerCasedName] = registrationName;\r\n\r\n    if (registrationName === 'onDoubleClick') {\r\n      possibleRegistrationNames.ondblclick = registrationName;\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < dependencies.length; i++) {\r\n    console.log(dependencies,\"dependencies\")\r\n    allNativeEvents.add(dependencies[i]);\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA,SAAQA,0BAAR,QAAyC,0BAAzC;AAEA,OAAO,MAAMC,eAAkC,GAAG,IAAIC,GAAJ,EAA3C;;AAEP,IAAIF,0BAAJ,EAAgC;EAC9BC,eAAe,CAACE,GAAhB,CAAoB,YAApB;EACAF,eAAe,CAACE,GAAhB,CAAoB,WAApB;AACD;AAED;AACA;AACA;;;AACA,OAAO,MAAMC,4BAA4B,GAAG,EAArC;AAEP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,yBAAyB,GAAGC,OAAO,GAAG,EAAH,GAAS,IAAlD,C,CACP;;AAEA,OAAO,SAASC,qBAAT,CACLC,gBADK,EAELC,YAFK,EAGC;EACNC,mBAAmB,CAACF,gBAAD,EAAmBC,YAAnB,CAAnB;EACAC,mBAAmB,CAACF,gBAAgB,GAAG,SAApB,EAA+BC,YAA/B,CAAnB;AACD;AAED,OAAO,SAASC,mBAAT,CACLF,gBADK,EAELC,YAFK,EAGL;EACA,IAAIH,OAAJ,EAAa;IACX,IAAIF,4BAA4B,CAACI,gBAAD,CAAhC,EAAoD;MAClDG,OAAO,CAACC,KAAR,CACE,uEACE,0BAFJ,EAGEJ,gBAHF;IAKD;EACF;;EAEDJ,4BAA4B,CAACI,gBAAD,CAA5B,GAAiDC,YAAjD;;EAEA,IAAIH,OAAJ,EAAa;IACX,MAAMO,cAAc,GAAGL,gBAAgB,CAACM,WAAjB,EAAvB;IACAT,yBAAyB,CAACQ,cAAD,CAAzB,GAA4CL,gBAA5C;;IAEA,IAAIA,gBAAgB,KAAK,eAAzB,EAA0C;MACxCH,yBAAyB,CAACU,UAA1B,GAAuCP,gBAAvC;IACD;EACF;;EAED,KAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,YAAY,CAACQ,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;IAC5CL,OAAO,CAACO,GAAR,CAAYT,YAAZ,EAAyB,cAAzB;IACAR,eAAe,CAACE,GAAhB,CAAoBM,YAAY,CAACO,CAAD,CAAhC;EACD;AACF"},"metadata":{},"sourceType":"module"}