{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\n\n/*\r\n * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\r\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\r\n *\r\n * The functions in this module will throw an easier-to-understand,\r\n * easier-to-debug exception with a clear errors message message explaining the\r\n * problem. (Instead of a confusing exception thrown inside the implementation\r\n * of the `value` object).\r\n */\n// $FlowFixMe only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  if (__DEV__) {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    const hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    const type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';\n    return type;\n  }\n} // $FlowFixMe only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  if (__DEV__) {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\n\nexport function checkAttributeStringCoercion(value, attributeName) {\n  if (__DEV__) {\n    if (willCoercionThrow(value)) {\n      console.error('The provided `%s` attribute is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', attributeName, typeName(value));\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\nexport function checkKeyStringCoercion(value) {\n  if (__DEV__) {\n    if (willCoercionThrow(value)) {\n      console.error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\nexport function checkPropStringCoercion(value, propName) {\n  if (__DEV__) {\n    if (willCoercionThrow(value)) {\n      console.error('The provided `%s` prop is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', propName, typeName(value));\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\nexport function checkCSSPropertyStringCoercion(value, propName) {\n  if (__DEV__) {\n    if (willCoercionThrow(value)) {\n      console.error('The provided `%s` CSS property is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', propName, typeName(value));\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\nexport function checkHtmlStringCoercion(value) {\n  if (__DEV__) {\n    if (willCoercionThrow(value)) {\n      console.error('The provided HTML markup uses a value of unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\nexport function checkFormFieldValueStringCoercion(value) {\n  if (__DEV__) {\n    if (willCoercionThrow(value)) {\n      console.error('Form field values (value, checked, defaultValue, or defaultChecked props)' + ' must be strings, not %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}","map":{"version":3,"names":["typeName","value","__DEV__","hasToStringTag","Symbol","toStringTag","type","constructor","name","willCoercionThrow","testStringCoercion","e","checkAttributeStringCoercion","attributeName","console","error","checkKeyStringCoercion","checkPropStringCoercion","propName","checkCSSPropertyStringCoercion","checkHtmlStringCoercion","checkFormFieldValueStringCoercion"],"sources":["D:/project/font-end/debug-anything/react-test/src/react/packages/shared/CheckStringCoercion.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\n/*\r\n * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\r\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\r\n *\r\n * The functions in this module will throw an easier-to-understand,\r\n * easier-to-debug exception with a clear errors message message explaining the\r\n * problem. (Instead of a confusing exception thrown inside the implementation\r\n * of the `value` object).\r\n */\r\n\r\n// $FlowFixMe only called in DEV, so void return is not possible.\r\nfunction typeName(value: mixed): string {\r\n  if (__DEV__) {\r\n    // toStringTag is needed for namespaced types like Temporal.Instant\r\n    const hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\r\n    const type =\r\n      (hasToStringTag && (value: any)[Symbol.toStringTag]) ||\r\n      (value: any).constructor.name ||\r\n      'Object';\r\n    return type;\r\n  }\r\n}\r\n\r\n// $FlowFixMe only called in DEV, so void return is not possible.\r\nfunction willCoercionThrow(value: mixed): boolean {\r\n  if (__DEV__) {\r\n    try {\r\n      testStringCoercion(value);\r\n      return false;\r\n    } catch (e) {\r\n      return true;\r\n    }\r\n  }\r\n}\r\n\r\nfunction testStringCoercion(value: mixed) {\r\n  // If you ended up here by following an exception call stack, here's what's\r\n  // happened: you supplied an object or symbol value to React (as a prop, key,\r\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\r\n  // coerce it to a string using `'' + value`, an exception was thrown.\r\n  //\r\n  // The most common types that will cause this exception are `Symbol` instances\r\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\r\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\r\n  // exception. (Library authors do this to prevent users from using built-in\r\n  // numeric operators like `+` or comparison operators like `>=` because custom\r\n  // methods are needed to perform accurate arithmetic or comparison.)\r\n  //\r\n  // To fix the problem, coerce this object or symbol value to a string before\r\n  // passing it to React. The most reliable way is usually `String(value)`.\r\n  //\r\n  // To find which value is throwing, check the browser or debugger console.\r\n  // Before this exception was thrown, there should be `console.error` output\r\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\r\n  // problem and how that type was used: key, atrribute, input value prop, etc.\r\n  // In most cases, this console output also shows the component and its\r\n  // ancestor components where the exception happened.\r\n  //\r\n  // eslint-disable-next-line react-internal/safe-string-coercion\r\n  return '' + (value: any);\r\n}\r\n\r\nexport function checkAttributeStringCoercion(\r\n  value: mixed,\r\n  attributeName: string,\r\n) {\r\n  if (__DEV__) {\r\n    if (willCoercionThrow(value)) {\r\n      console.error(\r\n        'The provided `%s` attribute is an unsupported type %s.' +\r\n          ' This value must be coerced to a string before before using it here.',\r\n        attributeName,\r\n        typeName(value),\r\n      );\r\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\r\n    }\r\n  }\r\n}\r\n\r\nexport function checkKeyStringCoercion(value: mixed) {\r\n  if (__DEV__) {\r\n    if (willCoercionThrow(value)) {\r\n      console.error(\r\n        'The provided key is an unsupported type %s.' +\r\n          ' This value must be coerced to a string before before using it here.',\r\n        typeName(value),\r\n      );\r\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\r\n    }\r\n  }\r\n}\r\n\r\nexport function checkPropStringCoercion(value: mixed, propName: string) {\r\n  if (__DEV__) {\r\n    if (willCoercionThrow(value)) {\r\n      console.error(\r\n        'The provided `%s` prop is an unsupported type %s.' +\r\n          ' This value must be coerced to a string before before using it here.',\r\n        propName,\r\n        typeName(value),\r\n      );\r\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\r\n    }\r\n  }\r\n}\r\n\r\nexport function checkCSSPropertyStringCoercion(value: mixed, propName: string) {\r\n  if (__DEV__) {\r\n    if (willCoercionThrow(value)) {\r\n      console.error(\r\n        'The provided `%s` CSS property is an unsupported type %s.' +\r\n          ' This value must be coerced to a string before before using it here.',\r\n        propName,\r\n        typeName(value),\r\n      );\r\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\r\n    }\r\n  }\r\n}\r\n\r\nexport function checkHtmlStringCoercion(value: mixed) {\r\n  if (__DEV__) {\r\n    if (willCoercionThrow(value)) {\r\n      console.error(\r\n        'The provided HTML markup uses a value of unsupported type %s.' +\r\n          ' This value must be coerced to a string before before using it here.',\r\n        typeName(value),\r\n      );\r\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\r\n    }\r\n  }\r\n}\r\n\r\nexport function checkFormFieldValueStringCoercion(value: mixed) {\r\n  if (__DEV__) {\r\n    if (willCoercionThrow(value)) {\r\n      console.error(\r\n        'Form field values (value, checked, defaultValue, or defaultChecked props)' +\r\n          ' must be strings, not %s.' +\r\n          ' This value must be coerced to a string before before using it here.',\r\n        typeName(value),\r\n      );\r\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}