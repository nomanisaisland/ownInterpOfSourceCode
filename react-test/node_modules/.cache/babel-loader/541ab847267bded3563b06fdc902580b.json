{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\nexport function push(heap, node) {\n  const index = heap.length;\n  heap.push(node);\n  siftUp(heap, node, index);\n}\nexport function peek(heap) {\n  return heap.length === 0 ? null : heap[0];\n}\nexport function pop(heap) {\n  if (heap.length === 0) {\n    return null;\n  }\n\n  const first = heap[0];\n  const last = heap.pop();\n\n  if (last !== first) {\n    heap[0] = last;\n    siftDown(heap, last, 0);\n  }\n\n  return first;\n}\n\nfunction siftUp(heap, node, i) {\n  let index = i;\n\n  while (index > 0) {\n    const parentIndex = index - 1 >>> 1;\n    const parent = heap[parentIndex];\n\n    if (compare(parent, node) > 0) {\n      // The parent is larger. Swap positions.\n      heap[parentIndex] = node;\n      heap[index] = parent;\n      index = parentIndex;\n    } else {\n      // The parent is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction siftDown(heap, node, i) {\n  let index = i;\n  const length = heap.length;\n  const halfLength = length >>> 1;\n\n  while (index < halfLength) {\n    const leftIndex = (index + 1) * 2 - 1;\n    const left = heap[leftIndex];\n    const rightIndex = leftIndex + 1;\n    const right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\n\n    if (compare(left, node) < 0) {\n      if (rightIndex < length && compare(right, left) < 0) {\n        heap[index] = right;\n        heap[rightIndex] = node;\n        index = rightIndex;\n      } else {\n        heap[index] = left;\n        heap[leftIndex] = node;\n        index = leftIndex;\n      }\n    } else if (rightIndex < length && compare(right, node) < 0) {\n      heap[index] = right;\n      heap[rightIndex] = node;\n      index = rightIndex;\n    } else {\n      // Neither child is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction compare(a, b) {\n  // Compare sort index first, then task id.\n  const diff = a.sortIndex - b.sortIndex;\n  return diff !== 0 ? diff : a.id - b.id;\n}","map":{"version":3,"names":["push","heap","node","index","length","siftUp","peek","pop","first","last","siftDown","i","parentIndex","parent","compare","halfLength","leftIndex","left","rightIndex","right","a","b","diff","sortIndex","id"],"sources":["D:/project/font-end/debug-anything/react-test/src/react/packages/scheduler/src/SchedulerMinHeap.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow strict\r\n */\r\n\r\ntype Heap = Array<Node>;\r\ntype Node = {|\r\n  id: number,\r\n  sortIndex: number,\r\n|};\r\n\r\nexport function push(heap: Heap, node: Node): void {\r\n  const index = heap.length;\r\n  heap.push(node);\r\n  siftUp(heap, node, index);\r\n}\r\n\r\nexport function peek(heap: Heap): Node | null {\r\n  return heap.length === 0 ? null : heap[0];\r\n}\r\n\r\nexport function pop(heap: Heap): Node | null {\r\n  if (heap.length === 0) {\r\n    return null;\r\n  }\r\n  const first = heap[0];\r\n  const last = heap.pop();\r\n  if (last !== first) {\r\n    heap[0] = last;\r\n    siftDown(heap, last, 0);\r\n  }\r\n  return first;\r\n}\r\n\r\nfunction siftUp(heap, node, i) {\r\n  let index = i;\r\n  while (index > 0) {\r\n    const parentIndex = (index - 1) >>> 1;\r\n    const parent = heap[parentIndex];\r\n    if (compare(parent, node) > 0) {\r\n      // The parent is larger. Swap positions.\r\n      heap[parentIndex] = node;\r\n      heap[index] = parent;\r\n      index = parentIndex;\r\n    } else {\r\n      // The parent is smaller. Exit.\r\n      return;\r\n    }\r\n  }\r\n}\r\n\r\nfunction siftDown(heap, node, i) {\r\n  let index = i;\r\n  const length = heap.length;\r\n  const halfLength = length >>> 1;\r\n  while (index < halfLength) {\r\n    const leftIndex = (index + 1) * 2 - 1;\r\n    const left = heap[leftIndex];\r\n    const rightIndex = leftIndex + 1;\r\n    const right = heap[rightIndex];\r\n\r\n    // If the left or right node is smaller, swap with the smaller of those.\r\n    if (compare(left, node) < 0) {\r\n      if (rightIndex < length && compare(right, left) < 0) {\r\n        heap[index] = right;\r\n        heap[rightIndex] = node;\r\n        index = rightIndex;\r\n      } else {\r\n        heap[index] = left;\r\n        heap[leftIndex] = node;\r\n        index = leftIndex;\r\n      }\r\n    } else if (rightIndex < length && compare(right, node) < 0) {\r\n      heap[index] = right;\r\n      heap[rightIndex] = node;\r\n      index = rightIndex;\r\n    } else {\r\n      // Neither child is smaller. Exit.\r\n      return;\r\n    }\r\n  }\r\n}\r\n\r\nfunction compare(a, b) {\r\n  // Compare sort index first, then task id.\r\n  const diff = a.sortIndex - b.sortIndex;\r\n  return diff !== 0 ? diff : a.id - b.id;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}