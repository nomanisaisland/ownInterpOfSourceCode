{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport hasOwnProperty from 'shared/hasOwnProperty';\nimport { REACT_ELEMENT_TYPE } from 'shared/ReactSymbols';\nimport { checkKeyStringCoercion } from 'shared/CheckStringCoercion';\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nconst RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nlet specialPropKeyWarningShown;\nlet specialPropRefWarningShown;\nlet didWarnAboutStringRefs;\n\nif (__DEV__) {\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  if (__DEV__) {\n    if (hasOwnProperty.call(config, 'ref')) {\n      const getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  if (__DEV__) {\n    if (hasOwnProperty.call(config, 'key')) {\n      const getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  if (__DEV__) {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\n      const componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        console.error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  if (__DEV__) {\n    const warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n        console.error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  if (__DEV__) {\n    const warnAboutAccessingRef = function () {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n        console.error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingRef.isReactWarning = true;\n    Object.defineProperty(props, 'ref', {\n      get: warnAboutAccessingRef,\n      configurable: true\n    });\n  }\n}\n/**\r\n * Factory method to create a new React element. This no longer adheres to\r\n * the class pattern, so do not use new to call it. Also, instanceof check\r\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\r\n * if something is a React Element.\r\n *\r\n * @param {*} type\r\n * @param {*} props\r\n * @param {*} key\r\n * @param {string|object} ref\r\n * @param {*} owner\r\n * @param {*} self A *temporary* helper to detect places where `this` is\r\n * different from the `owner` when React.createElement is called, so that we\r\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\r\n * functions, and as long as `this` and owner are the same, there will be no\r\n * change in behavior.\r\n * @param {*} source An annotation object (added by a transpiler or otherwise)\r\n * indicating filename, line number, and/or other information.\r\n * @internal\r\n */\n\n\nconst ReactElement = function (type, key, ref, self, source, owner, props) {\n  const element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  if (__DEV__) {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n/**\r\n * https://github.com/reactjs/rfcs/pull/107\r\n * @param {*} type\r\n * @param {object} props\r\n * @param {string} key\r\n */\n\n\n_c = ReactElement;\nexport function jsx(type, config, maybeKey) {\n  let propName; // Reserved names are extracted\n\n  const props = {};\n  let key = null;\n  let ref = null; // Currently, key can be spread in as a prop. This causes a potential\n  // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n  // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n  // but as an intermediary step, we will use jsxDEV for everything except\n  // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n  // key is explicitly declared to be undefined or not.\n\n  if (maybeKey !== undefined) {\n    if (__DEV__) {\n      checkKeyStringCoercion(maybeKey);\n    }\n\n    key = '' + maybeKey;\n  }\n\n  if (hasValidKey(config)) {\n    if (__DEV__) {\n      checkKeyStringCoercion(config.key);\n    }\n\n    key = '' + config.key;\n  }\n\n  if (hasValidRef(config)) {\n    ref = config.ref;\n  } // Remaining properties are added to a new props object\n\n\n  for (propName in config) {\n    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n      props[propName] = config[propName];\n    }\n  } // Resolve default props\n\n\n  if (type && type.defaultProps) {\n    const defaultProps = type.defaultProps;\n\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  return ReactElement(type, key, ref, undefined, undefined, ReactCurrentOwner.current, props);\n}\n/**\r\n * https://github.com/reactjs/rfcs/pull/107\r\n * @param {*} type\r\n * @param {object} props\r\n * @param {string} key\r\n */\n\nexport function jsxDEV(type, config, maybeKey, source, self) {\n  if (__DEV__) {\n    let propName; // Reserved names are extracted\n\n    const props = {};\n    let key = null;\n    let ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      if (__DEV__) {\n        checkKeyStringCoercion(maybeKey);\n      }\n\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      if (__DEV__) {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      ref = config.ref;\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      const defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      const displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n  }\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ReactElement\");","map":{"version":3,"names":["getComponentNameFromType","ReactSharedInternals","hasOwnProperty","REACT_ELEMENT_TYPE","checkKeyStringCoercion","ReactCurrentOwner","RESERVED_PROPS","key","ref","__self","__source","specialPropKeyWarningShown","specialPropRefWarningShown","didWarnAboutStringRefs","__DEV__","hasValidRef","config","call","getter","Object","getOwnPropertyDescriptor","get","isReactWarning","undefined","hasValidKey","warnIfStringRefCannotBeAutoConverted","self","current","stateNode","componentName","type","console","error","defineKeyPropWarningGetter","props","displayName","warnAboutAccessingKey","defineProperty","configurable","defineRefPropWarningGetter","warnAboutAccessingRef","ReactElement","source","owner","element","$$typeof","_owner","_store","enumerable","writable","value","freeze","jsx","maybeKey","propName","defaultProps","jsxDEV","name"],"sources":["D:/project/font-end/debug-anything/react-test/src/react/packages/react/src/jsx/ReactJSXElement.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\r\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\r\nimport hasOwnProperty from 'shared/hasOwnProperty';\r\nimport {REACT_ELEMENT_TYPE} from 'shared/ReactSymbols';\r\nimport {checkKeyStringCoercion} from 'shared/CheckStringCoercion';\r\n\r\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\r\n\r\nconst RESERVED_PROPS = {\r\n  key: true,\r\n  ref: true,\r\n  __self: true,\r\n  __source: true,\r\n};\r\n\r\nlet specialPropKeyWarningShown;\r\nlet specialPropRefWarningShown;\r\nlet didWarnAboutStringRefs;\r\n\r\nif (__DEV__) {\r\n  didWarnAboutStringRefs = {};\r\n}\r\n\r\nfunction hasValidRef(config) {\r\n  if (__DEV__) {\r\n    if (hasOwnProperty.call(config, 'ref')) {\r\n      const getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\r\n      if (getter && getter.isReactWarning) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return config.ref !== undefined;\r\n}\r\n\r\nfunction hasValidKey(config) {\r\n  if (__DEV__) {\r\n    if (hasOwnProperty.call(config, 'key')) {\r\n      const getter = Object.getOwnPropertyDescriptor(config, 'key').get;\r\n      if (getter && getter.isReactWarning) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return config.key !== undefined;\r\n}\r\n\r\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\r\n  if (__DEV__) {\r\n    if (\r\n      typeof config.ref === 'string' &&\r\n      ReactCurrentOwner.current &&\r\n      self &&\r\n      ReactCurrentOwner.current.stateNode !== self\r\n    ) {\r\n      const componentName = getComponentNameFromType(\r\n        ReactCurrentOwner.current.type,\r\n      );\r\n\r\n      if (!didWarnAboutStringRefs[componentName]) {\r\n        console.error(\r\n          'Component \"%s\" contains the string ref \"%s\". ' +\r\n            'Support for string refs will be removed in a future major release. ' +\r\n            'This case cannot be automatically converted to an arrow function. ' +\r\n            'We ask you to manually fix this case by using useRef() or createRef() instead. ' +\r\n            'Learn more about using refs safely here: ' +\r\n            'https://reactjs.org/link/strict-mode-string-ref',\r\n          getComponentNameFromType(ReactCurrentOwner.current.type),\r\n          config.ref,\r\n        );\r\n        didWarnAboutStringRefs[componentName] = true;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction defineKeyPropWarningGetter(props, displayName) {\r\n  if (__DEV__) {\r\n    const warnAboutAccessingKey = function() {\r\n      if (!specialPropKeyWarningShown) {\r\n        specialPropKeyWarningShown = true;\r\n        console.error(\r\n          '%s: `key` is not a prop. Trying to access it will result ' +\r\n            'in `undefined` being returned. If you need to access the same ' +\r\n            'value within the child component, you should pass it as a different ' +\r\n            'prop. (https://reactjs.org/link/special-props)',\r\n          displayName,\r\n        );\r\n      }\r\n    };\r\n    warnAboutAccessingKey.isReactWarning = true;\r\n    Object.defineProperty(props, 'key', {\r\n      get: warnAboutAccessingKey,\r\n      configurable: true,\r\n    });\r\n  }\r\n}\r\n\r\nfunction defineRefPropWarningGetter(props, displayName) {\r\n  if (__DEV__) {\r\n    const warnAboutAccessingRef = function() {\r\n      if (!specialPropRefWarningShown) {\r\n        specialPropRefWarningShown = true;\r\n        console.error(\r\n          '%s: `ref` is not a prop. Trying to access it will result ' +\r\n            'in `undefined` being returned. If you need to access the same ' +\r\n            'value within the child component, you should pass it as a different ' +\r\n            'prop. (https://reactjs.org/link/special-props)',\r\n          displayName,\r\n        );\r\n      }\r\n    };\r\n    warnAboutAccessingRef.isReactWarning = true;\r\n    Object.defineProperty(props, 'ref', {\r\n      get: warnAboutAccessingRef,\r\n      configurable: true,\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Factory method to create a new React element. This no longer adheres to\r\n * the class pattern, so do not use new to call it. Also, instanceof check\r\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\r\n * if something is a React Element.\r\n *\r\n * @param {*} type\r\n * @param {*} props\r\n * @param {*} key\r\n * @param {string|object} ref\r\n * @param {*} owner\r\n * @param {*} self A *temporary* helper to detect places where `this` is\r\n * different from the `owner` when React.createElement is called, so that we\r\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\r\n * functions, and as long as `this` and owner are the same, there will be no\r\n * change in behavior.\r\n * @param {*} source An annotation object (added by a transpiler or otherwise)\r\n * indicating filename, line number, and/or other information.\r\n * @internal\r\n */\r\nconst ReactElement = function(type, key, ref, self, source, owner, props) {\r\n  const element = {\r\n    // This tag allows us to uniquely identify this as a React Element\r\n    $$typeof: REACT_ELEMENT_TYPE,\r\n\r\n    // Built-in properties that belong on the element\r\n    type: type,\r\n    key: key,\r\n    ref: ref,\r\n    props: props,\r\n\r\n    // Record the component responsible for creating this element.\r\n    _owner: owner,\r\n  };\r\n\r\n  if (__DEV__) {\r\n    // The validation flag is currently mutative. We put it on\r\n    // an external backing store so that we can freeze the whole object.\r\n    // This can be replaced with a WeakMap once they are implemented in\r\n    // commonly used development environments.\r\n    element._store = {};\r\n\r\n    // To make comparing ReactElements easier for testing purposes, we make\r\n    // the validation flag non-enumerable (where possible, which should\r\n    // include every environment we run tests in), so the test framework\r\n    // ignores it.\r\n    Object.defineProperty(element._store, 'validated', {\r\n      configurable: false,\r\n      enumerable: false,\r\n      writable: true,\r\n      value: false,\r\n    });\r\n    // self and source are DEV only properties.\r\n    Object.defineProperty(element, '_self', {\r\n      configurable: false,\r\n      enumerable: false,\r\n      writable: false,\r\n      value: self,\r\n    });\r\n    // Two elements created in two different places should be considered\r\n    // equal for testing purposes and therefore we hide it from enumeration.\r\n    Object.defineProperty(element, '_source', {\r\n      configurable: false,\r\n      enumerable: false,\r\n      writable: false,\r\n      value: source,\r\n    });\r\n    if (Object.freeze) {\r\n      Object.freeze(element.props);\r\n      Object.freeze(element);\r\n    }\r\n  }\r\n\r\n  return element;\r\n};\r\n\r\n/**\r\n * https://github.com/reactjs/rfcs/pull/107\r\n * @param {*} type\r\n * @param {object} props\r\n * @param {string} key\r\n */\r\nexport function jsx(type, config, maybeKey) {\r\n  let propName;\r\n\r\n  // Reserved names are extracted\r\n  const props = {};\r\n\r\n  let key = null;\r\n  let ref = null;\r\n\r\n  // Currently, key can be spread in as a prop. This causes a potential\r\n  // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\r\n  // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\r\n  // but as an intermediary step, we will use jsxDEV for everything except\r\n  // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\r\n  // key is explicitly declared to be undefined or not.\r\n  if (maybeKey !== undefined) {\r\n    if (__DEV__) {\r\n      checkKeyStringCoercion(maybeKey);\r\n    }\r\n    key = '' + maybeKey;\r\n  }\r\n\r\n  if (hasValidKey(config)) {\r\n    if (__DEV__) {\r\n      checkKeyStringCoercion(config.key);\r\n    }\r\n    key = '' + config.key;\r\n  }\r\n\r\n  if (hasValidRef(config)) {\r\n    ref = config.ref;\r\n  }\r\n\r\n  // Remaining properties are added to a new props object\r\n  for (propName in config) {\r\n    if (\r\n      hasOwnProperty.call(config, propName) &&\r\n      !RESERVED_PROPS.hasOwnProperty(propName)\r\n    ) {\r\n      props[propName] = config[propName];\r\n    }\r\n  }\r\n\r\n  // Resolve default props\r\n  if (type && type.defaultProps) {\r\n    const defaultProps = type.defaultProps;\r\n    for (propName in defaultProps) {\r\n      if (props[propName] === undefined) {\r\n        props[propName] = defaultProps[propName];\r\n      }\r\n    }\r\n  }\r\n\r\n  return ReactElement(\r\n    type,\r\n    key,\r\n    ref,\r\n    undefined,\r\n    undefined,\r\n    ReactCurrentOwner.current,\r\n    props,\r\n  );\r\n}\r\n\r\n/**\r\n * https://github.com/reactjs/rfcs/pull/107\r\n * @param {*} type\r\n * @param {object} props\r\n * @param {string} key\r\n */\r\nexport function jsxDEV(type, config, maybeKey, source, self) {\r\n  if (__DEV__) {\r\n    let propName;\r\n\r\n    // Reserved names are extracted\r\n    const props = {};\r\n\r\n    let key = null;\r\n    let ref = null;\r\n\r\n    // Currently, key can be spread in as a prop. This causes a potential\r\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\r\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\r\n    // but as an intermediary step, we will use jsxDEV for everything except\r\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\r\n    // key is explicitly declared to be undefined or not.\r\n    if (maybeKey !== undefined) {\r\n      if (__DEV__) {\r\n        checkKeyStringCoercion(maybeKey);\r\n      }\r\n      key = '' + maybeKey;\r\n    }\r\n\r\n    if (hasValidKey(config)) {\r\n      if (__DEV__) {\r\n        checkKeyStringCoercion(config.key);\r\n      }\r\n      key = '' + config.key;\r\n    }\r\n\r\n    if (hasValidRef(config)) {\r\n      ref = config.ref;\r\n      warnIfStringRefCannotBeAutoConverted(config, self);\r\n    }\r\n\r\n    // Remaining properties are added to a new props object\r\n    for (propName in config) {\r\n      if (\r\n        hasOwnProperty.call(config, propName) &&\r\n        !RESERVED_PROPS.hasOwnProperty(propName)\r\n      ) {\r\n        props[propName] = config[propName];\r\n      }\r\n    }\r\n\r\n    // Resolve default props\r\n    if (type && type.defaultProps) {\r\n      const defaultProps = type.defaultProps;\r\n      for (propName in defaultProps) {\r\n        if (props[propName] === undefined) {\r\n          props[propName] = defaultProps[propName];\r\n        }\r\n      }\r\n    }\r\n\r\n    if (key || ref) {\r\n      const displayName =\r\n        typeof type === 'function'\r\n          ? type.displayName || type.name || 'Unknown'\r\n          : type;\r\n      if (key) {\r\n        defineKeyPropWarningGetter(props, displayName);\r\n      }\r\n      if (ref) {\r\n        defineRefPropWarningGetter(props, displayName);\r\n      }\r\n    }\r\n\r\n    return ReactElement(\r\n      type,\r\n      key,\r\n      ref,\r\n      self,\r\n      source,\r\n      ReactCurrentOwner.current,\r\n      props,\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}