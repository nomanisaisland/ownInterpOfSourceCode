{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\nimport { createCursor, push, pop } from './ReactFiberStack.old';\nconst DefaultSuspenseContext = 0b00; // The Suspense Context is split into two parts. The lower bits is\n// inherited deeply down the subtree. The upper bits only affect\n// this immediate suspense boundary and gets reset each new\n// boundary or suspense list.\n\nconst SubtreeSuspenseContextMask = 0b01; // Subtree Flags:\n// InvisibleParentSuspenseContext indicates that one of our parent Suspense\n// boundaries is not currently showing visible main content.\n// Either because it is already showing a fallback or is not mounted at all.\n// We can use this to determine if it is desirable to trigger a fallback at\n// the parent. If not, then we might need to trigger undesirable boundaries\n// and/or suspend the commit to avoid hiding the parent content.\n\nexport const InvisibleParentSuspenseContext = 0b01; // Shallow Flags:\n// ForceSuspenseFallback can be used by SuspenseList to force newly added\n// items into their fallback state during one of the render passes.\n\nexport const ForceSuspenseFallback = 0b10;\nexport const suspenseStackCursor = createCursor(DefaultSuspenseContext);\nexport function hasSuspenseContext(parentContext, flag) {\n  return (parentContext & flag) !== 0;\n}\nexport function setDefaultShallowSuspenseContext(parentContext) {\n  return parentContext & SubtreeSuspenseContextMask;\n}\nexport function setShallowSuspenseContext(parentContext, shallowContext) {\n  return parentContext & SubtreeSuspenseContextMask | shallowContext;\n}\nexport function addSubtreeSuspenseContext(parentContext, subtreeContext) {\n  return parentContext | subtreeContext;\n}\nexport function pushSuspenseContext(fiber, newContext) {\n  push(suspenseStackCursor, newContext, fiber);\n}\nexport function popSuspenseContext(fiber) {\n  pop(suspenseStackCursor, fiber);\n}","map":{"version":3,"names":["createCursor","push","pop","DefaultSuspenseContext","SubtreeSuspenseContextMask","InvisibleParentSuspenseContext","ForceSuspenseFallback","suspenseStackCursor","hasSuspenseContext","parentContext","flag","setDefaultShallowSuspenseContext","setShallowSuspenseContext","shallowContext","addSubtreeSuspenseContext","subtreeContext","pushSuspenseContext","fiber","newContext","popSuspenseContext"],"sources":["E:/debug-anything/react-test/src/react/packages/react-reconciler/src/ReactFiberSuspenseContext.old.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {Fiber} from './ReactInternalTypes';\r\nimport type {StackCursor} from './ReactFiberStack.old';\r\n\r\nimport {createCursor, push, pop} from './ReactFiberStack.old';\r\n\r\nexport opaque type SuspenseContext = number;\r\nexport opaque type SubtreeSuspenseContext: SuspenseContext = number;\r\nexport opaque type ShallowSuspenseContext: SuspenseContext = number;\r\n\r\nconst DefaultSuspenseContext: SuspenseContext = 0b00;\r\n\r\n// The Suspense Context is split into two parts. The lower bits is\r\n// inherited deeply down the subtree. The upper bits only affect\r\n// this immediate suspense boundary and gets reset each new\r\n// boundary or suspense list.\r\nconst SubtreeSuspenseContextMask: SuspenseContext = 0b01;\r\n\r\n// Subtree Flags:\r\n\r\n// InvisibleParentSuspenseContext indicates that one of our parent Suspense\r\n// boundaries is not currently showing visible main content.\r\n// Either because it is already showing a fallback or is not mounted at all.\r\n// We can use this to determine if it is desirable to trigger a fallback at\r\n// the parent. If not, then we might need to trigger undesirable boundaries\r\n// and/or suspend the commit to avoid hiding the parent content.\r\nexport const InvisibleParentSuspenseContext: SubtreeSuspenseContext = 0b01;\r\n\r\n// Shallow Flags:\r\n\r\n// ForceSuspenseFallback can be used by SuspenseList to force newly added\r\n// items into their fallback state during one of the render passes.\r\nexport const ForceSuspenseFallback: ShallowSuspenseContext = 0b10;\r\n\r\nexport const suspenseStackCursor: StackCursor<SuspenseContext> = createCursor(\r\n  DefaultSuspenseContext,\r\n);\r\n\r\nexport function hasSuspenseContext(\r\n  parentContext: SuspenseContext,\r\n  flag: SuspenseContext,\r\n): boolean {\r\n  return (parentContext & flag) !== 0;\r\n}\r\n\r\nexport function setDefaultShallowSuspenseContext(\r\n  parentContext: SuspenseContext,\r\n): SuspenseContext {\r\n  return parentContext & SubtreeSuspenseContextMask;\r\n}\r\n\r\nexport function setShallowSuspenseContext(\r\n  parentContext: SuspenseContext,\r\n  shallowContext: ShallowSuspenseContext,\r\n): SuspenseContext {\r\n  return (parentContext & SubtreeSuspenseContextMask) | shallowContext;\r\n}\r\n\r\nexport function addSubtreeSuspenseContext(\r\n  parentContext: SuspenseContext,\r\n  subtreeContext: SubtreeSuspenseContext,\r\n): SuspenseContext {\r\n  return parentContext | subtreeContext;\r\n}\r\n\r\nexport function pushSuspenseContext(\r\n  fiber: Fiber,\r\n  newContext: SuspenseContext,\r\n): void {\r\n  push(suspenseStackCursor, newContext, fiber);\r\n}\r\n\r\nexport function popSuspenseContext(fiber: Fiber): void {\r\n  pop(suspenseStackCursor, fiber);\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA,SAAQA,YAAR,EAAsBC,IAAtB,EAA4BC,GAA5B,QAAsC,uBAAtC;AAMA,MAAMC,sBAAuC,GAAG,IAAhD,C,CAEA;AACA;AACA;AACA;;AACA,MAAMC,0BAA2C,GAAG,IAApD,C,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,8BAAsD,GAAG,IAA/D,C,CAEP;AAEA;AACA;;AACA,OAAO,MAAMC,qBAA6C,GAAG,IAAtD;AAEP,OAAO,MAAMC,mBAAiD,GAAGP,YAAY,CAC3EG,sBAD2E,CAAtE;AAIP,OAAO,SAASK,kBAAT,CACLC,aADK,EAELC,IAFK,EAGI;EACT,OAAO,CAACD,aAAa,GAAGC,IAAjB,MAA2B,CAAlC;AACD;AAED,OAAO,SAASC,gCAAT,CACLF,aADK,EAEY;EACjB,OAAOA,aAAa,GAAGL,0BAAvB;AACD;AAED,OAAO,SAASQ,yBAAT,CACLH,aADK,EAELI,cAFK,EAGY;EACjB,OAAQJ,aAAa,GAAGL,0BAAjB,GAA+CS,cAAtD;AACD;AAED,OAAO,SAASC,yBAAT,CACLL,aADK,EAELM,cAFK,EAGY;EACjB,OAAON,aAAa,GAAGM,cAAvB;AACD;AAED,OAAO,SAASC,mBAAT,CACLC,KADK,EAELC,UAFK,EAGC;EACNjB,IAAI,CAACM,mBAAD,EAAsBW,UAAtB,EAAkCD,KAAlC,CAAJ;AACD;AAED,OAAO,SAASE,kBAAT,CAA4BF,KAA5B,EAAgD;EACrDf,GAAG,CAACK,mBAAD,EAAsBU,KAAtB,CAAH;AACD"},"metadata":{},"sourceType":"module"}