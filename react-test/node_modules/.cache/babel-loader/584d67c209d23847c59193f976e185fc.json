{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nlet suppressWarning = false;\nexport function setSuppressWarning(newSuppressWarning) {\n  if (__DEV__) {\n    suppressWarning = newSuppressWarning;\n  }\n} // In DEV, calls to console.warn and console.error get replaced\n// by calls to these methods by a Babel plugin.\n//\n// In PROD (or in packages without access to React internals),\n// they are left as they are instead.\n\nexport function warn(format) {\n  if (__DEV__) {\n    if (!suppressWarning) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      printWarning('warn', format, args);\n    }\n  }\n}\nexport function error(format) {\n  if (__DEV__) {\n    if (!suppressWarning) {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  if (__DEV__) {\n    const ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    const stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    const argsWithFormat = args.map(item => String(item)); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}","map":{"version":3,"names":["ReactSharedInternals","suppressWarning","setSuppressWarning","newSuppressWarning","__DEV__","warn","format","args","printWarning","error","level","ReactDebugCurrentFrame","stack","getStackAddendum","concat","argsWithFormat","map","item","String","unshift","Function","prototype","apply","call","console"],"sources":["E:/react-test/src/react/packages/shared/consoleWithStackDev.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\r\n\r\nlet suppressWarning = false;\r\nexport function setSuppressWarning(newSuppressWarning) {\r\n  if (__DEV__) {\r\n    suppressWarning = newSuppressWarning;\r\n  }\r\n}\r\n\r\n// In DEV, calls to console.warn and console.error get replaced\r\n// by calls to these methods by a Babel plugin.\r\n//\r\n// In PROD (or in packages without access to React internals),\r\n// they are left as they are instead.\r\n\r\nexport function warn(format, ...args) {\r\n  if (__DEV__) {\r\n    if (!suppressWarning) {\r\n      printWarning('warn', format, args);\r\n    }\r\n  }\r\n}\r\n\r\nexport function error(format, ...args) {\r\n  if (__DEV__) {\r\n    if (!suppressWarning) {\r\n      printWarning('error', format, args);\r\n    }\r\n  }\r\n}\r\n\r\nfunction printWarning(level, format, args) {\r\n  // When changing this logic, you might want to also\r\n  // update consoleWithStackDev.www.js as well.\r\n  if (__DEV__) {\r\n    const ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\r\n    const stack = ReactDebugCurrentFrame.getStackAddendum();\r\n    if (stack !== '') {\r\n      format += '%s';\r\n      args = args.concat([stack]);\r\n    }\r\n\r\n    // eslint-disable-next-line react-internal/safe-string-coercion\r\n    const argsWithFormat = args.map(item => String(item));\r\n    // Careful: RN currently depends on this prefix\r\n    argsWithFormat.unshift('Warning: ' + format);\r\n    // We intentionally don't use spread (or .apply) directly because it\r\n    // breaks IE9: https://github.com/facebook/react/issues/13610\r\n    // eslint-disable-next-line react-internal/no-production-logging\r\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,oBAAP,MAAiC,6BAAjC;AAEA,IAAIC,eAAe,GAAG,KAAtB;AACA,OAAO,SAASC,kBAAT,CAA4BC,kBAA5B,EAAgD;EACrD,IAAIC,OAAJ,EAAa;IACXH,eAAe,GAAGE,kBAAlB;EACD;AACF,C,CAED;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASE,IAAT,CAAcC,MAAd,EAA+B;EACpC,IAAIF,OAAJ,EAAa;IACX,IAAI,CAACH,eAAL,EAAsB;MAAA,kCAFMM,IAEN;QAFMA,IAEN;MAAA;;MACpBC,YAAY,CAAC,MAAD,EAASF,MAAT,EAAiBC,IAAjB,CAAZ;IACD;EACF;AACF;AAED,OAAO,SAASE,KAAT,CAAeH,MAAf,EAAgC;EACrC,IAAIF,OAAJ,EAAa;IACX,IAAI,CAACH,eAAL,EAAsB;MAAA,mCAFOM,IAEP;QAFOA,IAEP;MAAA;;MACpBC,YAAY,CAAC,OAAD,EAAUF,MAAV,EAAkBC,IAAlB,CAAZ;IACD;EACF;AACF;;AAED,SAASC,YAAT,CAAsBE,KAAtB,EAA6BJ,MAA7B,EAAqCC,IAArC,EAA2C;EACzC;EACA;EACA,IAAIH,OAAJ,EAAa;IACX,MAAMO,sBAAsB,GAAGX,oBAAoB,CAACW,sBAApD;IACA,MAAMC,KAAK,GAAGD,sBAAsB,CAACE,gBAAvB,EAAd;;IACA,IAAID,KAAK,KAAK,EAAd,EAAkB;MAChBN,MAAM,IAAI,IAAV;MACAC,IAAI,GAAGA,IAAI,CAACO,MAAL,CAAY,CAACF,KAAD,CAAZ,CAAP;IACD,CANU,CAQX;;;IACA,MAAMG,cAAc,GAAGR,IAAI,CAACS,GAAL,CAASC,IAAI,IAAIC,MAAM,CAACD,IAAD,CAAvB,CAAvB,CATW,CAUX;;IACAF,cAAc,CAACI,OAAf,CAAuB,cAAcb,MAArC,EAXW,CAYX;IACA;IACA;;IACAc,QAAQ,CAACC,SAAT,CAAmBC,KAAnB,CAAyBC,IAAzB,CAA8BC,OAAO,CAACd,KAAD,CAArC,EAA8Cc,OAA9C,EAAuDT,cAAvD;EACD;AACF"},"metadata":{},"sourceType":"module"}