{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\nimport { showErrorDialog } from './ReactFiberErrorDialog';\nimport { ClassComponent } from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport { HostRoot } from 'react-reconciler/src/ReactWorkTags';\nexport function logCapturedError(boundary, errorInfo) {\n  try {\n    const logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.\n    // This enables renderers like ReactNative to better manage redbox behavior.\n\n    if (logError === false) {\n      return;\n    }\n\n    const error = errorInfo.value;\n\n    if (__DEV__) {\n      const source = errorInfo.source;\n      const stack = errorInfo.stack;\n      const componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling\n      // `preventDefault()` in window `error` handler.\n      // We record this information as an expando on the error.\n\n      if (error != null && error._suppressLogging) {\n        if (boundary.tag === ClassComponent) {\n          // The error is recoverable and was silenced.\n          // Ignore it and don't print the stack addendum.\n          // This is handy for testing error boundaries without noise.\n          return;\n        } // The error is fatal. Since the silencing might have\n        // been accidental, we'll surface it anyway.\n        // However, the browser would have silenced the original error\n        // so we'll print it first, and then print the stack addendum.\n\n\n        console['error'](error); // Don't transform to our wrapper\n        // For a more detailed description of this block, see:\n        // https://github.com/facebook/react/pull/13384\n      }\n\n      const componentName = source ? getComponentNameFromFiber(source) : null;\n      const componentNameMessage = componentName ? `The above error occurred in the <${componentName}> component:` : 'The above error occurred in one of your React components:';\n      let errorBoundaryMessage;\n\n      if (boundary.tag === HostRoot) {\n        errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\\n' + 'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';\n      } else {\n        const errorBoundaryName = getComponentNameFromFiber(boundary) || 'Anonymous';\n        errorBoundaryMessage = `React will try to recreate this component tree from scratch ` + `using the error boundary you provided, ${errorBoundaryName}.`;\n      }\n\n      const combinedMessage = `${componentNameMessage}\\n${componentStack}\\n\\n` + `${errorBoundaryMessage}`; // In development, we provide our own message with just the component stack.\n      // We don't include the original error message and JS stack because the browser\n      // has already printed it. Even if the application swallows the error, it is still\n      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\n\n      console['error'](combinedMessage); // Don't transform to our wrapper\n    } else {\n      // In production, we print the error directly.\n      // This will include the message, the JS stack, and anything the browser wants to show.\n      // We pass the error object instead of custom message so that the browser displays the error natively.\n      console['error'](error); // Don't transform to our wrapper\n    }\n  } catch (e) {\n    // This method must not throw, or React internal state will get messed up.\n    // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n    // we want to report this error outside of the normal stack as a last resort.\n    // https://github.com/facebook/react/issues/13188\n    setTimeout(() => {\n      throw e;\n    });\n  }\n}","map":{"version":3,"names":["showErrorDialog","ClassComponent","getComponentNameFromFiber","HostRoot","logCapturedError","boundary","errorInfo","logError","error","value","__DEV__","source","stack","componentStack","_suppressLogging","tag","console","componentName","componentNameMessage","errorBoundaryMessage","errorBoundaryName","combinedMessage","e","setTimeout"],"sources":["D:/project/font-end/debug-anything/react-test/src/react/packages/react-reconciler/src/ReactFiberErrorLogger.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {Fiber} from './ReactInternalTypes';\r\nimport type {CapturedValue} from './ReactCapturedValue';\r\n\r\nimport {showErrorDialog} from './ReactFiberErrorDialog';\r\nimport {ClassComponent} from './ReactWorkTags';\r\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\r\nimport {HostRoot} from 'react-reconciler/src/ReactWorkTags';\r\n\r\nexport function logCapturedError(\r\n  boundary: Fiber,\r\n  errorInfo: CapturedValue<mixed>,\r\n): void {\r\n  try {\r\n    const logError = showErrorDialog(boundary, errorInfo);\r\n\r\n    // Allow injected showErrorDialog() to prevent default console.error logging.\r\n    // This enables renderers like ReactNative to better manage redbox behavior.\r\n    if (logError === false) {\r\n      return;\r\n    }\r\n\r\n    const error = (errorInfo.value: any);\r\n    if (__DEV__) {\r\n      const source = errorInfo.source;\r\n      const stack = errorInfo.stack;\r\n      const componentStack = stack !== null ? stack : '';\r\n      // Browsers support silencing uncaught errors by calling\r\n      // `preventDefault()` in window `error` handler.\r\n      // We record this information as an expando on the error.\r\n      if (error != null && error._suppressLogging) {\r\n        if (boundary.tag === ClassComponent) {\r\n          // The error is recoverable and was silenced.\r\n          // Ignore it and don't print the stack addendum.\r\n          // This is handy for testing error boundaries without noise.\r\n          return;\r\n        }\r\n        // The error is fatal. Since the silencing might have\r\n        // been accidental, we'll surface it anyway.\r\n        // However, the browser would have silenced the original error\r\n        // so we'll print it first, and then print the stack addendum.\r\n        console['error'](error); // Don't transform to our wrapper\r\n        // For a more detailed description of this block, see:\r\n        // https://github.com/facebook/react/pull/13384\r\n      }\r\n\r\n      const componentName = source ? getComponentNameFromFiber(source) : null;\r\n      const componentNameMessage = componentName\r\n        ? `The above error occurred in the <${componentName}> component:`\r\n        : 'The above error occurred in one of your React components:';\r\n\r\n      let errorBoundaryMessage;\r\n      if (boundary.tag === HostRoot) {\r\n        errorBoundaryMessage =\r\n          'Consider adding an error boundary to your tree to customize error handling behavior.\\n' +\r\n          'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';\r\n      } else {\r\n        const errorBoundaryName =\r\n          getComponentNameFromFiber(boundary) || 'Anonymous';\r\n        errorBoundaryMessage =\r\n          `React will try to recreate this component tree from scratch ` +\r\n          `using the error boundary you provided, ${errorBoundaryName}.`;\r\n      }\r\n      const combinedMessage =\r\n        `${componentNameMessage}\\n${componentStack}\\n\\n` +\r\n        `${errorBoundaryMessage}`;\r\n\r\n      // In development, we provide our own message with just the component stack.\r\n      // We don't include the original error message and JS stack because the browser\r\n      // has already printed it. Even if the application swallows the error, it is still\r\n      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\r\n      console['error'](combinedMessage); // Don't transform to our wrapper\r\n    } else {\r\n      // In production, we print the error directly.\r\n      // This will include the message, the JS stack, and anything the browser wants to show.\r\n      // We pass the error object instead of custom message so that the browser displays the error natively.\r\n      console['error'](error); // Don't transform to our wrapper\r\n    }\r\n  } catch (e) {\r\n    // This method must not throw, or React internal state will get messed up.\r\n    // If console.error is overridden, or logCapturedError() shows a dialog that throws,\r\n    // we want to report this error outside of the normal stack as a last resort.\r\n    // https://github.com/facebook/react/issues/13188\r\n    setTimeout(() => {\r\n      throw e;\r\n    });\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA,SAAQA,eAAR,QAA8B,yBAA9B;AACA,SAAQC,cAAR,QAA6B,iBAA7B;AACA,OAAOC,yBAAP,MAAsC,gDAAtC;AACA,SAAQC,QAAR,QAAuB,oCAAvB;AAEA,OAAO,SAASC,gBAAT,CACLC,QADK,EAELC,SAFK,EAGC;EACN,IAAI;IACF,MAAMC,QAAQ,GAAGP,eAAe,CAACK,QAAD,EAAWC,SAAX,CAAhC,CADE,CAGF;IACA;;IACA,IAAIC,QAAQ,KAAK,KAAjB,EAAwB;MACtB;IACD;;IAED,MAAMC,KAAK,GAAIF,SAAS,CAACG,KAAzB;;IACA,IAAIC,OAAJ,EAAa;MACX,MAAMC,MAAM,GAAGL,SAAS,CAACK,MAAzB;MACA,MAAMC,KAAK,GAAGN,SAAS,CAACM,KAAxB;MACA,MAAMC,cAAc,GAAGD,KAAK,KAAK,IAAV,GAAiBA,KAAjB,GAAyB,EAAhD,CAHW,CAIX;MACA;MACA;;MACA,IAAIJ,KAAK,IAAI,IAAT,IAAiBA,KAAK,CAACM,gBAA3B,EAA6C;QAC3C,IAAIT,QAAQ,CAACU,GAAT,KAAiBd,cAArB,EAAqC;UACnC;UACA;UACA;UACA;QACD,CAN0C,CAO3C;QACA;QACA;QACA;;;QACAe,OAAO,CAAC,OAAD,CAAP,CAAiBR,KAAjB,EAX2C,CAWlB;QACzB;QACA;MACD;;MAED,MAAMS,aAAa,GAAGN,MAAM,GAAGT,yBAAyB,CAACS,MAAD,CAA5B,GAAuC,IAAnE;MACA,MAAMO,oBAAoB,GAAGD,aAAa,GACrC,oCAAmCA,aAAc,cADZ,GAEtC,2DAFJ;MAIA,IAAIE,oBAAJ;;MACA,IAAId,QAAQ,CAACU,GAAT,KAAiBZ,QAArB,EAA+B;QAC7BgB,oBAAoB,GAClB,2FACA,uFAFF;MAGD,CAJD,MAIO;QACL,MAAMC,iBAAiB,GACrBlB,yBAAyB,CAACG,QAAD,CAAzB,IAAuC,WADzC;QAEAc,oBAAoB,GACjB,8DAAD,GACC,0CAAyCC,iBAAkB,GAF9D;MAGD;;MACD,MAAMC,eAAe,GAClB,GAAEH,oBAAqB,KAAIL,cAAe,MAA3C,GACC,GAAEM,oBAAqB,EAF1B,CAxCW,CA4CX;MACA;MACA;MACA;;MACAH,OAAO,CAAC,OAAD,CAAP,CAAiBK,eAAjB,EAhDW,CAgDwB;IACpC,CAjDD,MAiDO;MACL;MACA;MACA;MACAL,OAAO,CAAC,OAAD,CAAP,CAAiBR,KAAjB,EAJK,CAIoB;IAC1B;EACF,CAjED,CAiEE,OAAOc,CAAP,EAAU;IACV;IACA;IACA;IACA;IACAC,UAAU,CAAC,MAAM;MACf,MAAMD,CAAN;IACD,CAFS,CAAV;EAGD;AACF"},"metadata":{},"sourceType":"module"}