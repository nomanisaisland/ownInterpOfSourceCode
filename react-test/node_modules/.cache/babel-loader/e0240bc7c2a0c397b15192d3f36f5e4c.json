{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\nimport { ATTRIBUTE_NAME_CHAR, BOOLEAN, RESERVED, shouldRemoveAttributeWithWarning, getPropertyInfo } from './DOMProperty';\nimport isCustomComponent from './isCustomComponent';\nimport possibleStandardNames from './possibleStandardNames';\nimport hasOwnProperty from 'shared/hasOwnProperty';\n\nlet validateProperty = () => {};\n\nif (__DEV__) {\n  const warnedProperties = {};\n  const EVENT_NAME_REGEX = /^on./;\n  const INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;\n  const rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');\n  const rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');\n\n  validateProperty = function (tagName, name, value, eventRegistry) {\n    if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {\n      return true;\n    }\n\n    const lowerCasedName = name.toLowerCase();\n\n    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {\n      console.error('React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');\n      warnedProperties[name] = true;\n      return true;\n    } // We can't rely on the event system being injected on the server.\n\n\n    if (eventRegistry != null) {\n      const {\n        registrationNameDependencies,\n        possibleRegistrationNames\n      } = eventRegistry;\n\n      if (registrationNameDependencies.hasOwnProperty(name)) {\n        return true;\n      }\n\n      const registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;\n\n      if (registrationName != null) {\n        console.error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);\n        warnedProperties[name] = true;\n        return true;\n      }\n\n      if (EVENT_NAME_REGEX.test(name)) {\n        console.error('Unknown event handler property `%s`. It will be ignored.', name);\n        warnedProperties[name] = true;\n        return true;\n      }\n    } else if (EVENT_NAME_REGEX.test(name)) {\n      // If no event plugins have been injected, we are in a server environment.\n      // So we can't tell if the event name is correct for sure, but we can filter\n      // out known bad ones like `onclick`. We can't suggest a specific replacement though.\n      if (INVALID_EVENT_NAME_REGEX.test(name)) {\n        console.error('Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);\n      }\n\n      warnedProperties[name] = true;\n      return true;\n    } // Let the ARIA attribute hook validate ARIA attributes\n\n\n    if (rARIA.test(name) || rARIACamel.test(name)) {\n      return true;\n    }\n\n    if (lowerCasedName === 'innerhtml') {\n      console.error('Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    if (lowerCasedName === 'aria') {\n      console.error('The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {\n      console.error('Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    if (typeof value === 'number' && isNaN(value)) {\n      console.error('Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    const propertyInfo = getPropertyInfo(name);\n    const isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.\n\n    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {\n      const standardName = possibleStandardNames[lowerCasedName];\n\n      if (standardName !== name) {\n        console.error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);\n        warnedProperties[name] = true;\n        return true;\n      }\n    } else if (!isReserved && name !== lowerCasedName) {\n      // Unknown attributes should have lowercase casing since that's how they\n      // will be cased anyway with server rendering.\n      console.error('React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {\n      if (value) {\n        console.error('Received `%s` for a non-boolean attribute `%s`.\\n\\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s=\"%s\" or %s={value.toString()}.', value, name, name, value, name);\n      } else {\n        console.error('Received `%s` for a non-boolean attribute `%s`.\\n\\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s=\"%s\" or %s={value.toString()}.\\n\\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);\n      }\n\n      warnedProperties[name] = true;\n      return true;\n    } // Now that we've validated casing, do not validate\n    // data types for reserved props\n\n\n    if (isReserved) {\n      return true;\n    } // Warn when a known attribute is a bad type\n\n\n    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {\n      warnedProperties[name] = true;\n      return false;\n    } // Warn when passing the strings 'false' or 'true' into a boolean prop\n\n\n    if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {\n      console.error('Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string \"false\".', name, value);\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    return true;\n  };\n}\n\nconst warnUnknownProperties = function (type, props, eventRegistry) {\n  if (__DEV__) {\n    const unknownProps = [];\n\n    for (const key in props) {\n      const isValid = validateProperty(type, key, props[key], eventRegistry);\n\n      if (!isValid) {\n        unknownProps.push(key);\n      }\n    }\n\n    const unknownPropString = unknownProps.map(prop => '`' + prop + '`').join(', ');\n\n    if (unknownProps.length === 1) {\n      console.error('Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);\n    } else if (unknownProps.length > 1) {\n      console.error('Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);\n    }\n  }\n};\n\nexport function validateProperties(type, props, eventRegistry) {\n  if (isCustomComponent(type, props)) {\n    return;\n  }\n\n  warnUnknownProperties(type, props, eventRegistry);\n}","map":{"version":3,"names":["ATTRIBUTE_NAME_CHAR","BOOLEAN","RESERVED","shouldRemoveAttributeWithWarning","getPropertyInfo","isCustomComponent","possibleStandardNames","hasOwnProperty","validateProperty","__DEV__","warnedProperties","EVENT_NAME_REGEX","INVALID_EVENT_NAME_REGEX","rARIA","RegExp","rARIACamel","tagName","name","value","eventRegistry","call","lowerCasedName","toLowerCase","console","error","registrationNameDependencies","possibleRegistrationNames","registrationName","test","undefined","isNaN","propertyInfo","isReserved","type","standardName","warnUnknownProperties","props","unknownProps","key","isValid","push","unknownPropString","map","prop","join","length","validateProperties"],"sources":["E:/react-test/src/react/packages/react-dom/src/shared/ReactDOMUnknownPropertyHook.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport {\r\n  ATTRIBUTE_NAME_CHAR,\r\n  BOOLEAN,\r\n  RESERVED,\r\n  shouldRemoveAttributeWithWarning,\r\n  getPropertyInfo,\r\n} from './DOMProperty';\r\nimport isCustomComponent from './isCustomComponent';\r\nimport possibleStandardNames from './possibleStandardNames';\r\nimport hasOwnProperty from 'shared/hasOwnProperty';\r\n\r\nlet validateProperty = () => {};\r\n\r\nif (__DEV__) {\r\n  const warnedProperties = {};\r\n  const EVENT_NAME_REGEX = /^on./;\r\n  const INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;\r\n  const rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');\r\n  const rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');\r\n\r\n  validateProperty = function(tagName, name, value, eventRegistry) {\r\n    if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {\r\n      return true;\r\n    }\r\n\r\n    const lowerCasedName = name.toLowerCase();\r\n    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {\r\n      console.error(\r\n        'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' +\r\n          'All React events are normalized to bubble, so onFocusIn and onFocusOut ' +\r\n          'are not needed/supported by React.',\r\n      );\r\n      warnedProperties[name] = true;\r\n      return true;\r\n    }\r\n\r\n    // We can't rely on the event system being injected on the server.\r\n    if (eventRegistry != null) {\r\n      const {\r\n        registrationNameDependencies,\r\n        possibleRegistrationNames,\r\n      } = eventRegistry;\r\n      if (registrationNameDependencies.hasOwnProperty(name)) {\r\n        return true;\r\n      }\r\n      const registrationName = possibleRegistrationNames.hasOwnProperty(\r\n        lowerCasedName,\r\n      )\r\n        ? possibleRegistrationNames[lowerCasedName]\r\n        : null;\r\n      if (registrationName != null) {\r\n        console.error(\r\n          'Invalid event handler property `%s`. Did you mean `%s`?',\r\n          name,\r\n          registrationName,\r\n        );\r\n        warnedProperties[name] = true;\r\n        return true;\r\n      }\r\n      if (EVENT_NAME_REGEX.test(name)) {\r\n        console.error(\r\n          'Unknown event handler property `%s`. It will be ignored.',\r\n          name,\r\n        );\r\n        warnedProperties[name] = true;\r\n        return true;\r\n      }\r\n    } else if (EVENT_NAME_REGEX.test(name)) {\r\n      // If no event plugins have been injected, we are in a server environment.\r\n      // So we can't tell if the event name is correct for sure, but we can filter\r\n      // out known bad ones like `onclick`. We can't suggest a specific replacement though.\r\n      if (INVALID_EVENT_NAME_REGEX.test(name)) {\r\n        console.error(\r\n          'Invalid event handler property `%s`. ' +\r\n            'React events use the camelCase naming convention, for example `onClick`.',\r\n          name,\r\n        );\r\n      }\r\n      warnedProperties[name] = true;\r\n      return true;\r\n    }\r\n\r\n    // Let the ARIA attribute hook validate ARIA attributes\r\n    if (rARIA.test(name) || rARIACamel.test(name)) {\r\n      return true;\r\n    }\r\n\r\n    if (lowerCasedName === 'innerhtml') {\r\n      console.error(\r\n        'Directly setting property `innerHTML` is not permitted. ' +\r\n          'For more information, lookup documentation on `dangerouslySetInnerHTML`.',\r\n      );\r\n      warnedProperties[name] = true;\r\n      return true;\r\n    }\r\n\r\n    if (lowerCasedName === 'aria') {\r\n      console.error(\r\n        'The `aria` attribute is reserved for future use in React. ' +\r\n          'Pass individual `aria-` attributes instead.',\r\n      );\r\n      warnedProperties[name] = true;\r\n      return true;\r\n    }\r\n\r\n    if (\r\n      lowerCasedName === 'is' &&\r\n      value !== null &&\r\n      value !== undefined &&\r\n      typeof value !== 'string'\r\n    ) {\r\n      console.error(\r\n        'Received a `%s` for a string attribute `is`. If this is expected, cast ' +\r\n          'the value to a string.',\r\n        typeof value,\r\n      );\r\n      warnedProperties[name] = true;\r\n      return true;\r\n    }\r\n\r\n    if (typeof value === 'number' && isNaN(value)) {\r\n      console.error(\r\n        'Received NaN for the `%s` attribute. If this is expected, cast ' +\r\n          'the value to a string.',\r\n        name,\r\n      );\r\n      warnedProperties[name] = true;\r\n      return true;\r\n    }\r\n\r\n    const propertyInfo = getPropertyInfo(name);\r\n    const isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;\r\n\r\n    // Known attributes should match the casing specified in the property config.\r\n    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {\r\n      const standardName = possibleStandardNames[lowerCasedName];\r\n      if (standardName !== name) {\r\n        console.error(\r\n          'Invalid DOM property `%s`. Did you mean `%s`?',\r\n          name,\r\n          standardName,\r\n        );\r\n        warnedProperties[name] = true;\r\n        return true;\r\n      }\r\n    } else if (!isReserved && name !== lowerCasedName) {\r\n      // Unknown attributes should have lowercase casing since that's how they\r\n      // will be cased anyway with server rendering.\r\n      console.error(\r\n        'React does not recognize the `%s` prop on a DOM element. If you ' +\r\n          'intentionally want it to appear in the DOM as a custom ' +\r\n          'attribute, spell it as lowercase `%s` instead. ' +\r\n          'If you accidentally passed it from a parent component, remove ' +\r\n          'it from the DOM element.',\r\n        name,\r\n        lowerCasedName,\r\n      );\r\n      warnedProperties[name] = true;\r\n      return true;\r\n    }\r\n\r\n    if (\r\n      typeof value === 'boolean' &&\r\n      shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)\r\n    ) {\r\n      if (value) {\r\n        console.error(\r\n          'Received `%s` for a non-boolean attribute `%s`.\\n\\n' +\r\n            'If you want to write it to the DOM, pass a string instead: ' +\r\n            '%s=\"%s\" or %s={value.toString()}.',\r\n          value,\r\n          name,\r\n          name,\r\n          value,\r\n          name,\r\n        );\r\n      } else {\r\n        console.error(\r\n          'Received `%s` for a non-boolean attribute `%s`.\\n\\n' +\r\n            'If you want to write it to the DOM, pass a string instead: ' +\r\n            '%s=\"%s\" or %s={value.toString()}.\\n\\n' +\r\n            'If you used to conditionally omit it with %s={condition && value}, ' +\r\n            'pass %s={condition ? value : undefined} instead.',\r\n          value,\r\n          name,\r\n          name,\r\n          value,\r\n          name,\r\n          name,\r\n          name,\r\n        );\r\n      }\r\n      warnedProperties[name] = true;\r\n      return true;\r\n    }\r\n\r\n    // Now that we've validated casing, do not validate\r\n    // data types for reserved props\r\n    if (isReserved) {\r\n      return true;\r\n    }\r\n\r\n    // Warn when a known attribute is a bad type\r\n    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {\r\n      warnedProperties[name] = true;\r\n      return false;\r\n    }\r\n\r\n    // Warn when passing the strings 'false' or 'true' into a boolean prop\r\n    if (\r\n      (value === 'false' || value === 'true') &&\r\n      propertyInfo !== null &&\r\n      propertyInfo.type === BOOLEAN\r\n    ) {\r\n      console.error(\r\n        'Received the string `%s` for the boolean attribute `%s`. ' +\r\n          '%s ' +\r\n          'Did you mean %s={%s}?',\r\n        value,\r\n        name,\r\n        value === 'false'\r\n          ? 'The browser will interpret it as a truthy value.'\r\n          : 'Although this works, it will not work as expected if you pass the string \"false\".',\r\n        name,\r\n        value,\r\n      );\r\n      warnedProperties[name] = true;\r\n      return true;\r\n    }\r\n\r\n    return true;\r\n  };\r\n}\r\n\r\nconst warnUnknownProperties = function(type, props, eventRegistry) {\r\n  if (__DEV__) {\r\n    const unknownProps = [];\r\n    for (const key in props) {\r\n      const isValid = validateProperty(type, key, props[key], eventRegistry);\r\n      if (!isValid) {\r\n        unknownProps.push(key);\r\n      }\r\n    }\r\n\r\n    const unknownPropString = unknownProps\r\n      .map(prop => '`' + prop + '`')\r\n      .join(', ');\r\n    if (unknownProps.length === 1) {\r\n      console.error(\r\n        'Invalid value for prop %s on <%s> tag. Either remove it from the element, ' +\r\n          'or pass a string or number value to keep it in the DOM. ' +\r\n          'For details, see https://reactjs.org/link/attribute-behavior ',\r\n        unknownPropString,\r\n        type,\r\n      );\r\n    } else if (unknownProps.length > 1) {\r\n      console.error(\r\n        'Invalid values for props %s on <%s> tag. Either remove them from the element, ' +\r\n          'or pass a string or number value to keep them in the DOM. ' +\r\n          'For details, see https://reactjs.org/link/attribute-behavior ',\r\n        unknownPropString,\r\n        type,\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\nexport function validateProperties(type, props, eventRegistry) {\r\n  if (isCustomComponent(type, props)) {\r\n    return;\r\n  }\r\n  warnUnknownProperties(type, props, eventRegistry);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}