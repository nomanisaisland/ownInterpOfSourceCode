{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\n// This is imported by the event replaying implementation in React DOM. It's\n// in a separate file to break a circular dependency between the renderer and\n// the reconciler.\nexport function isRootDehydrated(root) {\n  const currentState = root.current.memoizedState;\n  return currentState.isDehydrated;\n}","map":{"version":3,"names":["isRootDehydrated","root","currentState","current","memoizedState","isDehydrated"],"sources":["D:/project/font-end/debug-anything/react-test/src/react/packages/react-reconciler/src/ReactFiberShellHydration.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {FiberRoot} from './ReactInternalTypes';\r\nimport type {RootState} from './ReactFiberRoot.new';\r\n\r\n// This is imported by the event replaying implementation in React DOM. It's\r\n// in a separate file to break a circular dependency between the renderer and\r\n// the reconciler.\r\nexport function isRootDehydrated(root: FiberRoot) {\r\n  const currentState: RootState = root.current.memoizedState;\r\n  return currentState.isDehydrated;\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA,OAAO,SAASA,gBAAT,CAA0BC,IAA1B,EAA2C;EAChD,MAAMC,YAAuB,GAAGD,IAAI,CAACE,OAAL,CAAaC,aAA7C;EACA,OAAOF,YAAY,CAACG,YAApB;AACD"},"metadata":{},"sourceType":"module"}