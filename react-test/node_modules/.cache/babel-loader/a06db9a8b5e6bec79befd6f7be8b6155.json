{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\nconst hasReadOnlyValue = {\n  button: true,\n  checkbox: true,\n  image: true,\n  hidden: true,\n  radio: true,\n  reset: true,\n  submit: true\n};\nexport function checkControlledValueProps(tagName, props) {\n  if (__DEV__) {\n    if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {\n      console.error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');\n    }\n\n    if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {\n      console.error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');\n    }\n  }\n}","map":{"version":3,"names":["hasReadOnlyValue","button","checkbox","image","hidden","radio","reset","submit","checkControlledValueProps","tagName","props","__DEV__","type","onChange","onInput","readOnly","disabled","value","console","error","checked"],"sources":["E:/debug-anything/react-test/src/react/packages/react-dom/src/shared/ReactControlledValuePropTypes.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nconst hasReadOnlyValue = {\r\n  button: true,\r\n  checkbox: true,\r\n  image: true,\r\n  hidden: true,\r\n  radio: true,\r\n  reset: true,\r\n  submit: true,\r\n};\r\n\r\nexport function checkControlledValueProps(\r\n  tagName: string,\r\n  props: Object,\r\n): void {\r\n  if (__DEV__) {\r\n    if (\r\n      !(\r\n        hasReadOnlyValue[props.type] ||\r\n        props.onChange ||\r\n        props.onInput ||\r\n        props.readOnly ||\r\n        props.disabled ||\r\n        props.value == null\r\n      )\r\n    ) {\r\n      console.error(\r\n        'You provided a `value` prop to a form field without an ' +\r\n          '`onChange` handler. This will render a read-only field. If ' +\r\n          'the field should be mutable use `defaultValue`. Otherwise, ' +\r\n          'set either `onChange` or `readOnly`.',\r\n      );\r\n    }\r\n\r\n    if (\r\n      !(\r\n        props.onChange ||\r\n        props.readOnly ||\r\n        props.disabled ||\r\n        props.checked == null\r\n      )\r\n    ) {\r\n      console.error(\r\n        'You provided a `checked` prop to a form field without an ' +\r\n          '`onChange` handler. This will render a read-only field. If ' +\r\n          'the field should be mutable use `defaultChecked`. Otherwise, ' +\r\n          'set either `onChange` or `readOnly`.',\r\n      );\r\n    }\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,gBAAgB,GAAG;EACvBC,MAAM,EAAE,IADe;EAEvBC,QAAQ,EAAE,IAFa;EAGvBC,KAAK,EAAE,IAHgB;EAIvBC,MAAM,EAAE,IAJe;EAKvBC,KAAK,EAAE,IALgB;EAMvBC,KAAK,EAAE,IANgB;EAOvBC,MAAM,EAAE;AAPe,CAAzB;AAUA,OAAO,SAASC,yBAAT,CACLC,OADK,EAELC,KAFK,EAGC;EACN,IAAIC,OAAJ,EAAa;IACX,IACE,EACEX,gBAAgB,CAACU,KAAK,CAACE,IAAP,CAAhB,IACAF,KAAK,CAACG,QADN,IAEAH,KAAK,CAACI,OAFN,IAGAJ,KAAK,CAACK,QAHN,IAIAL,KAAK,CAACM,QAJN,IAKAN,KAAK,CAACO,KAAN,IAAe,IANjB,CADF,EASE;MACAC,OAAO,CAACC,KAAR,CACE,4DACE,6DADF,GAEE,6DAFF,GAGE,sCAJJ;IAMD;;IAED,IACE,EACET,KAAK,CAACG,QAAN,IACAH,KAAK,CAACK,QADN,IAEAL,KAAK,CAACM,QAFN,IAGAN,KAAK,CAACU,OAAN,IAAiB,IAJnB,CADF,EAOE;MACAF,OAAO,CAACC,KAAR,CACE,8DACE,6DADF,GAEE,+DAFF,GAGE,sCAJJ;IAMD;EACF;AACF"},"metadata":{},"sourceType":"module"}