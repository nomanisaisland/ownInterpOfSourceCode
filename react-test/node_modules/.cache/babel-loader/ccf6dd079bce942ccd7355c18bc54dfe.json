{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\nimport { checkFormFieldValueStringCoercion } from 'shared/CheckStringCoercion';\n// Flow does not allow string concatenation of most non-string types. To work\n// around this limitation, we use an opaque type that can only be obtained by\n// passing the value through getToStringValue first.\nexport function toString(value) {\n  // The coercion safety check is performed in getToStringValue().\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nexport function getToStringValue(value) {\n  switch (typeof value) {\n    case 'boolean':\n    case 'number':\n    case 'string':\n    case 'undefined':\n      return value;\n\n    case 'object':\n      if (__DEV__) {\n        checkFormFieldValueStringCoercion(value);\n      }\n\n      return value;\n\n    default:\n      // function, symbol are assigned as empty strings\n      return '';\n  }\n}","map":{"version":3,"names":["checkFormFieldValueStringCoercion","toString","value","getToStringValue","__DEV__"],"sources":["E:/react-test/src/react/packages/react-dom/src/client/ToStringValue.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport {checkFormFieldValueStringCoercion} from 'shared/CheckStringCoercion';\r\n\r\nexport opaque type ToStringValue =\r\n  | boolean\r\n  | number\r\n  | Object\r\n  | string\r\n  | null\r\n  | void;\r\n\r\n// Flow does not allow string concatenation of most non-string types. To work\r\n// around this limitation, we use an opaque type that can only be obtained by\r\n// passing the value through getToStringValue first.\r\nexport function toString(value: ToStringValue): string {\r\n  // The coercion safety check is performed in getToStringValue().\r\n  // eslint-disable-next-line react-internal/safe-string-coercion\r\n  return '' + (value: any);\r\n}\r\n\r\nexport function getToStringValue(value: mixed): ToStringValue {\r\n  switch (typeof value) {\r\n    case 'boolean':\r\n    case 'number':\r\n    case 'string':\r\n    case 'undefined':\r\n      return value;\r\n    case 'object':\r\n      if (__DEV__) {\r\n        checkFormFieldValueStringCoercion(value);\r\n      }\r\n      return value;\r\n    default:\r\n      // function, symbol are assigned as empty strings\r\n      return '';\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,iCAAR,QAAgD,4BAAhD;AAUA;AACA;AACA;AACA,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAgD;EACrD;EACA;EACA,OAAO,KAAMA,KAAb;AACD;AAED,OAAO,SAASC,gBAAT,CAA0BD,KAA1B,EAAuD;EAC5D,QAAQ,OAAOA,KAAf;IACE,KAAK,SAAL;IACA,KAAK,QAAL;IACA,KAAK,QAAL;IACA,KAAK,WAAL;MACE,OAAOA,KAAP;;IACF,KAAK,QAAL;MACE,IAAIE,OAAJ,EAAa;QACXJ,iCAAiC,CAACE,KAAD,CAAjC;MACD;;MACD,OAAOA,KAAP;;IACF;MACE;MACA,OAAO,EAAP;EAbJ;AAeD"},"metadata":{},"sourceType":"module"}