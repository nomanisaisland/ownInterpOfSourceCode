{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\nimport { resetWorkInProgressVersions as resetMutableSourceWorkInProgressVersions } from './ReactMutableSource.old';\nimport { ClassComponent, HostRoot, HostComponent, HostPortal, ContextProvider, SuspenseComponent, SuspenseListComponent, OffscreenComponent, LegacyHiddenComponent, CacheComponent } from './ReactWorkTags';\nimport { DidCapture, NoFlags, ShouldCapture } from './ReactFiberFlags';\nimport { NoMode, ProfileMode } from './ReactTypeOfMode';\nimport { enableProfilerTimer, enableCache } from 'shared/ReactFeatureFlags';\nimport { popHostContainer, popHostContext } from './ReactFiberHostContext.old';\nimport { popSuspenseContext } from './ReactFiberSuspenseContext.old';\nimport { resetHydrationState } from './ReactFiberHydrationContext.old';\nimport { isContextProvider as isLegacyContextProvider, popContext as popLegacyContext, popTopLevelContextObject as popTopLevelLegacyContextObject } from './ReactFiberContext.old';\nimport { popProvider } from './ReactFiberNewContext.old';\nimport { popRenderLanes } from './ReactFiberWorkLoop.old';\nimport { popCacheProvider } from './ReactFiberCacheComponent.old';\nimport { transferActualDuration } from './ReactProfilerTimer.old';\nimport { popTreeContext } from './ReactFiberTreeContext.old';\nimport { popRootTransition, popTransition } from './ReactFiberTransition.old';\n\nfunction unwindWork(current, workInProgress, renderLanes) {\n  // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n  popTreeContext(workInProgress);\n\n  switch (workInProgress.tag) {\n    case ClassComponent:\n      {\n        const Component = workInProgress.type;\n\n        if (isLegacyContextProvider(Component)) {\n          popLegacyContext(workInProgress);\n        }\n\n        const flags = workInProgress.flags;\n\n        if (flags & ShouldCapture) {\n          workInProgress.flags = flags & ~ShouldCapture | DidCapture;\n\n          if (enableProfilerTimer && (workInProgress.mode & ProfileMode) !== NoMode) {\n            transferActualDuration(workInProgress);\n          }\n\n          return workInProgress;\n        }\n\n        return null;\n      }\n\n    case HostRoot:\n      {\n        const root = workInProgress.stateNode;\n\n        if (enableCache) {\n          const cache = workInProgress.memoizedState.cache;\n          popCacheProvider(workInProgress, cache);\n        }\n\n        popRootTransition(workInProgress, root, renderLanes);\n        popHostContainer(workInProgress);\n        popTopLevelLegacyContextObject(workInProgress);\n        resetMutableSourceWorkInProgressVersions();\n        const flags = workInProgress.flags;\n\n        if ((flags & ShouldCapture) !== NoFlags && (flags & DidCapture) === NoFlags) {\n          // There was an error during render that wasn't captured by a suspense\n          // boundary. Do a second pass on the root to unmount the children.\n          workInProgress.flags = flags & ~ShouldCapture | DidCapture;\n          return workInProgress;\n        } // We unwound to the root without completing it. Exit.\n\n\n        return null;\n      }\n\n    case HostComponent:\n      {\n        // TODO: popHydrationState\n        popHostContext(workInProgress);\n        return null;\n      }\n\n    case SuspenseComponent:\n      {\n        popSuspenseContext(workInProgress);\n        const suspenseState = workInProgress.memoizedState;\n\n        if (suspenseState !== null && suspenseState.dehydrated !== null) {\n          if (workInProgress.alternate === null) {\n            throw new Error('Threw in newly mounted dehydrated component. This is likely a bug in ' + 'React. Please file an issue.');\n          }\n\n          resetHydrationState();\n        }\n\n        const flags = workInProgress.flags;\n\n        if (flags & ShouldCapture) {\n          workInProgress.flags = flags & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.\n\n          if (enableProfilerTimer && (workInProgress.mode & ProfileMode) !== NoMode) {\n            transferActualDuration(workInProgress);\n          }\n\n          return workInProgress;\n        }\n\n        return null;\n      }\n\n    case SuspenseListComponent:\n      {\n        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been\n        // caught by a nested boundary. If not, it should bubble through.\n\n        return null;\n      }\n\n    case HostPortal:\n      popHostContainer(workInProgress);\n      return null;\n\n    case ContextProvider:\n      const context = workInProgress.type._context;\n      popProvider(context, workInProgress);\n      return null;\n\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popRenderLanes(workInProgress);\n      popTransition(workInProgress, current);\n      return null;\n\n    case CacheComponent:\n      if (enableCache) {\n        const cache = workInProgress.memoizedState.cache;\n        popCacheProvider(workInProgress, cache);\n      }\n\n      return null;\n\n    default:\n      return null;\n  }\n}\n\nfunction unwindInterruptedWork(current, interruptedWork, renderLanes) {\n  // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n  popTreeContext(interruptedWork);\n\n  switch (interruptedWork.tag) {\n    case ClassComponent:\n      {\n        const childContextTypes = interruptedWork.type.childContextTypes;\n\n        if (childContextTypes !== null && childContextTypes !== undefined) {\n          popLegacyContext(interruptedWork);\n        }\n\n        break;\n      }\n\n    case HostRoot:\n      {\n        const root = interruptedWork.stateNode;\n\n        if (enableCache) {\n          const cache = interruptedWork.memoizedState.cache;\n          popCacheProvider(interruptedWork, cache);\n        }\n\n        popRootTransition(interruptedWork, root, renderLanes);\n        popHostContainer(interruptedWork);\n        popTopLevelLegacyContextObject(interruptedWork);\n        resetMutableSourceWorkInProgressVersions();\n        break;\n      }\n\n    case HostComponent:\n      {\n        popHostContext(interruptedWork);\n        break;\n      }\n\n    case HostPortal:\n      popHostContainer(interruptedWork);\n      break;\n\n    case SuspenseComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n\n    case SuspenseListComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n\n    case ContextProvider:\n      const context = interruptedWork.type._context;\n      popProvider(context, interruptedWork);\n      break;\n\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popRenderLanes(interruptedWork);\n      popTransition(interruptedWork, current);\n      break;\n\n    case CacheComponent:\n      if (enableCache) {\n        const cache = interruptedWork.memoizedState.cache;\n        popCacheProvider(interruptedWork, cache);\n      }\n\n      break;\n\n    default:\n      break;\n  }\n}\n\nexport { unwindWork, unwindInterruptedWork };","map":{"version":3,"names":["resetWorkInProgressVersions","resetMutableSourceWorkInProgressVersions","ClassComponent","HostRoot","HostComponent","HostPortal","ContextProvider","SuspenseComponent","SuspenseListComponent","OffscreenComponent","LegacyHiddenComponent","CacheComponent","DidCapture","NoFlags","ShouldCapture","NoMode","ProfileMode","enableProfilerTimer","enableCache","popHostContainer","popHostContext","popSuspenseContext","resetHydrationState","isContextProvider","isLegacyContextProvider","popContext","popLegacyContext","popTopLevelContextObject","popTopLevelLegacyContextObject","popProvider","popRenderLanes","popCacheProvider","transferActualDuration","popTreeContext","popRootTransition","popTransition","unwindWork","current","workInProgress","renderLanes","tag","Component","type","flags","mode","root","stateNode","cache","memoizedState","suspenseState","dehydrated","alternate","Error","context","_context","unwindInterruptedWork","interruptedWork","childContextTypes","undefined"],"sources":["D:/project/font-end/debug-anything/react-test/src/react/packages/react-reconciler/src/ReactFiberUnwindWork.old.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {ReactContext} from 'shared/ReactTypes';\r\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\r\nimport type {Lanes} from './ReactFiberLane.old';\r\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\r\nimport type {Cache} from './ReactFiberCacheComponent.old';\r\n\r\nimport {resetWorkInProgressVersions as resetMutableSourceWorkInProgressVersions} from './ReactMutableSource.old';\r\nimport {\r\n  ClassComponent,\r\n  HostRoot,\r\n  HostComponent,\r\n  HostPortal,\r\n  ContextProvider,\r\n  SuspenseComponent,\r\n  SuspenseListComponent,\r\n  OffscreenComponent,\r\n  LegacyHiddenComponent,\r\n  CacheComponent,\r\n} from './ReactWorkTags';\r\nimport {DidCapture, NoFlags, ShouldCapture} from './ReactFiberFlags';\r\nimport {NoMode, ProfileMode} from './ReactTypeOfMode';\r\nimport {enableProfilerTimer, enableCache} from 'shared/ReactFeatureFlags';\r\n\r\nimport {popHostContainer, popHostContext} from './ReactFiberHostContext.old';\r\nimport {popSuspenseContext} from './ReactFiberSuspenseContext.old';\r\nimport {resetHydrationState} from './ReactFiberHydrationContext.old';\r\nimport {\r\n  isContextProvider as isLegacyContextProvider,\r\n  popContext as popLegacyContext,\r\n  popTopLevelContextObject as popTopLevelLegacyContextObject,\r\n} from './ReactFiberContext.old';\r\nimport {popProvider} from './ReactFiberNewContext.old';\r\nimport {popRenderLanes} from './ReactFiberWorkLoop.old';\r\nimport {popCacheProvider} from './ReactFiberCacheComponent.old';\r\nimport {transferActualDuration} from './ReactProfilerTimer.old';\r\nimport {popTreeContext} from './ReactFiberTreeContext.old';\r\nimport {popRootTransition, popTransition} from './ReactFiberTransition.old';\r\n\r\nfunction unwindWork(\r\n  current: Fiber | null,\r\n  workInProgress: Fiber,\r\n  renderLanes: Lanes,\r\n) {\r\n  // Note: This intentionally doesn't check if we're hydrating because comparing\r\n  // to the current tree provider fiber is just as fast and less error-prone.\r\n  // Ideally we would have a special version of the work loop only\r\n  // for hydration.\r\n  popTreeContext(workInProgress);\r\n  switch (workInProgress.tag) {\r\n    case ClassComponent: {\r\n      const Component = workInProgress.type;\r\n      if (isLegacyContextProvider(Component)) {\r\n        popLegacyContext(workInProgress);\r\n      }\r\n      const flags = workInProgress.flags;\r\n      if (flags & ShouldCapture) {\r\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\r\n        if (\r\n          enableProfilerTimer &&\r\n          (workInProgress.mode & ProfileMode) !== NoMode\r\n        ) {\r\n          transferActualDuration(workInProgress);\r\n        }\r\n        return workInProgress;\r\n      }\r\n      return null;\r\n    }\r\n    case HostRoot: {\r\n      const root: FiberRoot = workInProgress.stateNode;\r\n      if (enableCache) {\r\n        const cache: Cache = workInProgress.memoizedState.cache;\r\n        popCacheProvider(workInProgress, cache);\r\n      }\r\n      popRootTransition(workInProgress, root, renderLanes);\r\n      popHostContainer(workInProgress);\r\n      popTopLevelLegacyContextObject(workInProgress);\r\n      resetMutableSourceWorkInProgressVersions();\r\n      const flags = workInProgress.flags;\r\n      if (\r\n        (flags & ShouldCapture) !== NoFlags &&\r\n        (flags & DidCapture) === NoFlags\r\n      ) {\r\n        // There was an error during render that wasn't captured by a suspense\r\n        // boundary. Do a second pass on the root to unmount the children.\r\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\r\n        return workInProgress;\r\n      }\r\n      // We unwound to the root without completing it. Exit.\r\n      return null;\r\n    }\r\n    case HostComponent: {\r\n      // TODO: popHydrationState\r\n      popHostContext(workInProgress);\r\n      return null;\r\n    }\r\n    case SuspenseComponent: {\r\n      popSuspenseContext(workInProgress);\r\n      const suspenseState: null | SuspenseState = workInProgress.memoizedState;\r\n      if (suspenseState !== null && suspenseState.dehydrated !== null) {\r\n        if (workInProgress.alternate === null) {\r\n          throw new Error(\r\n            'Threw in newly mounted dehydrated component. This is likely a bug in ' +\r\n              'React. Please file an issue.',\r\n          );\r\n        }\r\n\r\n        resetHydrationState();\r\n      }\r\n\r\n      const flags = workInProgress.flags;\r\n      if (flags & ShouldCapture) {\r\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\r\n        // Captured a suspense effect. Re-render the boundary.\r\n        if (\r\n          enableProfilerTimer &&\r\n          (workInProgress.mode & ProfileMode) !== NoMode\r\n        ) {\r\n          transferActualDuration(workInProgress);\r\n        }\r\n        return workInProgress;\r\n      }\r\n      return null;\r\n    }\r\n    case SuspenseListComponent: {\r\n      popSuspenseContext(workInProgress);\r\n      // SuspenseList doesn't actually catch anything. It should've been\r\n      // caught by a nested boundary. If not, it should bubble through.\r\n      return null;\r\n    }\r\n    case HostPortal:\r\n      popHostContainer(workInProgress);\r\n      return null;\r\n    case ContextProvider:\r\n      const context: ReactContext<any> = workInProgress.type._context;\r\n      popProvider(context, workInProgress);\r\n      return null;\r\n    case OffscreenComponent:\r\n    case LegacyHiddenComponent:\r\n      popRenderLanes(workInProgress);\r\n      popTransition(workInProgress, current);\r\n      return null;\r\n    case CacheComponent:\r\n      if (enableCache) {\r\n        const cache: Cache = workInProgress.memoizedState.cache;\r\n        popCacheProvider(workInProgress, cache);\r\n      }\r\n      return null;\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n\r\nfunction unwindInterruptedWork(\r\n  current: Fiber | null,\r\n  interruptedWork: Fiber,\r\n  renderLanes: Lanes,\r\n) {\r\n  // Note: This intentionally doesn't check if we're hydrating because comparing\r\n  // to the current tree provider fiber is just as fast and less error-prone.\r\n  // Ideally we would have a special version of the work loop only\r\n  // for hydration.\r\n  popTreeContext(interruptedWork);\r\n  switch (interruptedWork.tag) {\r\n    case ClassComponent: {\r\n      const childContextTypes = interruptedWork.type.childContextTypes;\r\n      if (childContextTypes !== null && childContextTypes !== undefined) {\r\n        popLegacyContext(interruptedWork);\r\n      }\r\n      break;\r\n    }\r\n    case HostRoot: {\r\n      const root: FiberRoot = interruptedWork.stateNode;\r\n      if (enableCache) {\r\n        const cache: Cache = interruptedWork.memoizedState.cache;\r\n        popCacheProvider(interruptedWork, cache);\r\n      }\r\n      popRootTransition(interruptedWork, root, renderLanes);\r\n      popHostContainer(interruptedWork);\r\n      popTopLevelLegacyContextObject(interruptedWork);\r\n      resetMutableSourceWorkInProgressVersions();\r\n      break;\r\n    }\r\n    case HostComponent: {\r\n      popHostContext(interruptedWork);\r\n      break;\r\n    }\r\n    case HostPortal:\r\n      popHostContainer(interruptedWork);\r\n      break;\r\n    case SuspenseComponent:\r\n      popSuspenseContext(interruptedWork);\r\n      break;\r\n    case SuspenseListComponent:\r\n      popSuspenseContext(interruptedWork);\r\n      break;\r\n    case ContextProvider:\r\n      const context: ReactContext<any> = interruptedWork.type._context;\r\n      popProvider(context, interruptedWork);\r\n      break;\r\n    case OffscreenComponent:\r\n    case LegacyHiddenComponent:\r\n      popRenderLanes(interruptedWork);\r\n      popTransition(interruptedWork, current);\r\n      break;\r\n    case CacheComponent:\r\n      if (enableCache) {\r\n        const cache: Cache = interruptedWork.memoizedState.cache;\r\n        popCacheProvider(interruptedWork, cache);\r\n      }\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n}\r\n\r\nexport {unwindWork, unwindInterruptedWork};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}