{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\nimport { REACT_PROVIDER_TYPE, REACT_CONTEXT_TYPE } from 'shared/ReactSymbols';\nexport function createContext(defaultValue) {\n  // TODO: Second argument used to be an optional `calculateChangedBits`\n  // function. Warn to reserve for future use?\n  const context = {\n    $$typeof: REACT_CONTEXT_TYPE,\n    // As a workaround to support multiple concurrent renderers, we categorize\n    // some renderers as primary and others as secondary. We only expect\n    // there to be two concurrent renderers at most: React Native (primary) and\n    // Fabric (secondary); React DOM (primary) and React ART (secondary).\n    // Secondary renderers store their context values on separate fields.\n    _currentValue: defaultValue,\n    _currentValue2: defaultValue,\n    // Used to track how many concurrent renderers this context currently\n    // supports within in a single renderer. Such as parallel server rendering.\n    _threadCount: 0,\n    // These are circular\n    Provider: null,\n    Consumer: null,\n    // Add these to use same hidden class in VM as ServerContext\n    _defaultValue: null,\n    _globalName: null\n  };\n  context.Provider = {\n    $$typeof: REACT_PROVIDER_TYPE,\n    _context: context\n  };\n  let hasWarnedAboutUsingNestedContextConsumers = false;\n  let hasWarnedAboutUsingConsumerProvider = false;\n  let hasWarnedAboutDisplayNameOnConsumer = false;\n\n  if (__DEV__) {\n    // A separate object, but proxies back to the original context object for\n    // backwards compatibility. It has a different $$typeof, so we can properly\n    // warn for the incorrect usage of Context as a Consumer.\n    const Consumer = {\n      $$typeof: REACT_CONTEXT_TYPE,\n      _context: context\n    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here\n\n    Object.defineProperties(Consumer, {\n      Provider: {\n        get() {\n          if (!hasWarnedAboutUsingConsumerProvider) {\n            hasWarnedAboutUsingConsumerProvider = true;\n            console.error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');\n          }\n\n          return context.Provider;\n        },\n\n        set(_Provider) {\n          context.Provider = _Provider;\n        }\n\n      },\n      _currentValue: {\n        get() {\n          return context._currentValue;\n        },\n\n        set(_currentValue) {\n          context._currentValue = _currentValue;\n        }\n\n      },\n      _currentValue2: {\n        get() {\n          return context._currentValue2;\n        },\n\n        set(_currentValue2) {\n          context._currentValue2 = _currentValue2;\n        }\n\n      },\n      _threadCount: {\n        get() {\n          return context._threadCount;\n        },\n\n        set(_threadCount) {\n          context._threadCount = _threadCount;\n        }\n\n      },\n      Consumer: {\n        get() {\n          if (!hasWarnedAboutUsingNestedContextConsumers) {\n            hasWarnedAboutUsingNestedContextConsumers = true;\n            console.error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\n          }\n\n          return context.Consumer;\n        }\n\n      },\n      displayName: {\n        get() {\n          return context.displayName;\n        },\n\n        set(displayName) {\n          if (!hasWarnedAboutDisplayNameOnConsumer) {\n            console.warn('Setting `displayName` on Context.Consumer has no effect. ' + \"You should set it directly on the context with Context.displayName = '%s'.\", displayName);\n            hasWarnedAboutDisplayNameOnConsumer = true;\n          }\n        }\n\n      }\n    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty\n\n    context.Consumer = Consumer;\n  } else {\n    context.Consumer = context;\n  }\n\n  if (__DEV__) {\n    context._currentRenderer = null;\n    context._currentRenderer2 = null;\n  }\n\n  return context;\n}","map":{"version":3,"names":["REACT_PROVIDER_TYPE","REACT_CONTEXT_TYPE","createContext","defaultValue","context","$$typeof","_currentValue","_currentValue2","_threadCount","Provider","Consumer","_defaultValue","_globalName","_context","hasWarnedAboutUsingNestedContextConsumers","hasWarnedAboutUsingConsumerProvider","hasWarnedAboutDisplayNameOnConsumer","__DEV__","Object","defineProperties","get","console","error","set","_Provider","displayName","warn","_currentRenderer","_currentRenderer2"],"sources":["E:/debug-anything/react-test/src/react/packages/react/src/ReactContext.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport {REACT_PROVIDER_TYPE, REACT_CONTEXT_TYPE} from 'shared/ReactSymbols';\r\n\r\nimport type {ReactContext} from 'shared/ReactTypes';\r\n\r\nexport function createContext<T>(defaultValue: T): ReactContext<T> {\r\n  // TODO: Second argument used to be an optional `calculateChangedBits`\r\n  // function. Warn to reserve for future use?\r\n\r\n  const context: ReactContext<T> = {\r\n    $$typeof: REACT_CONTEXT_TYPE,\r\n    // As a workaround to support multiple concurrent renderers, we categorize\r\n    // some renderers as primary and others as secondary. We only expect\r\n    // there to be two concurrent renderers at most: React Native (primary) and\r\n    // Fabric (secondary); React DOM (primary) and React ART (secondary).\r\n    // Secondary renderers store their context values on separate fields.\r\n    _currentValue: defaultValue,\r\n    _currentValue2: defaultValue,\r\n    // Used to track how many concurrent renderers this context currently\r\n    // supports within in a single renderer. Such as parallel server rendering.\r\n    _threadCount: 0,\r\n    // These are circular\r\n    Provider: (null: any),\r\n    Consumer: (null: any),\r\n\r\n    // Add these to use same hidden class in VM as ServerContext\r\n    _defaultValue: (null: any),\r\n    _globalName: (null: any),\r\n  };\r\n\r\n  context.Provider = {\r\n    $$typeof: REACT_PROVIDER_TYPE,\r\n    _context: context,\r\n  };\r\n\r\n  let hasWarnedAboutUsingNestedContextConsumers = false;\r\n  let hasWarnedAboutUsingConsumerProvider = false;\r\n  let hasWarnedAboutDisplayNameOnConsumer = false;\r\n\r\n  if (__DEV__) {\r\n    // A separate object, but proxies back to the original context object for\r\n    // backwards compatibility. It has a different $$typeof, so we can properly\r\n    // warn for the incorrect usage of Context as a Consumer.\r\n    const Consumer = {\r\n      $$typeof: REACT_CONTEXT_TYPE,\r\n      _context: context,\r\n    };\r\n    // $FlowFixMe: Flow complains about not setting a value, which is intentional here\r\n    Object.defineProperties(Consumer, {\r\n      Provider: {\r\n        get() {\r\n          if (!hasWarnedAboutUsingConsumerProvider) {\r\n            hasWarnedAboutUsingConsumerProvider = true;\r\n            console.error(\r\n              'Rendering <Context.Consumer.Provider> is not supported and will be removed in ' +\r\n                'a future major release. Did you mean to render <Context.Provider> instead?',\r\n            );\r\n          }\r\n          return context.Provider;\r\n        },\r\n        set(_Provider) {\r\n          context.Provider = _Provider;\r\n        },\r\n      },\r\n      _currentValue: {\r\n        get() {\r\n          return context._currentValue;\r\n        },\r\n        set(_currentValue) {\r\n          context._currentValue = _currentValue;\r\n        },\r\n      },\r\n      _currentValue2: {\r\n        get() {\r\n          return context._currentValue2;\r\n        },\r\n        set(_currentValue2) {\r\n          context._currentValue2 = _currentValue2;\r\n        },\r\n      },\r\n      _threadCount: {\r\n        get() {\r\n          return context._threadCount;\r\n        },\r\n        set(_threadCount) {\r\n          context._threadCount = _threadCount;\r\n        },\r\n      },\r\n      Consumer: {\r\n        get() {\r\n          if (!hasWarnedAboutUsingNestedContextConsumers) {\r\n            hasWarnedAboutUsingNestedContextConsumers = true;\r\n            console.error(\r\n              'Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' +\r\n                'a future major release. Did you mean to render <Context.Consumer> instead?',\r\n            );\r\n          }\r\n          return context.Consumer;\r\n        },\r\n      },\r\n      displayName: {\r\n        get() {\r\n          return context.displayName;\r\n        },\r\n        set(displayName) {\r\n          if (!hasWarnedAboutDisplayNameOnConsumer) {\r\n            console.warn(\r\n              'Setting `displayName` on Context.Consumer has no effect. ' +\r\n                \"You should set it directly on the context with Context.displayName = '%s'.\",\r\n              displayName,\r\n            );\r\n            hasWarnedAboutDisplayNameOnConsumer = true;\r\n          }\r\n        },\r\n      },\r\n    });\r\n    // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty\r\n    context.Consumer = Consumer;\r\n  } else {\r\n    context.Consumer = context;\r\n  }\r\n\r\n  if (__DEV__) {\r\n    context._currentRenderer = null;\r\n    context._currentRenderer2 = null;\r\n  }\r\n\r\n  return context;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}