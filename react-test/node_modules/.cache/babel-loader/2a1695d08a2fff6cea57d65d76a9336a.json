{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\nimport { Children } from 'react';\nimport { getToStringValue, toString } from './ToStringValue';\nlet didWarnSelectedSetOnOption = false;\nlet didWarnInvalidChild = false;\nlet didWarnInvalidInnerHTML = false;\n/**\r\n * Implements an <option> host component that warns when `selected` is set.\r\n */\n\nexport function validateProps(element, props) {\n  if (__DEV__) {\n    // If a value is not provided, then the children must be simple.\n    if (props.value == null) {\n      if (typeof props.children === 'object' && props.children !== null) {\n        Children.forEach(props.children, function (child) {\n          if (child == null) {\n            return;\n          }\n\n          if (typeof child === 'string' || typeof child === 'number') {\n            return;\n          }\n\n          if (!didWarnInvalidChild) {\n            didWarnInvalidChild = true;\n            console.error('Cannot infer the option value of complex children. ' + 'Pass a `value` prop or use a plain string as children to <option>.');\n          }\n        });\n      } else if (props.dangerouslySetInnerHTML != null) {\n        if (!didWarnInvalidInnerHTML) {\n          didWarnInvalidInnerHTML = true;\n          console.error('Pass a `value` prop if you set dangerouslyInnerHTML so React knows ' + 'which value should be selected.');\n        }\n      }\n    } // TODO: Remove support for `selected` in <option>.\n\n\n    if (props.selected != null && !didWarnSelectedSetOnOption) {\n      console.error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');\n      didWarnSelectedSetOnOption = true;\n    }\n  }\n}\nexport function postMountWrapper(element, props) {\n  // value=\"\" should make a value attribute (#6219)\n  if (props.value != null) {\n    element.setAttribute('value', toString(getToStringValue(props.value)));\n  }\n}","map":{"version":3,"names":["Children","getToStringValue","toString","didWarnSelectedSetOnOption","didWarnInvalidChild","didWarnInvalidInnerHTML","validateProps","element","props","__DEV__","value","children","forEach","child","console","error","dangerouslySetInnerHTML","selected","postMountWrapper","setAttribute"],"sources":["E:/debug-anything/react-test/src/react/packages/react-dom/src/client/ReactDOMOption.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport {Children} from 'react';\r\nimport {getToStringValue, toString} from './ToStringValue';\r\n\r\nlet didWarnSelectedSetOnOption = false;\r\nlet didWarnInvalidChild = false;\r\nlet didWarnInvalidInnerHTML = false;\r\n\r\n/**\r\n * Implements an <option> host component that warns when `selected` is set.\r\n */\r\n\r\nexport function validateProps(element: Element, props: Object) {\r\n  if (__DEV__) {\r\n    // If a value is not provided, then the children must be simple.\r\n    if (props.value == null) {\r\n      if (typeof props.children === 'object' && props.children !== null) {\r\n        Children.forEach(props.children, function(child) {\r\n          if (child == null) {\r\n            return;\r\n          }\r\n          if (typeof child === 'string' || typeof child === 'number') {\r\n            return;\r\n          }\r\n          if (!didWarnInvalidChild) {\r\n            didWarnInvalidChild = true;\r\n            console.error(\r\n              'Cannot infer the option value of complex children. ' +\r\n                'Pass a `value` prop or use a plain string as children to <option>.',\r\n            );\r\n          }\r\n        });\r\n      } else if (props.dangerouslySetInnerHTML != null) {\r\n        if (!didWarnInvalidInnerHTML) {\r\n          didWarnInvalidInnerHTML = true;\r\n          console.error(\r\n            'Pass a `value` prop if you set dangerouslyInnerHTML so React knows ' +\r\n              'which value should be selected.',\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    // TODO: Remove support for `selected` in <option>.\r\n    if (props.selected != null && !didWarnSelectedSetOnOption) {\r\n      console.error(\r\n        'Use the `defaultValue` or `value` props on <select> instead of ' +\r\n          'setting `selected` on <option>.',\r\n      );\r\n      didWarnSelectedSetOnOption = true;\r\n    }\r\n  }\r\n}\r\n\r\nexport function postMountWrapper(element: Element, props: Object) {\r\n  // value=\"\" should make a value attribute (#6219)\r\n  if (props.value != null) {\r\n    element.setAttribute('value', toString(getToStringValue(props.value)));\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,QAAR,QAAuB,OAAvB;AACA,SAAQC,gBAAR,EAA0BC,QAA1B,QAAyC,iBAAzC;AAEA,IAAIC,0BAA0B,GAAG,KAAjC;AACA,IAAIC,mBAAmB,GAAG,KAA1B;AACA,IAAIC,uBAAuB,GAAG,KAA9B;AAEA;AACA;AACA;;AAEA,OAAO,SAASC,aAAT,CAAuBC,OAAvB,EAAyCC,KAAzC,EAAwD;EAC7D,IAAIC,OAAJ,EAAa;IACX;IACA,IAAID,KAAK,CAACE,KAAN,IAAe,IAAnB,EAAyB;MACvB,IAAI,OAAOF,KAAK,CAACG,QAAb,KAA0B,QAA1B,IAAsCH,KAAK,CAACG,QAAN,KAAmB,IAA7D,EAAmE;QACjEX,QAAQ,CAACY,OAAT,CAAiBJ,KAAK,CAACG,QAAvB,EAAiC,UAASE,KAAT,EAAgB;UAC/C,IAAIA,KAAK,IAAI,IAAb,EAAmB;YACjB;UACD;;UACD,IAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,QAAlD,EAA4D;YAC1D;UACD;;UACD,IAAI,CAACT,mBAAL,EAA0B;YACxBA,mBAAmB,GAAG,IAAtB;YACAU,OAAO,CAACC,KAAR,CACE,wDACE,oEAFJ;UAID;QACF,CAdD;MAeD,CAhBD,MAgBO,IAAIP,KAAK,CAACQ,uBAAN,IAAiC,IAArC,EAA2C;QAChD,IAAI,CAACX,uBAAL,EAA8B;UAC5BA,uBAAuB,GAAG,IAA1B;UACAS,OAAO,CAACC,KAAR,CACE,wEACE,iCAFJ;QAID;MACF;IACF,CA5BU,CA8BX;;;IACA,IAAIP,KAAK,CAACS,QAAN,IAAkB,IAAlB,IAA0B,CAACd,0BAA/B,EAA2D;MACzDW,OAAO,CAACC,KAAR,CACE,oEACE,iCAFJ;MAIAZ,0BAA0B,GAAG,IAA7B;IACD;EACF;AACF;AAED,OAAO,SAASe,gBAAT,CAA0BX,OAA1B,EAA4CC,KAA5C,EAA2D;EAChE;EACA,IAAIA,KAAK,CAACE,KAAN,IAAe,IAAnB,EAAyB;IACvBH,OAAO,CAACY,YAAR,CAAqB,OAArB,EAA8BjB,QAAQ,CAACD,gBAAgB,CAACO,KAAK,CAACE,KAAP,CAAjB,CAAtC;EACD;AACF"},"metadata":{},"sourceType":"module"}