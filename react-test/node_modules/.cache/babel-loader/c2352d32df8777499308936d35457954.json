{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\nimport { SyntheticEvent, SyntheticKeyboardEvent, SyntheticFocusEvent, SyntheticMouseEvent, SyntheticDragEvent, SyntheticTouchEvent, SyntheticAnimationEvent, SyntheticTransitionEvent, SyntheticUIEvent, SyntheticWheelEvent, SyntheticClipboardEvent, SyntheticPointerEvent } from '../../events/SyntheticEvent';\nimport { ANIMATION_END, ANIMATION_ITERATION, ANIMATION_START, TRANSITION_END } from '../DOMEventNames';\nimport { topLevelEventsToReactNames, registerSimpleEvents } from '../DOMEventProperties';\nimport { accumulateSinglePhaseListeners, accumulateEventHandleNonManagedNodeListeners } from '../DOMPluginEventSystem';\nimport { IS_EVENT_HANDLE_NON_MANAGED_NODE } from '../EventSystemFlags';\nimport getEventCharCode from '../getEventCharCode';\nimport { IS_CAPTURE_PHASE } from '../EventSystemFlags';\nimport { enableCreateEventHandleAPI } from 'shared/ReactFeatureFlags';\n\nfunction extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {\n  // 通过事件名获取react事件名   click => onClick\n  const reactName = topLevelEventsToReactNames.get(domEventName);\n\n  if (reactName === undefined) {\n    return;\n  } // SyntheticEvent是react事件的内部参数，包括阻止默认事件和阻止冒泡的方法\n\n\n  let SyntheticEventCtor = SyntheticEvent; // 将原生事件名作为react事件类型\n\n  let reactEventType = domEventName; // \n\n  switch (domEventName) {\n    case 'keypress':\n      // Firefox creates a keypress event for function keys too. This removes\n      // the unwanted keypress events. Enter is however both printable and\n      // non-printable. One would expect Tab to be as well (but it isn't).\n      if (getEventCharCode(nativeEvent) === 0) {\n        return;\n      }\n\n    /* falls through */\n\n    case 'keydown':\n    case 'keyup':\n      SyntheticEventCtor = SyntheticKeyboardEvent;\n      break;\n\n    case 'focusin':\n      reactEventType = 'focus';\n      SyntheticEventCtor = SyntheticFocusEvent;\n      break;\n\n    case 'focusout':\n      reactEventType = 'blur';\n      SyntheticEventCtor = SyntheticFocusEvent;\n      break;\n\n    case 'beforeblur':\n    case 'afterblur':\n      SyntheticEventCtor = SyntheticFocusEvent;\n      break;\n\n    case 'click':\n      // Firefox creates a click event on right mouse clicks. This removes the\n      // unwanted click events.\n      if (nativeEvent.button === 2) {\n        return;\n      }\n\n    /* falls through */\n\n    case 'auxclick':\n    case 'dblclick':\n    case 'mousedown':\n    case 'mousemove':\n    case 'mouseup': // TODO: Disabled elements should not respond to mouse events\n\n    /* falls through */\n\n    case 'mouseout':\n    case 'mouseover':\n    case 'contextmenu':\n      SyntheticEventCtor = SyntheticMouseEvent;\n      break;\n\n    case 'drag':\n    case 'dragend':\n    case 'dragenter':\n    case 'dragexit':\n    case 'dragleave':\n    case 'dragover':\n    case 'dragstart':\n    case 'drop':\n      SyntheticEventCtor = SyntheticDragEvent;\n      break;\n\n    case 'touchcancel':\n    case 'touchend':\n    case 'touchmove':\n    case 'touchstart':\n      SyntheticEventCtor = SyntheticTouchEvent;\n      break;\n\n    case ANIMATION_END:\n    case ANIMATION_ITERATION:\n    case ANIMATION_START:\n      SyntheticEventCtor = SyntheticAnimationEvent;\n      break;\n\n    case TRANSITION_END:\n      SyntheticEventCtor = SyntheticTransitionEvent;\n      break;\n\n    case 'scroll':\n      SyntheticEventCtor = SyntheticUIEvent;\n      break;\n\n    case 'wheel':\n      SyntheticEventCtor = SyntheticWheelEvent;\n      break;\n\n    case 'copy':\n    case 'cut':\n    case 'paste':\n      SyntheticEventCtor = SyntheticClipboardEvent;\n      break;\n\n    case 'gotpointercapture':\n    case 'lostpointercapture':\n    case 'pointercancel':\n    case 'pointerdown':\n    case 'pointermove':\n    case 'pointerout':\n    case 'pointerover':\n    case 'pointerup':\n      SyntheticEventCtor = SyntheticPointerEvent;\n      break;\n\n    default:\n      // Unknown event. This is used by createEventHandle.\n      break;\n  }\n\n  const inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;\n\n  if (enableCreateEventHandleAPI && eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) {\n    const listeners = accumulateEventHandleNonManagedNodeListeners( // TODO: this cast may not make sense for events like\n    // \"focus\" where React listens to e.g. \"focusin\".\n    reactEventType, targetContainer, inCapturePhase);\n\n    if (listeners.length > 0) {\n      // Intentionally create event lazily.\n      const event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);\n      dispatchQueue.push({\n        event,\n        listeners\n      });\n    }\n  } else {\n    // Some events don't bubble in the browser.\n    // In the past, React has always bubbled them, but this can be surprising.\n    // We're going to try aligning closer to the browser behavior by not bubbling\n    // them in React either. We'll start by not bubbling onScroll, and then expand.\n    const accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from\n    // nonDelegatedEvents list in DOMPluginEventSystem.\n    // Then we can remove this special list.\n    // This is a breaking change that can wait until React 18.\n    domEventName === 'scroll';\n    const listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly, nativeEvent);\n\n    if (listeners.length > 0) {\n      // Intentionally create event lazily.\n      const event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);\n      dispatchQueue.push({\n        event,\n        listeners\n      });\n    }\n  }\n\n  if (dispatchQueue.length !== 0) {\n    console.log(dispatchQueue);\n  }\n}\n\nexport { registerSimpleEvents as registerEvents, extractEvents };","map":{"version":3,"names":["SyntheticEvent","SyntheticKeyboardEvent","SyntheticFocusEvent","SyntheticMouseEvent","SyntheticDragEvent","SyntheticTouchEvent","SyntheticAnimationEvent","SyntheticTransitionEvent","SyntheticUIEvent","SyntheticWheelEvent","SyntheticClipboardEvent","SyntheticPointerEvent","ANIMATION_END","ANIMATION_ITERATION","ANIMATION_START","TRANSITION_END","topLevelEventsToReactNames","registerSimpleEvents","accumulateSinglePhaseListeners","accumulateEventHandleNonManagedNodeListeners","IS_EVENT_HANDLE_NON_MANAGED_NODE","getEventCharCode","IS_CAPTURE_PHASE","enableCreateEventHandleAPI","extractEvents","dispatchQueue","domEventName","targetInst","nativeEvent","nativeEventTarget","eventSystemFlags","targetContainer","reactName","get","undefined","SyntheticEventCtor","reactEventType","button","inCapturePhase","listeners","length","event","push","accumulateTargetOnly","type","console","log","registerEvents"],"sources":["D:/project/font-end/debug-anything/react-test/src/react/packages/react-dom/src/events/plugins/SimpleEventPlugin.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {DOMEventName} from '../../events/DOMEventNames';\r\nimport type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\r\nimport type {AnyNativeEvent} from '../../events/PluginModuleType';\r\nimport type {DispatchQueue} from '../DOMPluginEventSystem';\r\nimport type {EventSystemFlags} from '../EventSystemFlags';\r\n\r\nimport {\r\n  SyntheticEvent,\r\n  SyntheticKeyboardEvent,\r\n  SyntheticFocusEvent,\r\n  SyntheticMouseEvent,\r\n  SyntheticDragEvent,\r\n  SyntheticTouchEvent,\r\n  SyntheticAnimationEvent,\r\n  SyntheticTransitionEvent,\r\n  SyntheticUIEvent,\r\n  SyntheticWheelEvent,\r\n  SyntheticClipboardEvent,\r\n  SyntheticPointerEvent,\r\n} from '../../events/SyntheticEvent';\r\n\r\nimport {\r\n  ANIMATION_END,\r\n  ANIMATION_ITERATION,\r\n  ANIMATION_START,\r\n  TRANSITION_END,\r\n} from '../DOMEventNames';\r\nimport {\r\n  topLevelEventsToReactNames,\r\n  registerSimpleEvents,\r\n} from '../DOMEventProperties';\r\nimport {\r\n  accumulateSinglePhaseListeners,\r\n  accumulateEventHandleNonManagedNodeListeners,\r\n} from '../DOMPluginEventSystem';\r\nimport {IS_EVENT_HANDLE_NON_MANAGED_NODE} from '../EventSystemFlags';\r\n\r\nimport getEventCharCode from '../getEventCharCode';\r\nimport {IS_CAPTURE_PHASE} from '../EventSystemFlags';\r\n\r\nimport {enableCreateEventHandleAPI} from 'shared/ReactFeatureFlags';\r\n\r\nfunction extractEvents(\r\n  dispatchQueue: DispatchQueue,\r\n  domEventName: DOMEventName,\r\n  targetInst: null | Fiber,\r\n  nativeEvent: AnyNativeEvent,\r\n  nativeEventTarget: null | EventTarget,\r\n  eventSystemFlags: EventSystemFlags,\r\n  targetContainer: EventTarget,\r\n): void {\r\n  // 通过事件名获取react事件名   click => onClick\r\n  const reactName = topLevelEventsToReactNames.get(domEventName);\r\n  if (reactName === undefined) {\r\n    return;\r\n  }\r\n\r\n  // SyntheticEvent是react事件的内部参数，包括阻止默认事件和阻止冒泡的方法\r\n  let SyntheticEventCtor = SyntheticEvent;\r\n  // 将原生事件名作为react事件类型\r\n  let reactEventType: string = domEventName;\r\n\r\n  // \r\n  switch (domEventName) {\r\n    case 'keypress':\r\n      // Firefox creates a keypress event for function keys too. This removes\r\n      // the unwanted keypress events. Enter is however both printable and\r\n      // non-printable. One would expect Tab to be as well (but it isn't).\r\n      if (getEventCharCode(((nativeEvent: any): KeyboardEvent)) === 0) {\r\n        return;\r\n      }\r\n    /* falls through */\r\n    case 'keydown':\r\n    case 'keyup':\r\n      SyntheticEventCtor = SyntheticKeyboardEvent;\r\n      break;\r\n    case 'focusin':\r\n      reactEventType = 'focus';\r\n      SyntheticEventCtor = SyntheticFocusEvent;\r\n      break;\r\n    case 'focusout':\r\n      reactEventType = 'blur';\r\n      SyntheticEventCtor = SyntheticFocusEvent;\r\n      break;\r\n    case 'beforeblur':\r\n    case 'afterblur':\r\n      SyntheticEventCtor = SyntheticFocusEvent;\r\n      break;\r\n    case 'click':\r\n      // Firefox creates a click event on right mouse clicks. This removes the\r\n      // unwanted click events.\r\n      if (nativeEvent.button === 2) {\r\n        return;\r\n      }\r\n    /* falls through */\r\n    case 'auxclick':\r\n    case 'dblclick':\r\n    case 'mousedown':\r\n    case 'mousemove':\r\n    case 'mouseup':\r\n    // TODO: Disabled elements should not respond to mouse events\r\n    /* falls through */\r\n    case 'mouseout':\r\n    case 'mouseover':\r\n    case 'contextmenu':\r\n      SyntheticEventCtor = SyntheticMouseEvent;\r\n      break;\r\n    case 'drag':\r\n    case 'dragend':\r\n    case 'dragenter':\r\n    case 'dragexit':\r\n    case 'dragleave':\r\n    case 'dragover':\r\n    case 'dragstart':\r\n    case 'drop':\r\n      SyntheticEventCtor = SyntheticDragEvent;\r\n      break;\r\n    case 'touchcancel':\r\n    case 'touchend':\r\n    case 'touchmove':\r\n    case 'touchstart':\r\n      SyntheticEventCtor = SyntheticTouchEvent;\r\n      break;\r\n    case ANIMATION_END:\r\n    case ANIMATION_ITERATION:\r\n    case ANIMATION_START:\r\n      SyntheticEventCtor = SyntheticAnimationEvent;\r\n      break;\r\n    case TRANSITION_END:\r\n      SyntheticEventCtor = SyntheticTransitionEvent;\r\n      break;\r\n    case 'scroll':\r\n      SyntheticEventCtor = SyntheticUIEvent;\r\n      break;\r\n    case 'wheel':\r\n      SyntheticEventCtor = SyntheticWheelEvent;\r\n      break;\r\n    case 'copy':\r\n    case 'cut':\r\n    case 'paste':\r\n      SyntheticEventCtor = SyntheticClipboardEvent;\r\n      break;\r\n    case 'gotpointercapture':\r\n    case 'lostpointercapture':\r\n    case 'pointercancel':\r\n    case 'pointerdown':\r\n    case 'pointermove':\r\n    case 'pointerout':\r\n    case 'pointerover':\r\n    case 'pointerup':\r\n      SyntheticEventCtor = SyntheticPointerEvent;\r\n      break;\r\n    default:\r\n      // Unknown event. This is used by createEventHandle.\r\n      break;\r\n  }\r\n\r\n  const inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;\r\n  if (\r\n    enableCreateEventHandleAPI &&\r\n    eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE\r\n  ) {\r\n    const listeners = accumulateEventHandleNonManagedNodeListeners(\r\n      // TODO: this cast may not make sense for events like\r\n      // \"focus\" where React listens to e.g. \"focusin\".\r\n      ((reactEventType: any): DOMEventName),\r\n      targetContainer,\r\n      inCapturePhase,\r\n    );\r\n    if (listeners.length > 0) {\r\n      // Intentionally create event lazily.\r\n      const event = new SyntheticEventCtor(\r\n        reactName,\r\n        reactEventType,\r\n        null,\r\n        nativeEvent,\r\n        nativeEventTarget,\r\n      );\r\n      dispatchQueue.push({event, listeners});\r\n    }\r\n  } else {\r\n    // Some events don't bubble in the browser.\r\n    // In the past, React has always bubbled them, but this can be surprising.\r\n    // We're going to try aligning closer to the browser behavior by not bubbling\r\n    // them in React either. We'll start by not bubbling onScroll, and then expand.\r\n    const accumulateTargetOnly =\r\n      !inCapturePhase &&\r\n      // TODO: ideally, we'd eventually add all events from\r\n      // nonDelegatedEvents list in DOMPluginEventSystem.\r\n      // Then we can remove this special list.\r\n      // This is a breaking change that can wait until React 18.\r\n      domEventName === 'scroll';\r\n\r\n    const listeners = accumulateSinglePhaseListeners(\r\n      targetInst,\r\n      reactName,\r\n      nativeEvent.type,\r\n      inCapturePhase,\r\n      accumulateTargetOnly,\r\n      nativeEvent,\r\n    );\r\n    if (listeners.length > 0) {\r\n      // Intentionally create event lazily.\r\n      const event = new SyntheticEventCtor(\r\n        reactName,\r\n        reactEventType,\r\n        null,\r\n        nativeEvent,\r\n        nativeEventTarget,\r\n      );\r\n      dispatchQueue.push({event, listeners});\r\n    }\r\n  }\r\n  if(dispatchQueue.length !== 0) {\r\n    console.log(dispatchQueue)\r\n  }\r\n}\r\n\r\nexport {registerSimpleEvents as registerEvents, extractEvents};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}