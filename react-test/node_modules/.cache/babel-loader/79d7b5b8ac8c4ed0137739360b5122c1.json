{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\n\n/**\r\n * `charCode` represents the actual \"character code\" and is safe to use with\r\n * `String.fromCharCode`. As such, only keys that correspond to printable\r\n * characters produce a valid `charCode`, the only exception to this is Enter.\r\n * The Tab-key is considered non-printable and does not have a `charCode`,\r\n * presumably because it does not produce a tab-character in browsers.\r\n *\r\n * @param {object} nativeEvent Native browser event.\r\n * @return {number} Normalized `charCode` property.\r\n */\n// 处理特殊的键盘事件\nfunction getEventCharCode(nativeEvent) {\n  let charCode;\n  const keyCode = nativeEvent.keyCode; // 如果nativeEvent内部有charCode属性的话\n\n  if ('charCode' in nativeEvent) {\n    charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.\n    // 火狐浏览器没有charCode对应\n\n    if (charCode === 0 && keyCode === 13) {\n      charCode = 13;\n    }\n  } else {\n    // IE8 does not implement `charCode`, but `keyCode` has the correct value.\n    charCode = keyCode;\n  } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)\n  // report Enter as charCode 10 when ctrl is pressed.\n\n\n  if (charCode === 10) {\n    charCode = 13;\n  } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.\n  // Must not discard the (non-)printable Enter-key.\n\n\n  if (charCode >= 32 || charCode === 13) {\n    return charCode;\n  }\n\n  return 0;\n}\n\nexport default getEventCharCode;","map":{"version":3,"names":["getEventCharCode","nativeEvent","charCode","keyCode"],"sources":["D:/project/font-end/debug-anything/react-test/src/react/packages/react-dom/src/events/getEventCharCode.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\n/**\r\n * `charCode` represents the actual \"character code\" and is safe to use with\r\n * `String.fromCharCode`. As such, only keys that correspond to printable\r\n * characters produce a valid `charCode`, the only exception to this is Enter.\r\n * The Tab-key is considered non-printable and does not have a `charCode`,\r\n * presumably because it does not produce a tab-character in browsers.\r\n *\r\n * @param {object} nativeEvent Native browser event.\r\n * @return {number} Normalized `charCode` property.\r\n */\r\n// 处理特殊的键盘事件\r\nfunction getEventCharCode(nativeEvent: KeyboardEvent): number {\r\n  let charCode;\r\n  const keyCode = nativeEvent.keyCode;\r\n\r\n  // 如果nativeEvent内部有charCode属性的话\r\n  if ('charCode' in nativeEvent) {\r\n    charCode = nativeEvent.charCode;\r\n\r\n    // FF does not set `charCode` for the Enter-key, check against `keyCode`.\r\n    // 火狐浏览器没有charCode对应\r\n    if (charCode === 0 && keyCode === 13) {\r\n      charCode = 13;\r\n    }\r\n  } else {\r\n    // IE8 does not implement `charCode`, but `keyCode` has the correct value.\r\n    charCode = keyCode;\r\n  }\r\n\r\n  // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)\r\n  // report Enter as charCode 10 when ctrl is pressed.\r\n  if (charCode === 10) {\r\n    charCode = 13;\r\n  }\r\n\r\n  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.\r\n  // Must not discard the (non-)printable Enter-key.\r\n  if (charCode >= 32 || charCode === 13) {\r\n    return charCode;\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\nexport default getEventCharCode;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,gBAAT,CAA0BC,WAA1B,EAA8D;EAC5D,IAAIC,QAAJ;EACA,MAAMC,OAAO,GAAGF,WAAW,CAACE,OAA5B,CAF4D,CAI5D;;EACA,IAAI,cAAcF,WAAlB,EAA+B;IAC7BC,QAAQ,GAAGD,WAAW,CAACC,QAAvB,CAD6B,CAG7B;IACA;;IACA,IAAIA,QAAQ,KAAK,CAAb,IAAkBC,OAAO,KAAK,EAAlC,EAAsC;MACpCD,QAAQ,GAAG,EAAX;IACD;EACF,CARD,MAQO;IACL;IACAA,QAAQ,GAAGC,OAAX;EACD,CAhB2D,CAkB5D;EACA;;;EACA,IAAID,QAAQ,KAAK,EAAjB,EAAqB;IACnBA,QAAQ,GAAG,EAAX;EACD,CAtB2D,CAwB5D;EACA;;;EACA,IAAIA,QAAQ,IAAI,EAAZ,IAAkBA,QAAQ,KAAK,EAAnC,EAAuC;IACrC,OAAOA,QAAP;EACD;;EAED,OAAO,CAAP;AACD;;AAED,eAAeF,gBAAf"},"metadata":{},"sourceType":"module"}