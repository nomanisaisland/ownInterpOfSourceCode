{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\nimport { SVG_NAMESPACE } from '../shared/DOMNamespaces';\nimport createMicrosoftUnsafeLocalFunction from './createMicrosoftUnsafeLocalFunction';\nimport { enableTrustedTypesIntegration } from 'shared/ReactFeatureFlags'; // SVG temp container for IE lacking innerHTML\n\nlet reusableSVGContainer;\n/**\r\n * Set the innerHTML property of a node\r\n *\r\n * @param {DOMElement} node\r\n * @param {string} html\r\n * @internal\r\n */\n\nconst setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {\n  if (node.namespaceURI === SVG_NAMESPACE) {\n    if (__DEV__) {\n      if (enableTrustedTypesIntegration) {\n        // TODO: reconsider the text of this warning and when it should show\n        // before enabling the feature flag.\n        if (typeof trustedTypes !== 'undefined') {\n          console.error(\"Using 'dangerouslySetInnerHTML' in an svg element with \" + 'Trusted Types enabled in an Internet Explorer will cause ' + 'the trusted value to be converted to string. Assigning string ' + \"to 'innerHTML' will throw an error if Trusted Types are enforced. \" + \"You can try to wrap your svg element inside a div and use 'dangerouslySetInnerHTML' \" + 'on the enclosing div instead.');\n        }\n      }\n    }\n\n    if (!('innerHTML' in node)) {\n      // IE does not have innerHTML for SVG nodes, so instead we inject the\n      // new markup in a temp node and then move the child nodes across into\n      // the target node\n      reusableSVGContainer = reusableSVGContainer || document.createElement('div');\n      reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';\n      const svgNode = reusableSVGContainer.firstChild;\n\n      while (node.firstChild) {\n        node.removeChild(node.firstChild);\n      }\n\n      while (svgNode.firstChild) {\n        node.appendChild(svgNode.firstChild);\n      }\n\n      return;\n    }\n  }\n\n  node.innerHTML = html;\n});\nexport default setInnerHTML;","map":{"version":3,"names":["SVG_NAMESPACE","createMicrosoftUnsafeLocalFunction","enableTrustedTypesIntegration","reusableSVGContainer","setInnerHTML","node","html","namespaceURI","__DEV__","trustedTypes","console","error","document","createElement","innerHTML","valueOf","toString","svgNode","firstChild","removeChild","appendChild"],"sources":["D:/project/font-end/debug-anything/react-test/src/react/packages/react-dom/src/client/setInnerHTML.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport {SVG_NAMESPACE} from '../shared/DOMNamespaces';\r\nimport createMicrosoftUnsafeLocalFunction from './createMicrosoftUnsafeLocalFunction';\r\nimport {enableTrustedTypesIntegration} from 'shared/ReactFeatureFlags';\r\n\r\n// SVG temp container for IE lacking innerHTML\r\nlet reusableSVGContainer;\r\n\r\n/**\r\n * Set the innerHTML property of a node\r\n *\r\n * @param {DOMElement} node\r\n * @param {string} html\r\n * @internal\r\n */\r\nconst setInnerHTML = createMicrosoftUnsafeLocalFunction(function(\r\n  node: Element,\r\n  html: {valueOf(): {toString(): string, ...}, ...},\r\n): void {\r\n  if (node.namespaceURI === SVG_NAMESPACE) {\r\n    if (__DEV__) {\r\n      if (enableTrustedTypesIntegration) {\r\n        // TODO: reconsider the text of this warning and when it should show\r\n        // before enabling the feature flag.\r\n        if (typeof trustedTypes !== 'undefined') {\r\n          console.error(\r\n            \"Using 'dangerouslySetInnerHTML' in an svg element with \" +\r\n              'Trusted Types enabled in an Internet Explorer will cause ' +\r\n              'the trusted value to be converted to string. Assigning string ' +\r\n              \"to 'innerHTML' will throw an error if Trusted Types are enforced. \" +\r\n              \"You can try to wrap your svg element inside a div and use 'dangerouslySetInnerHTML' \" +\r\n              'on the enclosing div instead.',\r\n          );\r\n        }\r\n      }\r\n    }\r\n    if (!('innerHTML' in node)) {\r\n      // IE does not have innerHTML for SVG nodes, so instead we inject the\r\n      // new markup in a temp node and then move the child nodes across into\r\n      // the target node\r\n      reusableSVGContainer =\r\n        reusableSVGContainer || document.createElement('div');\r\n      reusableSVGContainer.innerHTML =\r\n        '<svg>' + html.valueOf().toString() + '</svg>';\r\n      const svgNode = reusableSVGContainer.firstChild;\r\n      while (node.firstChild) {\r\n        node.removeChild(node.firstChild);\r\n      }\r\n      while (svgNode.firstChild) {\r\n        node.appendChild(svgNode.firstChild);\r\n      }\r\n      return;\r\n    }\r\n  }\r\n  node.innerHTML = (html: any);\r\n});\r\n\r\nexport default setInnerHTML;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,aAAR,QAA4B,yBAA5B;AACA,OAAOC,kCAAP,MAA+C,sCAA/C;AACA,SAAQC,6BAAR,QAA4C,0BAA5C,C,CAEA;;AACA,IAAIC,oBAAJ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,YAAY,GAAGH,kCAAkC,CAAC,UACtDI,IADsD,EAEtDC,IAFsD,EAGhD;EACN,IAAID,IAAI,CAACE,YAAL,KAAsBP,aAA1B,EAAyC;IACvC,IAAIQ,OAAJ,EAAa;MACX,IAAIN,6BAAJ,EAAmC;QACjC;QACA;QACA,IAAI,OAAOO,YAAP,KAAwB,WAA5B,EAAyC;UACvCC,OAAO,CAACC,KAAR,CACE,4DACE,2DADF,GAEE,gEAFF,GAGE,oEAHF,GAIE,sFAJF,GAKE,+BANJ;QAQD;MACF;IACF;;IACD,IAAI,EAAE,eAAeN,IAAjB,CAAJ,EAA4B;MAC1B;MACA;MACA;MACAF,oBAAoB,GAClBA,oBAAoB,IAAIS,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAD1B;MAEAV,oBAAoB,CAACW,SAArB,GACE,UAAUR,IAAI,CAACS,OAAL,GAAeC,QAAf,EAAV,GAAsC,QADxC;MAEA,MAAMC,OAAO,GAAGd,oBAAoB,CAACe,UAArC;;MACA,OAAOb,IAAI,CAACa,UAAZ,EAAwB;QACtBb,IAAI,CAACc,WAAL,CAAiBd,IAAI,CAACa,UAAtB;MACD;;MACD,OAAOD,OAAO,CAACC,UAAf,EAA2B;QACzBb,IAAI,CAACe,WAAL,CAAiBH,OAAO,CAACC,UAAzB;MACD;;MACD;IACD;EACF;;EACDb,IAAI,CAACS,SAAL,GAAkBR,IAAlB;AACD,CAxCsD,CAAvD;AA0CA,eAAeF,YAAf"},"metadata":{},"sourceType":"module"}