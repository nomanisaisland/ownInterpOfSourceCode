{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\nimport { createRootStrictEffectsByDefault, enableCache, enableStrictEffects, enableProfilerTimer, enableScopeAPI, enableLegacyHidden, enableSyncDefaultUpdates, allowConcurrentByDefault, enableTransitionTracing, enableDebugTracing } from 'shared/ReactFeatureFlags';\nimport { supportsPersistence, getOffscreenContainerType } from './ReactFiberHostConfig';\nimport { NoFlags, Placement, StaticMask } from './ReactFiberFlags';\nimport { ConcurrentRoot } from './ReactRootTags';\nimport { IndeterminateComponent, ClassComponent, HostRoot, HostComponent, HostText, HostPortal, ForwardRef, Fragment, Mode, ContextProvider, ContextConsumer, Profiler, SuspenseComponent, SuspenseListComponent, DehydratedFragment, FunctionComponent, MemoComponent, SimpleMemoComponent, LazyComponent, ScopeComponent, OffscreenComponent, LegacyHiddenComponent, CacheComponent, TracingMarkerComponent } from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport { isDevToolsPresent } from './ReactFiberDevToolsHook.new';\nimport { resolveClassForHotReloading, resolveFunctionForHotReloading, resolveForwardRefForHotReloading } from './ReactFiberHotReloading.new';\nimport { NoLanes } from './ReactFiberLane.new';\nimport { NoMode, ConcurrentMode, DebugTracingMode, ProfileMode, StrictLegacyMode, StrictEffectsMode, ConcurrentUpdatesByDefaultMode } from './ReactTypeOfMode';\nimport { REACT_FORWARD_REF_TYPE, REACT_FRAGMENT_TYPE, REACT_DEBUG_TRACING_MODE_TYPE, REACT_STRICT_MODE_TYPE, REACT_PROFILER_TYPE, REACT_PROVIDER_TYPE, REACT_CONTEXT_TYPE, REACT_SUSPENSE_TYPE, REACT_SUSPENSE_LIST_TYPE, REACT_MEMO_TYPE, REACT_LAZY_TYPE, REACT_SCOPE_TYPE, REACT_OFFSCREEN_TYPE, REACT_LEGACY_HIDDEN_TYPE, REACT_CACHE_TYPE, REACT_TRACING_MARKER_TYPE } from 'shared/ReactSymbols';\nlet hasBadMapPolyfill;\n\nif (__DEV__) {\n  hasBadMapPolyfill = false;\n\n  try {\n    const nonExtensibleObject = Object.preventExtensions({});\n    /* eslint-disable no-new */\n\n    new Map([[nonExtensibleObject, null]]);\n    new Set([nonExtensibleObject]);\n    /* eslint-enable no-new */\n  } catch (e) {\n    // TODO: Consider warning about bad polyfills\n    hasBadMapPolyfill = true;\n  }\n}\n\nfunction FiberNode(tag, pendingProps, key, mode) {\n  // Instance\n  //作为静态的数据结构 保存节点的信息\n  this.tag = tag; //对应组件的类型\n\n  this.key = key; //key属性\n\n  this.elementType = null; //元素类型\n\n  this.type = null; //func或者class\n\n  this.stateNode = null; //真实dom节点\n  // Fiber\n  //作为fiber数架构 连接成fiber树\n\n  this.return = null; //指向父节点\n\n  this.child = null; //指向child\n\n  this.sibling = null; //指向兄弟节点\n\n  this.index = 0;\n  this.ref = null; //用作为工作单元 来计算state\n\n  this.pendingProps = pendingProps;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null;\n  this.dependencies = null;\n  this.mode = mode; // Effects\n  //effect相关\n\n  this.flags = NoFlags;\n  this.subtreeFlags = NoFlags;\n  this.deletions = null; //优先级相关的属性\n\n  this.lanes = NoLanes;\n  this.childLanes = NoLanes; //current和workInProgress的指针\n\n  this.alternate = null;\n\n  if (enableProfilerTimer) {\n    // Note: The following is done to avoid a v8 performance cliff.\n    //\n    // Initializing the fields below to smis and later updating them with\n    // double values will cause Fibers to end up having separate shapes.\n    // This behavior/bug has something to do with Object.preventExtension().\n    // Fortunately this only impacts DEV builds.\n    // Unfortunately it makes React unusably slow for some applications.\n    // To work around this, initialize the fields below with doubles.\n    //\n    // Learn more about this here:\n    // https://github.com/facebook/react/issues/14365\n    // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n    this.actualDuration = Number.NaN;\n    this.actualStartTime = Number.NaN;\n    this.selfBaseDuration = Number.NaN;\n    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.\n    // This won't trigger the performance cliff mentioned above,\n    // and it simplifies other profiler code (including DevTools).\n\n    this.actualDuration = 0;\n    this.actualStartTime = -1;\n    this.selfBaseDuration = 0;\n    this.treeBaseDuration = 0;\n  }\n\n  if (__DEV__) {\n    // This isn't directly used but is handy for debugging internals:\n    this._debugSource = null;\n    this._debugOwner = null;\n    this._debugNeedsRemount = false;\n    this._debugHookTypes = null;\n\n    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n      Object.preventExtensions(this);\n    }\n  }\n} // This is a constructor function, rather than a POJO constructor, still\n// please ensure we do the following:\n// 1) Nobody should add any instance methods on this. Instance methods can be\n//    more difficult to predict when they get optimized and they are almost\n//    never inlined properly in static compilers.\n// 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n//    always know when it is a fiber.\n// 3) We might want to experiment with using numeric keys since they are easier\n//    to optimize in a non-JIT environment.\n// 4) We can easily go from a constructor to a createFiber object literal if that\n//    is faster.\n// 5) It should be easy to port this to a C struct and keep a C implementation\n//    compatible.\n\n\n_c = FiberNode;\n\nconst createFiber = function (tag, pendingProps, key, mode) {\n  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\n  return new FiberNode(tag, pendingProps, key, mode);\n};\n\nfunction shouldConstruct(Component) {\n  const prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nexport function isSimpleFunctionComponent(type) {\n  return typeof type === 'function' && !shouldConstruct(type) && type.defaultProps === undefined;\n}\nexport function resolveLazyComponentTag(Component) {\n  if (typeof Component === 'function') {\n    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;\n  } else if (Component !== undefined && Component !== null) {\n    const $$typeof = Component.$$typeof;\n\n    if ($$typeof === REACT_FORWARD_REF_TYPE) {\n      return ForwardRef;\n    }\n\n    if ($$typeof === REACT_MEMO_TYPE) {\n      return MemoComponent;\n    }\n  }\n\n  return IndeterminateComponent;\n} // This is used to create an alternate fiber to do work on.\n\nexport function createWorkInProgress(current, pendingProps) {\n  let workInProgress = current.alternate;\n\n  if (workInProgress === null) {\n    // We use a double buffering pooling technique because we know that we'll\n    // only ever need at most two versions of a tree. We pool the \"other\" unused\n    // node that we're free to reuse. This is lazily created to avoid allocating\n    // extra objects for things that are never updated. It also allow us to\n    // reclaim the extra memory if needed.\n    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);\n    workInProgress.elementType = current.elementType;\n    workInProgress.type = current.type;\n    workInProgress.stateNode = current.stateNode;\n\n    if (__DEV__) {\n      // DEV-only fields\n      workInProgress._debugSource = current._debugSource;\n      workInProgress._debugOwner = current._debugOwner;\n      workInProgress._debugHookTypes = current._debugHookTypes;\n    }\n\n    workInProgress.alternate = current;\n    current.alternate = workInProgress;\n  } else {\n    workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.\n\n    workInProgress.type = current.type; // We already have an alternate.\n    // Reset the effect tag.\n\n    workInProgress.flags = NoFlags; // The effects are no longer valid.\n\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n\n    if (enableProfilerTimer) {\n      // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n      // This prevents time from endlessly accumulating in new commits.\n      // This has the downside of resetting values for different priority renders,\n      // But works for yielding (the common case) and should support resuming.\n      workInProgress.actualDuration = 0;\n      workInProgress.actualStartTime = -1;\n    }\n  } // Reset all effects except static ones.\n  // Static effects are not specific to a render.\n\n\n  workInProgress.flags = current.flags & StaticMask;\n  workInProgress.childLanes = current.childLanes;\n  workInProgress.lanes = current.lanes;\n  workInProgress.child = current.child;\n  workInProgress.memoizedProps = current.memoizedProps;\n  workInProgress.memoizedState = current.memoizedState;\n  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so\n  // it cannot be shared with the current fiber.\n\n  const currentDependencies = current.dependencies;\n  workInProgress.dependencies = currentDependencies === null ? null : {\n    lanes: currentDependencies.lanes,\n    firstContext: currentDependencies.firstContext\n  }; // These will be overridden during the parent's reconciliation\n\n  workInProgress.sibling = current.sibling;\n  workInProgress.index = current.index;\n  workInProgress.ref = current.ref;\n\n  if (enableProfilerTimer) {\n    workInProgress.selfBaseDuration = current.selfBaseDuration;\n    workInProgress.treeBaseDuration = current.treeBaseDuration;\n  }\n\n  if (__DEV__) {\n    workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n\n    switch (workInProgress.tag) {\n      case IndeterminateComponent:\n      case FunctionComponent:\n      case SimpleMemoComponent:\n        workInProgress.type = resolveFunctionForHotReloading(current.type);\n        break;\n\n      case ClassComponent:\n        workInProgress.type = resolveClassForHotReloading(current.type);\n        break;\n\n      case ForwardRef:\n        workInProgress.type = resolveForwardRefForHotReloading(current.type);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return workInProgress;\n} // Used to reuse a Fiber for a second pass.\n\nexport function resetWorkInProgress(workInProgress, renderLanes) {\n  // This resets the Fiber to what createFiber or createWorkInProgress would\n  // have set the values to before during the first pass. Ideally this wouldn't\n  // be necessary but unfortunately many code paths reads from the workInProgress\n  // when they should be reading from current and writing to workInProgress.\n  // We assume pendingProps, index, key, ref, return are still untouched to\n  // avoid doing another reconciliation.\n  // Reset the effect flags but keep any Placement tags, since that's something\n  // that child fiber is setting, not the reconciliation.\n  workInProgress.flags &= StaticMask | Placement; // The effects are no longer valid.\n\n  const current = workInProgress.alternate;\n\n  if (current === null) {\n    // Reset to createFiber's initial values.\n    workInProgress.childLanes = NoLanes;\n    workInProgress.lanes = renderLanes;\n    workInProgress.child = null;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.memoizedProps = null;\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n    workInProgress.dependencies = null;\n    workInProgress.stateNode = null;\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = 0;\n      workInProgress.treeBaseDuration = 0;\n    }\n  } else {\n    // Reset to the cloned values that createWorkInProgress would've.\n    workInProgress.childLanes = current.childLanes;\n    workInProgress.lanes = current.lanes;\n    workInProgress.child = current.child;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n    workInProgress.memoizedProps = current.memoizedProps;\n    workInProgress.memoizedState = current.memoizedState;\n    workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.\n\n    workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so\n    // it cannot be shared with the current fiber.\n\n    const currentDependencies = current.dependencies;\n    workInProgress.dependencies = currentDependencies === null ? null : {\n      lanes: currentDependencies.lanes,\n      firstContext: currentDependencies.firstContext\n    };\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = current.selfBaseDuration;\n      workInProgress.treeBaseDuration = current.treeBaseDuration;\n    }\n  }\n\n  return workInProgress;\n}\nexport function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {\n  let mode;\n\n  if (tag === ConcurrentRoot) {\n    mode = ConcurrentMode;\n\n    if (isStrictMode === true) {\n      mode |= StrictLegacyMode;\n\n      if (enableStrictEffects) {\n        mode |= StrictEffectsMode;\n      }\n    } else if (enableStrictEffects && createRootStrictEffectsByDefault) {\n      mode |= StrictLegacyMode | StrictEffectsMode;\n    }\n\n    if ( // We only use this flag for our repo tests to check both behaviors.\n    // TODO: Flip this flag and rename it something like \"forceConcurrentByDefaultForTesting\"\n    !enableSyncDefaultUpdates || // Only for internal experiments.\n    allowConcurrentByDefault && concurrentUpdatesByDefaultOverride) {\n      mode |= ConcurrentUpdatesByDefaultMode;\n    }\n  } else {\n    mode = NoMode;\n  }\n\n  if (enableProfilerTimer && isDevToolsPresent) {\n    // Always collect profile timings when DevTools are present.\n    // This enables DevTools to start capturing timing at any point–\n    // Without some nodes in the tree having empty base times.\n    mode |= ProfileMode;\n  }\n\n  return createFiber(HostRoot, null, null, mode);\n}\nexport function createFiberFromTypeAndProps(type, // React$ElementType\nkey, pendingProps, owner, mode, lanes) {\n  let fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n\n  let resolvedType = type;\n\n  if (typeof type === 'function') {\n    if (shouldConstruct(type)) {\n      fiberTag = ClassComponent;\n\n      if (__DEV__) {\n        resolvedType = resolveClassForHotReloading(resolvedType);\n      }\n    } else {\n      if (__DEV__) {\n        resolvedType = resolveFunctionForHotReloading(resolvedType);\n      }\n    }\n  } else if (typeof type === 'string') {\n    fiberTag = HostComponent;\n  } else {\n    getTag: switch (type) {\n      case REACT_FRAGMENT_TYPE:\n        return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n\n      case REACT_STRICT_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= StrictLegacyMode;\n\n        if (enableStrictEffects && (mode & ConcurrentMode) !== NoMode) {\n          // Strict effects should never run on legacy roots\n          mode |= StrictEffectsMode;\n        }\n\n        break;\n\n      case REACT_PROFILER_TYPE:\n        return createFiberFromProfiler(pendingProps, mode, lanes, key);\n\n      case REACT_SUSPENSE_TYPE:\n        return createFiberFromSuspense(pendingProps, mode, lanes, key);\n\n      case REACT_SUSPENSE_LIST_TYPE:\n        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n\n      case REACT_OFFSCREEN_TYPE:\n        return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n\n      case REACT_LEGACY_HIDDEN_TYPE:\n        if (enableLegacyHidden) {\n          return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);\n        }\n\n      // eslint-disable-next-line no-fallthrough\n\n      case REACT_SCOPE_TYPE:\n        if (enableScopeAPI) {\n          return createFiberFromScope(type, pendingProps, mode, lanes, key);\n        }\n\n      // eslint-disable-next-line no-fallthrough\n\n      case REACT_CACHE_TYPE:\n        if (enableCache) {\n          return createFiberFromCache(pendingProps, mode, lanes, key);\n        }\n\n      // eslint-disable-next-line no-fallthrough\n\n      case REACT_TRACING_MARKER_TYPE:\n        if (enableTransitionTracing) {\n          return createFiberFromTracingMarker(pendingProps, mode, lanes, key);\n        }\n\n      // eslint-disable-next-line no-fallthrough\n\n      case REACT_DEBUG_TRACING_MODE_TYPE:\n        if (enableDebugTracing) {\n          fiberTag = Mode;\n          mode |= DebugTracingMode;\n          break;\n        }\n\n      // eslint-disable-next-line no-fallthrough\n\n      default:\n        {\n          if (typeof type === 'object' && type !== null) {\n            switch (type.$$typeof) {\n              case REACT_PROVIDER_TYPE:\n                fiberTag = ContextProvider;\n                break getTag;\n\n              case REACT_CONTEXT_TYPE:\n                // This is a consumer\n                fiberTag = ContextConsumer;\n                break getTag;\n\n              case REACT_FORWARD_REF_TYPE:\n                fiberTag = ForwardRef;\n\n                if (__DEV__) {\n                  resolvedType = resolveForwardRefForHotReloading(resolvedType);\n                }\n\n                break getTag;\n\n              case REACT_MEMO_TYPE:\n                fiberTag = MemoComponent;\n                break getTag;\n\n              case REACT_LAZY_TYPE:\n                fiberTag = LazyComponent;\n                resolvedType = null;\n                break getTag;\n            }\n          }\n\n          let info = '';\n\n          if (__DEV__) {\n            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n              info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and \" + 'named imports.';\n            }\n\n            const ownerName = owner ? getComponentNameFromFiber(owner) : null;\n\n            if (ownerName) {\n              info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n            }\n          }\n\n          throw new Error('Element type is invalid: expected a string (for built-in ' + 'components) or a class/function (for composite components) ' + `but got: ${type == null ? type : typeof type}.${info}`);\n        }\n    }\n  }\n\n  const fiber = createFiber(fiberTag, pendingProps, key, mode);\n  fiber.elementType = type;\n  fiber.type = resolvedType;\n  fiber.lanes = lanes;\n\n  if (__DEV__) {\n    fiber._debugOwner = owner;\n  }\n\n  return fiber;\n}\nexport function createOffscreenHostContainerFiber(props, fiberMode, lanes, key) {\n  if (supportsPersistence) {\n    const type = getOffscreenContainerType();\n    const fiber = createFiber(HostComponent, props, key, fiberMode);\n    fiber.elementType = type;\n    fiber.type = type;\n    fiber.lanes = lanes;\n    return fiber;\n  } else {\n    // Only implemented in persistent mode\n    throw new Error('Not implemented.');\n  }\n}\nexport function createFiberFromElement(element, mode, lanes) {\n  let owner = null;\n\n  if (__DEV__) {\n    owner = element._owner;\n  }\n\n  const type = element.type;\n  const key = element.key;\n  const pendingProps = element.props;\n  const fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);\n\n  if (__DEV__) {\n    fiber._debugSource = element._source;\n    fiber._debugOwner = element._owner;\n  }\n\n  return fiber;\n}\nexport function createFiberFromFragment(elements, mode, lanes, key) {\n  const fiber = createFiber(Fragment, elements, key, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromScope(scope, pendingProps, mode, lanes, key) {\n  const fiber = createFiber(ScopeComponent, pendingProps, key, mode);\n  fiber.type = scope;\n  fiber.elementType = scope;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromProfiler(pendingProps, mode, lanes, key) {\n  if (__DEV__) {\n    if (typeof pendingProps.id !== 'string') {\n      console.error('Profiler must specify an \"id\" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);\n    }\n  }\n\n  const fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n  fiber.elementType = REACT_PROFILER_TYPE;\n  fiber.lanes = lanes;\n\n  if (enableProfilerTimer) {\n    fiber.stateNode = {\n      effectDuration: 0,\n      passiveEffectDuration: 0\n    };\n  }\n\n  return fiber;\n}\n\nexport function createFiberFromSuspense(pendingProps, mode, lanes, key) {\n  const fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\nexport function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {\n  const fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\nexport function createFiberFromOffscreen(pendingProps, mode, lanes, key) {\n  const fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_OFFSCREEN_TYPE;\n  fiber.lanes = lanes;\n  const primaryChildInstance = {};\n  fiber.stateNode = primaryChildInstance;\n  return fiber;\n}\nexport function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {\n  const fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\nexport function createFiberFromCache(pendingProps, mode, lanes, key) {\n  const fiber = createFiber(CacheComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_CACHE_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\nexport function createFiberFromTracingMarker(pendingProps, mode, lanes, key) {\n  const fiber = createFiber(TracingMarkerComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_TRACING_MARKER_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\nexport function createFiberFromText(content, mode, lanes) {\n  const fiber = createFiber(HostText, content, null, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\nexport function createFiberFromHostInstanceForDeletion() {\n  const fiber = createFiber(HostComponent, null, null, NoMode);\n  fiber.elementType = 'DELETED';\n  return fiber;\n}\nexport function createFiberFromDehydratedFragment(dehydratedNode) {\n  const fiber = createFiber(DehydratedFragment, null, null, NoMode);\n  fiber.stateNode = dehydratedNode;\n  return fiber;\n}\nexport function createFiberFromPortal(portal, mode, lanes) {\n  const pendingProps = portal.children !== null ? portal.children : [];\n  const fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n  fiber.lanes = lanes;\n  fiber.stateNode = {\n    containerInfo: portal.containerInfo,\n    pendingChildren: null,\n    // Used by persistent updates\n    implementation: portal.implementation\n  };\n  return fiber;\n} // Used for stashing WIP properties to replay failed work in DEV.\n\nexport function assignFiberPropertiesInDEV(target, source) {\n  if (target === null) {\n    // This Fiber's initial properties will always be overwritten.\n    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\n    target = createFiber(IndeterminateComponent, null, null, NoMode);\n  } // This is intentionally written as a list of all properties.\n  // We tried to use Object.assign() instead but this is called in\n  // the hottest path, and Object.assign() was too slow:\n  // https://github.com/facebook/react/issues/12502\n  // This code is DEV-only so size is not a concern.\n\n\n  target.tag = source.tag;\n  target.key = source.key;\n  target.elementType = source.elementType;\n  target.type = source.type;\n  target.stateNode = source.stateNode;\n  target.return = source.return;\n  target.child = source.child;\n  target.sibling = source.sibling;\n  target.index = source.index;\n  target.ref = source.ref;\n  target.pendingProps = source.pendingProps;\n  target.memoizedProps = source.memoizedProps;\n  target.updateQueue = source.updateQueue;\n  target.memoizedState = source.memoizedState;\n  target.dependencies = source.dependencies;\n  target.mode = source.mode;\n  target.flags = source.flags;\n  target.subtreeFlags = source.subtreeFlags;\n  target.deletions = source.deletions;\n  target.lanes = source.lanes;\n  target.childLanes = source.childLanes;\n  target.alternate = source.alternate;\n\n  if (enableProfilerTimer) {\n    target.actualDuration = source.actualDuration;\n    target.actualStartTime = source.actualStartTime;\n    target.selfBaseDuration = source.selfBaseDuration;\n    target.treeBaseDuration = source.treeBaseDuration;\n  }\n\n  target._debugSource = source._debugSource;\n  target._debugOwner = source._debugOwner;\n  target._debugNeedsRemount = source._debugNeedsRemount;\n  target._debugHookTypes = source._debugHookTypes;\n  return target;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"FiberNode\");","map":{"version":3,"names":["createRootStrictEffectsByDefault","enableCache","enableStrictEffects","enableProfilerTimer","enableScopeAPI","enableLegacyHidden","enableSyncDefaultUpdates","allowConcurrentByDefault","enableTransitionTracing","enableDebugTracing","supportsPersistence","getOffscreenContainerType","NoFlags","Placement","StaticMask","ConcurrentRoot","IndeterminateComponent","ClassComponent","HostRoot","HostComponent","HostText","HostPortal","ForwardRef","Fragment","Mode","ContextProvider","ContextConsumer","Profiler","SuspenseComponent","SuspenseListComponent","DehydratedFragment","FunctionComponent","MemoComponent","SimpleMemoComponent","LazyComponent","ScopeComponent","OffscreenComponent","LegacyHiddenComponent","CacheComponent","TracingMarkerComponent","getComponentNameFromFiber","isDevToolsPresent","resolveClassForHotReloading","resolveFunctionForHotReloading","resolveForwardRefForHotReloading","NoLanes","NoMode","ConcurrentMode","DebugTracingMode","ProfileMode","StrictLegacyMode","StrictEffectsMode","ConcurrentUpdatesByDefaultMode","REACT_FORWARD_REF_TYPE","REACT_FRAGMENT_TYPE","REACT_DEBUG_TRACING_MODE_TYPE","REACT_STRICT_MODE_TYPE","REACT_PROFILER_TYPE","REACT_PROVIDER_TYPE","REACT_CONTEXT_TYPE","REACT_SUSPENSE_TYPE","REACT_SUSPENSE_LIST_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","REACT_SCOPE_TYPE","REACT_OFFSCREEN_TYPE","REACT_LEGACY_HIDDEN_TYPE","REACT_CACHE_TYPE","REACT_TRACING_MARKER_TYPE","hasBadMapPolyfill","__DEV__","nonExtensibleObject","Object","preventExtensions","Map","Set","e","FiberNode","tag","pendingProps","key","mode","elementType","type","stateNode","return","child","sibling","index","ref","memoizedProps","updateQueue","memoizedState","dependencies","flags","subtreeFlags","deletions","lanes","childLanes","alternate","actualDuration","Number","NaN","actualStartTime","selfBaseDuration","treeBaseDuration","_debugSource","_debugOwner","_debugNeedsRemount","_debugHookTypes","createFiber","shouldConstruct","Component","prototype","isReactComponent","isSimpleFunctionComponent","defaultProps","undefined","resolveLazyComponentTag","$$typeof","createWorkInProgress","current","workInProgress","currentDependencies","firstContext","resetWorkInProgress","renderLanes","createHostRootFiber","isStrictMode","concurrentUpdatesByDefaultOverride","createFiberFromTypeAndProps","owner","fiberTag","resolvedType","getTag","createFiberFromFragment","children","createFiberFromProfiler","createFiberFromSuspense","createFiberFromSuspenseList","createFiberFromOffscreen","createFiberFromLegacyHidden","createFiberFromScope","createFiberFromCache","createFiberFromTracingMarker","info","keys","length","ownerName","Error","fiber","createOffscreenHostContainerFiber","props","fiberMode","createFiberFromElement","element","_owner","_source","elements","scope","id","console","error","effectDuration","passiveEffectDuration","primaryChildInstance","createFiberFromText","content","createFiberFromHostInstanceForDeletion","createFiberFromDehydratedFragment","dehydratedNode","createFiberFromPortal","portal","containerInfo","pendingChildren","implementation","assignFiberPropertiesInDEV","target","source"],"sources":["E:/debug-anything/react-test/src/react/packages/react-reconciler/src/ReactFiber.new.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type { ReactElement } from 'shared/ReactElementType';\r\nimport type { ReactFragment, ReactPortal, ReactScope } from 'shared/ReactTypes';\r\nimport type { Fiber } from './ReactInternalTypes';\r\nimport type { RootTag } from './ReactRootTags';\r\nimport type { WorkTag } from './ReactWorkTags';\r\nimport type { TypeOfMode } from './ReactTypeOfMode';\r\nimport type { Lanes } from './ReactFiberLane.new';\r\nimport type { SuspenseInstance, Props } from './ReactFiberHostConfig';\r\nimport type {\r\n  OffscreenProps,\r\n  OffscreenInstance,\r\n} from './ReactFiberOffscreenComponent';\r\n\r\nimport {\r\n  createRootStrictEffectsByDefault,\r\n  enableCache,\r\n  enableStrictEffects,\r\n  enableProfilerTimer,\r\n  enableScopeAPI,\r\n  enableLegacyHidden,\r\n  enableSyncDefaultUpdates,\r\n  allowConcurrentByDefault,\r\n  enableTransitionTracing,\r\n  enableDebugTracing,\r\n} from 'shared/ReactFeatureFlags';\r\nimport {\r\n  supportsPersistence,\r\n  getOffscreenContainerType,\r\n} from './ReactFiberHostConfig';\r\nimport { NoFlags, Placement, StaticMask } from './ReactFiberFlags';\r\nimport { ConcurrentRoot } from './ReactRootTags';\r\nimport {\r\n  IndeterminateComponent,\r\n  ClassComponent,\r\n  HostRoot,\r\n  HostComponent,\r\n  HostText,\r\n  HostPortal,\r\n  ForwardRef,\r\n  Fragment,\r\n  Mode,\r\n  ContextProvider,\r\n  ContextConsumer,\r\n  Profiler,\r\n  SuspenseComponent,\r\n  SuspenseListComponent,\r\n  DehydratedFragment,\r\n  FunctionComponent,\r\n  MemoComponent,\r\n  SimpleMemoComponent,\r\n  LazyComponent,\r\n  ScopeComponent,\r\n  OffscreenComponent,\r\n  LegacyHiddenComponent,\r\n  CacheComponent,\r\n  TracingMarkerComponent,\r\n} from './ReactWorkTags';\r\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\r\n\r\nimport { isDevToolsPresent } from './ReactFiberDevToolsHook.new';\r\nimport {\r\n  resolveClassForHotReloading,\r\n  resolveFunctionForHotReloading,\r\n  resolveForwardRefForHotReloading,\r\n} from './ReactFiberHotReloading.new';\r\nimport { NoLanes } from './ReactFiberLane.new';\r\nimport {\r\n  NoMode,\r\n  ConcurrentMode,\r\n  DebugTracingMode,\r\n  ProfileMode,\r\n  StrictLegacyMode,\r\n  StrictEffectsMode,\r\n  ConcurrentUpdatesByDefaultMode,\r\n} from './ReactTypeOfMode';\r\nimport {\r\n  REACT_FORWARD_REF_TYPE,\r\n  REACT_FRAGMENT_TYPE,\r\n  REACT_DEBUG_TRACING_MODE_TYPE,\r\n  REACT_STRICT_MODE_TYPE,\r\n  REACT_PROFILER_TYPE,\r\n  REACT_PROVIDER_TYPE,\r\n  REACT_CONTEXT_TYPE,\r\n  REACT_SUSPENSE_TYPE,\r\n  REACT_SUSPENSE_LIST_TYPE,\r\n  REACT_MEMO_TYPE,\r\n  REACT_LAZY_TYPE,\r\n  REACT_SCOPE_TYPE,\r\n  REACT_OFFSCREEN_TYPE,\r\n  REACT_LEGACY_HIDDEN_TYPE,\r\n  REACT_CACHE_TYPE,\r\n  REACT_TRACING_MARKER_TYPE,\r\n} from 'shared/ReactSymbols';\r\n\r\nexport type { Fiber };\r\n\r\nlet hasBadMapPolyfill;\r\n\r\nif (__DEV__) {\r\n  hasBadMapPolyfill = false;\r\n  try {\r\n    const nonExtensibleObject = Object.preventExtensions({});\r\n    /* eslint-disable no-new */\r\n    new Map([[nonExtensibleObject, null]]);\r\n    new Set([nonExtensibleObject]);\r\n    /* eslint-enable no-new */\r\n  } catch (e) {\r\n    // TODO: Consider warning about bad polyfills\r\n    hasBadMapPolyfill = true;\r\n  }\r\n}\r\n\r\nfunction FiberNode (\r\n  tag: WorkTag,\r\n  pendingProps: mixed,\r\n  key: null | string,\r\n  mode: TypeOfMode,\r\n) {\r\n  // Instance\r\n  //作为静态的数据结构 保存节点的信息\r\n  this.tag = tag; //对应组件的类型\r\n  this.key = key;//key属性\r\n  this.elementType = null; //元素类型\r\n  this.type = null; //func或者class\r\n  this.stateNode = null; //真实dom节点\r\n\r\n  // Fiber\r\n  //作为fiber数架构 连接成fiber树\r\n  this.return = null;//指向父节点\r\n  this.child = null;//指向child\r\n  this.sibling = null;//指向兄弟节点\r\n  this.index = 0;\r\n\r\n  this.ref = null;\r\n  //用作为工作单元 来计算state\r\n  this.pendingProps = pendingProps;\r\n  this.memoizedProps = null;\r\n  this.updateQueue = null;\r\n  this.memoizedState = null;\r\n  this.dependencies = null;\r\n\r\n  this.mode = mode;\r\n\r\n  // Effects\r\n  //effect相关\r\n  this.flags = NoFlags;\r\n  this.subtreeFlags = NoFlags;\r\n  this.deletions = null;\r\n  //优先级相关的属性\r\n  this.lanes = NoLanes;\r\n  this.childLanes = NoLanes;\r\n//current和workInProgress的指针\r\n  this.alternate = null;\r\n\r\n  if (enableProfilerTimer) {\r\n    // Note: The following is done to avoid a v8 performance cliff.\r\n    //\r\n    // Initializing the fields below to smis and later updating them with\r\n    // double values will cause Fibers to end up having separate shapes.\r\n    // This behavior/bug has something to do with Object.preventExtension().\r\n    // Fortunately this only impacts DEV builds.\r\n    // Unfortunately it makes React unusably slow for some applications.\r\n    // To work around this, initialize the fields below with doubles.\r\n    //\r\n    // Learn more about this here:\r\n    // https://github.com/facebook/react/issues/14365\r\n    // https://bugs.chromium.org/p/v8/issues/detail?id=8538\r\n    this.actualDuration = Number.NaN;\r\n    this.actualStartTime = Number.NaN;\r\n    this.selfBaseDuration = Number.NaN;\r\n    this.treeBaseDuration = Number.NaN;\r\n\r\n    // It's okay to replace the initial doubles with smis after initialization.\r\n    // This won't trigger the performance cliff mentioned above,\r\n    // and it simplifies other profiler code (including DevTools).\r\n    this.actualDuration = 0;\r\n    this.actualStartTime = -1;\r\n    this.selfBaseDuration = 0;\r\n    this.treeBaseDuration = 0;\r\n  }\r\n\r\n  if (__DEV__) {\r\n    // This isn't directly used but is handy for debugging internals:\r\n\r\n    this._debugSource = null;\r\n    this._debugOwner = null;\r\n    this._debugNeedsRemount = false;\r\n    this._debugHookTypes = null;\r\n    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\r\n      Object.preventExtensions(this);\r\n    }\r\n  }\r\n}\r\n\r\n// This is a constructor function, rather than a POJO constructor, still\r\n// please ensure we do the following:\r\n// 1) Nobody should add any instance methods on this. Instance methods can be\r\n//    more difficult to predict when they get optimized and they are almost\r\n//    never inlined properly in static compilers.\r\n// 2) Nobody should rely on `instanceof Fiber` for type testing. We should\r\n//    always know when it is a fiber.\r\n// 3) We might want to experiment with using numeric keys since they are easier\r\n//    to optimize in a non-JIT environment.\r\n// 4) We can easily go from a constructor to a createFiber object literal if that\r\n//    is faster.\r\n// 5) It should be easy to port this to a C struct and keep a C implementation\r\n//    compatible.\r\nconst createFiber = function (\r\n  tag: WorkTag,\r\n  pendingProps: mixed,\r\n  key: null | string,\r\n  mode: TypeOfMode,\r\n): Fiber {\r\n  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\r\n  return new FiberNode(tag, pendingProps, key, mode);\r\n};\r\n\r\nfunction shouldConstruct (Component: Function) {\r\n  const prototype = Component.prototype;\r\n  return !!(prototype && prototype.isReactComponent);\r\n}\r\n\r\nexport function isSimpleFunctionComponent (type: any) {\r\n  return (\r\n    typeof type === 'function' &&\r\n    !shouldConstruct(type) &&\r\n    type.defaultProps === undefined\r\n  );\r\n}\r\n\r\nexport function resolveLazyComponentTag (Component: Function): WorkTag {\r\n  if (typeof Component === 'function') {\r\n    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;\r\n  } else if (Component !== undefined && Component !== null) {\r\n    const $$typeof = Component.$$typeof;\r\n    if ($$typeof === REACT_FORWARD_REF_TYPE) {\r\n      return ForwardRef;\r\n    }\r\n    if ($$typeof === REACT_MEMO_TYPE) {\r\n      return MemoComponent;\r\n    }\r\n  }\r\n  return IndeterminateComponent;\r\n}\r\n\r\n// This is used to create an alternate fiber to do work on.\r\nexport function createWorkInProgress (current: Fiber, pendingProps: any): Fiber {\r\n  let workInProgress = current.alternate;\r\n  if (workInProgress === null) {\r\n    // We use a double buffering pooling technique because we know that we'll\r\n    // only ever need at most two versions of a tree. We pool the \"other\" unused\r\n    // node that we're free to reuse. This is lazily created to avoid allocating\r\n    // extra objects for things that are never updated. It also allow us to\r\n    // reclaim the extra memory if needed.\r\n    workInProgress = createFiber(\r\n      current.tag,\r\n      pendingProps,\r\n      current.key,\r\n      current.mode,\r\n    );\r\n    workInProgress.elementType = current.elementType;\r\n    workInProgress.type = current.type;\r\n    workInProgress.stateNode = current.stateNode;\r\n\r\n    if (__DEV__) {\r\n      // DEV-only fields\r\n\r\n      workInProgress._debugSource = current._debugSource;\r\n      workInProgress._debugOwner = current._debugOwner;\r\n      workInProgress._debugHookTypes = current._debugHookTypes;\r\n    }\r\n\r\n    workInProgress.alternate = current;\r\n    current.alternate = workInProgress;\r\n  } else {\r\n    workInProgress.pendingProps = pendingProps;\r\n    // Needed because Blocks store data on type.\r\n    workInProgress.type = current.type;\r\n\r\n    // We already have an alternate.\r\n    // Reset the effect tag.\r\n    workInProgress.flags = NoFlags;\r\n\r\n    // The effects are no longer valid.\r\n    workInProgress.subtreeFlags = NoFlags;\r\n    workInProgress.deletions = null;\r\n\r\n    if (enableProfilerTimer) {\r\n      // We intentionally reset, rather than copy, actualDuration & actualStartTime.\r\n      // This prevents time from endlessly accumulating in new commits.\r\n      // This has the downside of resetting values for different priority renders,\r\n      // But works for yielding (the common case) and should support resuming.\r\n      workInProgress.actualDuration = 0;\r\n      workInProgress.actualStartTime = -1;\r\n    }\r\n  }\r\n\r\n  // Reset all effects except static ones.\r\n  // Static effects are not specific to a render.\r\n  workInProgress.flags = current.flags & StaticMask;\r\n  workInProgress.childLanes = current.childLanes;\r\n  workInProgress.lanes = current.lanes;\r\n\r\n  workInProgress.child = current.child;\r\n  workInProgress.memoizedProps = current.memoizedProps;\r\n  workInProgress.memoizedState = current.memoizedState;\r\n  workInProgress.updateQueue = current.updateQueue;\r\n\r\n  // Clone the dependencies object. This is mutated during the render phase, so\r\n  // it cannot be shared with the current fiber.\r\n  const currentDependencies = current.dependencies;\r\n  workInProgress.dependencies =\r\n    currentDependencies === null\r\n      ? null\r\n      : {\r\n        lanes: currentDependencies.lanes,\r\n        firstContext: currentDependencies.firstContext,\r\n      };\r\n\r\n  // These will be overridden during the parent's reconciliation\r\n  workInProgress.sibling = current.sibling;\r\n  workInProgress.index = current.index;\r\n  workInProgress.ref = current.ref;\r\n\r\n  if (enableProfilerTimer) {\r\n    workInProgress.selfBaseDuration = current.selfBaseDuration;\r\n    workInProgress.treeBaseDuration = current.treeBaseDuration;\r\n  }\r\n\r\n  if (__DEV__) {\r\n    workInProgress._debugNeedsRemount = current._debugNeedsRemount;\r\n    switch (workInProgress.tag) {\r\n      case IndeterminateComponent:\r\n      case FunctionComponent:\r\n      case SimpleMemoComponent:\r\n        workInProgress.type = resolveFunctionForHotReloading(current.type);\r\n        break;\r\n      case ClassComponent:\r\n        workInProgress.type = resolveClassForHotReloading(current.type);\r\n        break;\r\n      case ForwardRef:\r\n        workInProgress.type = resolveForwardRefForHotReloading(current.type);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  return workInProgress;\r\n}\r\n\r\n// Used to reuse a Fiber for a second pass.\r\nexport function resetWorkInProgress (workInProgress: Fiber, renderLanes: Lanes) {\r\n  // This resets the Fiber to what createFiber or createWorkInProgress would\r\n  // have set the values to before during the first pass. Ideally this wouldn't\r\n  // be necessary but unfortunately many code paths reads from the workInProgress\r\n  // when they should be reading from current and writing to workInProgress.\r\n\r\n  // We assume pendingProps, index, key, ref, return are still untouched to\r\n  // avoid doing another reconciliation.\r\n\r\n  // Reset the effect flags but keep any Placement tags, since that's something\r\n  // that child fiber is setting, not the reconciliation.\r\n  workInProgress.flags &= StaticMask | Placement;\r\n\r\n  // The effects are no longer valid.\r\n\r\n  const current = workInProgress.alternate;\r\n  if (current === null) {\r\n    // Reset to createFiber's initial values.\r\n    workInProgress.childLanes = NoLanes;\r\n    workInProgress.lanes = renderLanes;\r\n\r\n    workInProgress.child = null;\r\n    workInProgress.subtreeFlags = NoFlags;\r\n    workInProgress.memoizedProps = null;\r\n    workInProgress.memoizedState = null;\r\n    workInProgress.updateQueue = null;\r\n\r\n    workInProgress.dependencies = null;\r\n\r\n    workInProgress.stateNode = null;\r\n\r\n    if (enableProfilerTimer) {\r\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\r\n      // actual time across multiple render passes.\r\n      workInProgress.selfBaseDuration = 0;\r\n      workInProgress.treeBaseDuration = 0;\r\n    }\r\n  } else {\r\n    // Reset to the cloned values that createWorkInProgress would've.\r\n    workInProgress.childLanes = current.childLanes;\r\n    workInProgress.lanes = current.lanes;\r\n\r\n    workInProgress.child = current.child;\r\n    workInProgress.subtreeFlags = NoFlags;\r\n    workInProgress.deletions = null;\r\n    workInProgress.memoizedProps = current.memoizedProps;\r\n    workInProgress.memoizedState = current.memoizedState;\r\n    workInProgress.updateQueue = current.updateQueue;\r\n    // Needed because Blocks store data on type.\r\n    workInProgress.type = current.type;\r\n\r\n    // Clone the dependencies object. This is mutated during the render phase, so\r\n    // it cannot be shared with the current fiber.\r\n    const currentDependencies = current.dependencies;\r\n    workInProgress.dependencies =\r\n      currentDependencies === null\r\n        ? null\r\n        : {\r\n          lanes: currentDependencies.lanes,\r\n          firstContext: currentDependencies.firstContext,\r\n        };\r\n\r\n    if (enableProfilerTimer) {\r\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\r\n      // actual time across multiple render passes.\r\n      workInProgress.selfBaseDuration = current.selfBaseDuration;\r\n      workInProgress.treeBaseDuration = current.treeBaseDuration;\r\n    }\r\n  }\r\n\r\n  return workInProgress;\r\n}\r\n\r\nexport function createHostRootFiber (\r\n  tag: RootTag,\r\n  isStrictMode: boolean,\r\n  concurrentUpdatesByDefaultOverride: null | boolean,\r\n): Fiber {\r\n  let mode;\r\n  if (tag === ConcurrentRoot) {\r\n    mode = ConcurrentMode;\r\n    if (isStrictMode === true) {\r\n      mode |= StrictLegacyMode;\r\n\r\n      if (enableStrictEffects) {\r\n        mode |= StrictEffectsMode;\r\n      }\r\n    } else if (enableStrictEffects && createRootStrictEffectsByDefault) {\r\n      mode |= StrictLegacyMode | StrictEffectsMode;\r\n    }\r\n    if (\r\n      // We only use this flag for our repo tests to check both behaviors.\r\n      // TODO: Flip this flag and rename it something like \"forceConcurrentByDefaultForTesting\"\r\n      !enableSyncDefaultUpdates ||\r\n      // Only for internal experiments.\r\n      (allowConcurrentByDefault && concurrentUpdatesByDefaultOverride)\r\n    ) {\r\n      mode |= ConcurrentUpdatesByDefaultMode;\r\n    }\r\n  } else {\r\n    mode = NoMode;\r\n  }\r\n\r\n  if (enableProfilerTimer && isDevToolsPresent) {\r\n    // Always collect profile timings when DevTools are present.\r\n    // This enables DevTools to start capturing timing at any point–\r\n    // Without some nodes in the tree having empty base times.\r\n    mode |= ProfileMode;\r\n  }\r\n\r\n  return createFiber(HostRoot, null, null, mode);\r\n}\r\n\r\nexport function createFiberFromTypeAndProps (\r\n  type: any, // React$ElementType\r\n  key: null | string,\r\n  pendingProps: any,\r\n  owner: null | Fiber,\r\n  mode: TypeOfMode,\r\n  lanes: Lanes,\r\n): Fiber {\r\n  let fiberTag = IndeterminateComponent;\r\n  // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\r\n  let resolvedType = type;\r\n  if (typeof type === 'function') {\r\n    if (shouldConstruct(type)) {\r\n      fiberTag = ClassComponent;\r\n      if (__DEV__) {\r\n        resolvedType = resolveClassForHotReloading(resolvedType);\r\n      }\r\n    } else {\r\n      if (__DEV__) {\r\n        resolvedType = resolveFunctionForHotReloading(resolvedType);\r\n      }\r\n    }\r\n  } else if (typeof type === 'string') {\r\n    fiberTag = HostComponent;\r\n  } else {\r\n    getTag: switch (type) {\r\n      case REACT_FRAGMENT_TYPE:\r\n        return createFiberFromFragment(pendingProps.children, mode, lanes, key);\r\n      case REACT_STRICT_MODE_TYPE:\r\n        fiberTag = Mode;\r\n        mode |= StrictLegacyMode;\r\n        if (enableStrictEffects && (mode & ConcurrentMode) !== NoMode) {\r\n          // Strict effects should never run on legacy roots\r\n          mode |= StrictEffectsMode;\r\n        }\r\n        break;\r\n      case REACT_PROFILER_TYPE:\r\n        return createFiberFromProfiler(pendingProps, mode, lanes, key);\r\n      case REACT_SUSPENSE_TYPE:\r\n        return createFiberFromSuspense(pendingProps, mode, lanes, key);\r\n      case REACT_SUSPENSE_LIST_TYPE:\r\n        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\r\n      case REACT_OFFSCREEN_TYPE:\r\n        return createFiberFromOffscreen(pendingProps, mode, lanes, key);\r\n      case REACT_LEGACY_HIDDEN_TYPE:\r\n        if (enableLegacyHidden) {\r\n          return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);\r\n        }\r\n      // eslint-disable-next-line no-fallthrough\r\n      case REACT_SCOPE_TYPE:\r\n        if (enableScopeAPI) {\r\n          return createFiberFromScope(type, pendingProps, mode, lanes, key);\r\n        }\r\n      // eslint-disable-next-line no-fallthrough\r\n      case REACT_CACHE_TYPE:\r\n        if (enableCache) {\r\n          return createFiberFromCache(pendingProps, mode, lanes, key);\r\n        }\r\n      // eslint-disable-next-line no-fallthrough\r\n      case REACT_TRACING_MARKER_TYPE:\r\n        if (enableTransitionTracing) {\r\n          return createFiberFromTracingMarker(pendingProps, mode, lanes, key);\r\n        }\r\n      // eslint-disable-next-line no-fallthrough\r\n      case REACT_DEBUG_TRACING_MODE_TYPE:\r\n        if (enableDebugTracing) {\r\n          fiberTag = Mode;\r\n          mode |= DebugTracingMode;\r\n          break;\r\n        }\r\n      // eslint-disable-next-line no-fallthrough\r\n      default: {\r\n        if (typeof type === 'object' && type !== null) {\r\n          switch (type.$$typeof) {\r\n            case REACT_PROVIDER_TYPE:\r\n              fiberTag = ContextProvider;\r\n              break getTag;\r\n            case REACT_CONTEXT_TYPE:\r\n              // This is a consumer\r\n              fiberTag = ContextConsumer;\r\n              break getTag;\r\n            case REACT_FORWARD_REF_TYPE:\r\n              fiberTag = ForwardRef;\r\n              if (__DEV__) {\r\n                resolvedType = resolveForwardRefForHotReloading(resolvedType);\r\n              }\r\n              break getTag;\r\n            case REACT_MEMO_TYPE:\r\n              fiberTag = MemoComponent;\r\n              break getTag;\r\n            case REACT_LAZY_TYPE:\r\n              fiberTag = LazyComponent;\r\n              resolvedType = null;\r\n              break getTag;\r\n          }\r\n        }\r\n        let info = '';\r\n        if (__DEV__) {\r\n          if (\r\n            type === undefined ||\r\n            (typeof type === 'object' &&\r\n              type !== null &&\r\n              Object.keys(type).length === 0)\r\n          ) {\r\n            info +=\r\n              ' You likely forgot to export your component from the file ' +\r\n              \"it's defined in, or you might have mixed up default and \" +\r\n              'named imports.';\r\n          }\r\n          const ownerName = owner ? getComponentNameFromFiber(owner) : null;\r\n          if (ownerName) {\r\n            info += '\\n\\nCheck the render method of `' + ownerName + '`.';\r\n          }\r\n        }\r\n\r\n        throw new Error(\r\n          'Element type is invalid: expected a string (for built-in ' +\r\n          'components) or a class/function (for composite components) ' +\r\n          `but got: ${type == null ? type : typeof type}.${info}`,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  const fiber = createFiber(fiberTag, pendingProps, key, mode);\r\n  fiber.elementType = type;\r\n  fiber.type = resolvedType;\r\n  fiber.lanes = lanes;\r\n\r\n  if (__DEV__) {\r\n    fiber._debugOwner = owner;\r\n  }\r\n\r\n  return fiber;\r\n}\r\n\r\nexport function createOffscreenHostContainerFiber (\r\n  props: Props,\r\n  fiberMode: TypeOfMode,\r\n  lanes: Lanes,\r\n  key: null | string,\r\n): Fiber {\r\n  if (supportsPersistence) {\r\n    const type = getOffscreenContainerType();\r\n    const fiber = createFiber(HostComponent, props, key, fiberMode);\r\n    fiber.elementType = type;\r\n    fiber.type = type;\r\n    fiber.lanes = lanes;\r\n    return fiber;\r\n  } else {\r\n    // Only implemented in persistent mode\r\n    throw new Error('Not implemented.');\r\n  }\r\n}\r\n\r\nexport function createFiberFromElement (\r\n  element: ReactElement,\r\n  mode: TypeOfMode,\r\n  lanes: Lanes,\r\n): Fiber {\r\n  let owner = null;\r\n  if (__DEV__) {\r\n    owner = element._owner;\r\n  }\r\n  const type = element.type;\r\n  const key = element.key;\r\n  const pendingProps = element.props;\r\n  const fiber = createFiberFromTypeAndProps(\r\n    type,\r\n    key,\r\n    pendingProps,\r\n    owner,\r\n    mode,\r\n    lanes,\r\n  );\r\n  if (__DEV__) {\r\n    fiber._debugSource = element._source;\r\n    fiber._debugOwner = element._owner;\r\n  }\r\n  return fiber;\r\n}\r\n\r\nexport function createFiberFromFragment (\r\n  elements: ReactFragment,\r\n  mode: TypeOfMode,\r\n  lanes: Lanes,\r\n  key: null | string,\r\n): Fiber {\r\n  const fiber = createFiber(Fragment, elements, key, mode);\r\n  fiber.lanes = lanes;\r\n  return fiber;\r\n}\r\n\r\nfunction createFiberFromScope (\r\n  scope: ReactScope,\r\n  pendingProps: any,\r\n  mode: TypeOfMode,\r\n  lanes: Lanes,\r\n  key: null | string,\r\n) {\r\n  const fiber = createFiber(ScopeComponent, pendingProps, key, mode);\r\n  fiber.type = scope;\r\n  fiber.elementType = scope;\r\n  fiber.lanes = lanes;\r\n  return fiber;\r\n}\r\n\r\nfunction createFiberFromProfiler (\r\n  pendingProps: any,\r\n  mode: TypeOfMode,\r\n  lanes: Lanes,\r\n  key: null | string,\r\n): Fiber {\r\n  if (__DEV__) {\r\n    if (typeof pendingProps.id !== 'string') {\r\n      console.error(\r\n        'Profiler must specify an \"id\" of type `string` as a prop. Received the type `%s` instead.',\r\n        typeof pendingProps.id,\r\n      );\r\n    }\r\n  }\r\n\r\n  const fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\r\n  fiber.elementType = REACT_PROFILER_TYPE;\r\n  fiber.lanes = lanes;\r\n\r\n  if (enableProfilerTimer) {\r\n    fiber.stateNode = {\r\n      effectDuration: 0,\r\n      passiveEffectDuration: 0,\r\n    };\r\n  }\r\n\r\n  return fiber;\r\n}\r\n\r\nexport function createFiberFromSuspense (\r\n  pendingProps: any,\r\n  mode: TypeOfMode,\r\n  lanes: Lanes,\r\n  key: null | string,\r\n) {\r\n  const fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\r\n  fiber.elementType = REACT_SUSPENSE_TYPE;\r\n  fiber.lanes = lanes;\r\n  return fiber;\r\n}\r\n\r\nexport function createFiberFromSuspenseList (\r\n  pendingProps: any,\r\n  mode: TypeOfMode,\r\n  lanes: Lanes,\r\n  key: null | string,\r\n) {\r\n  const fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\r\n  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\r\n  fiber.lanes = lanes;\r\n  return fiber;\r\n}\r\n\r\nexport function createFiberFromOffscreen (\r\n  pendingProps: OffscreenProps,\r\n  mode: TypeOfMode,\r\n  lanes: Lanes,\r\n  key: null | string,\r\n) {\r\n  const fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\r\n  fiber.elementType = REACT_OFFSCREEN_TYPE;\r\n  fiber.lanes = lanes;\r\n  const primaryChildInstance: OffscreenInstance = {};\r\n  fiber.stateNode = primaryChildInstance;\r\n  return fiber;\r\n}\r\n\r\nexport function createFiberFromLegacyHidden (\r\n  pendingProps: OffscreenProps,\r\n  mode: TypeOfMode,\r\n  lanes: Lanes,\r\n  key: null | string,\r\n) {\r\n  const fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);\r\n  fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;\r\n  fiber.lanes = lanes;\r\n  return fiber;\r\n}\r\n\r\nexport function createFiberFromCache (\r\n  pendingProps: any,\r\n  mode: TypeOfMode,\r\n  lanes: Lanes,\r\n  key: null | string,\r\n) {\r\n  const fiber = createFiber(CacheComponent, pendingProps, key, mode);\r\n  fiber.elementType = REACT_CACHE_TYPE;\r\n  fiber.lanes = lanes;\r\n  return fiber;\r\n}\r\n\r\nexport function createFiberFromTracingMarker (\r\n  pendingProps: any,\r\n  mode: TypeOfMode,\r\n  lanes: Lanes,\r\n  key: null | string,\r\n) {\r\n  const fiber = createFiber(TracingMarkerComponent, pendingProps, key, mode);\r\n  fiber.elementType = REACT_TRACING_MARKER_TYPE;\r\n  fiber.lanes = lanes;\r\n  return fiber;\r\n}\r\n\r\nexport function createFiberFromText (\r\n  content: string,\r\n  mode: TypeOfMode,\r\n  lanes: Lanes,\r\n): Fiber {\r\n  const fiber = createFiber(HostText, content, null, mode);\r\n  fiber.lanes = lanes;\r\n  return fiber;\r\n}\r\n\r\nexport function createFiberFromHostInstanceForDeletion (): Fiber {\r\n  const fiber = createFiber(HostComponent, null, null, NoMode);\r\n  fiber.elementType = 'DELETED';\r\n  return fiber;\r\n}\r\n\r\nexport function createFiberFromDehydratedFragment (\r\n  dehydratedNode: SuspenseInstance,\r\n): Fiber {\r\n  const fiber = createFiber(DehydratedFragment, null, null, NoMode);\r\n  fiber.stateNode = dehydratedNode;\r\n  return fiber;\r\n}\r\n\r\nexport function createFiberFromPortal (\r\n  portal: ReactPortal,\r\n  mode: TypeOfMode,\r\n  lanes: Lanes,\r\n): Fiber {\r\n  const pendingProps = portal.children !== null ? portal.children : [];\r\n  const fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\r\n  fiber.lanes = lanes;\r\n  fiber.stateNode = {\r\n    containerInfo: portal.containerInfo,\r\n    pendingChildren: null, // Used by persistent updates\r\n    implementation: portal.implementation,\r\n  };\r\n  return fiber;\r\n}\r\n\r\n// Used for stashing WIP properties to replay failed work in DEV.\r\nexport function assignFiberPropertiesInDEV (\r\n  target: Fiber | null,\r\n  source: Fiber,\r\n): Fiber {\r\n  if (target === null) {\r\n    // This Fiber's initial properties will always be overwritten.\r\n    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\r\n    target = createFiber(IndeterminateComponent, null, null, NoMode);\r\n  }\r\n\r\n  // This is intentionally written as a list of all properties.\r\n  // We tried to use Object.assign() instead but this is called in\r\n  // the hottest path, and Object.assign() was too slow:\r\n  // https://github.com/facebook/react/issues/12502\r\n  // This code is DEV-only so size is not a concern.\r\n\r\n  target.tag = source.tag;\r\n  target.key = source.key;\r\n  target.elementType = source.elementType;\r\n  target.type = source.type;\r\n  target.stateNode = source.stateNode;\r\n  target.return = source.return;\r\n  target.child = source.child;\r\n  target.sibling = source.sibling;\r\n  target.index = source.index;\r\n  target.ref = source.ref;\r\n  target.pendingProps = source.pendingProps;\r\n  target.memoizedProps = source.memoizedProps;\r\n  target.updateQueue = source.updateQueue;\r\n  target.memoizedState = source.memoizedState;\r\n  target.dependencies = source.dependencies;\r\n  target.mode = source.mode;\r\n  target.flags = source.flags;\r\n  target.subtreeFlags = source.subtreeFlags;\r\n  target.deletions = source.deletions;\r\n  target.lanes = source.lanes;\r\n  target.childLanes = source.childLanes;\r\n  target.alternate = source.alternate;\r\n  if (enableProfilerTimer) {\r\n    target.actualDuration = source.actualDuration;\r\n    target.actualStartTime = source.actualStartTime;\r\n    target.selfBaseDuration = source.selfBaseDuration;\r\n    target.treeBaseDuration = source.treeBaseDuration;\r\n  }\r\n\r\n  target._debugSource = source._debugSource;\r\n  target._debugOwner = source._debugOwner;\r\n  target._debugNeedsRemount = source._debugNeedsRemount;\r\n  target._debugHookTypes = source._debugHookTypes;\r\n  return target;\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAeA,SACEA,gCADF,EAEEC,WAFF,EAGEC,mBAHF,EAIEC,mBAJF,EAKEC,cALF,EAMEC,kBANF,EAOEC,wBAPF,EAQEC,wBARF,EASEC,uBATF,EAUEC,kBAVF,QAWO,0BAXP;AAYA,SACEC,mBADF,EAEEC,yBAFF,QAGO,wBAHP;AAIA,SAASC,OAAT,EAAkBC,SAAlB,EAA6BC,UAA7B,QAA+C,mBAA/C;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,SACEC,sBADF,EAEEC,cAFF,EAGEC,QAHF,EAIEC,aAJF,EAKEC,QALF,EAMEC,UANF,EAOEC,UAPF,EAQEC,QARF,EASEC,IATF,EAUEC,eAVF,EAWEC,eAXF,EAYEC,QAZF,EAaEC,iBAbF,EAcEC,qBAdF,EAeEC,kBAfF,EAgBEC,iBAhBF,EAiBEC,aAjBF,EAkBEC,mBAlBF,EAmBEC,aAnBF,EAoBEC,cApBF,EAqBEC,kBArBF,EAsBEC,qBAtBF,EAuBEC,cAvBF,EAwBEC,sBAxBF,QAyBO,iBAzBP;AA0BA,OAAOC,yBAAP,MAAsC,gDAAtC;AAEA,SAASC,iBAAT,QAAkC,8BAAlC;AACA,SACEC,2BADF,EAEEC,8BAFF,EAGEC,gCAHF,QAIO,8BAJP;AAKA,SAASC,OAAT,QAAwB,sBAAxB;AACA,SACEC,MADF,EAEEC,cAFF,EAGEC,gBAHF,EAIEC,WAJF,EAKEC,gBALF,EAMEC,iBANF,EAOEC,8BAPF,QAQO,mBARP;AASA,SACEC,sBADF,EAEEC,mBAFF,EAGEC,6BAHF,EAIEC,sBAJF,EAKEC,mBALF,EAMEC,mBANF,EAOEC,kBAPF,EAQEC,mBARF,EASEC,wBATF,EAUEC,eAVF,EAWEC,eAXF,EAYEC,gBAZF,EAaEC,oBAbF,EAcEC,wBAdF,EAeEC,gBAfF,EAgBEC,yBAhBF,QAiBO,qBAjBP;AAqBA,IAAIC,iBAAJ;;AAEA,IAAIC,OAAJ,EAAa;EACXD,iBAAiB,GAAG,KAApB;;EACA,IAAI;IACF,MAAME,mBAAmB,GAAGC,MAAM,CAACC,iBAAP,CAAyB,EAAzB,CAA5B;IACA;;IACA,IAAIC,GAAJ,CAAQ,CAAC,CAACH,mBAAD,EAAsB,IAAtB,CAAD,CAAR;IACA,IAAII,GAAJ,CAAQ,CAACJ,mBAAD,CAAR;IACA;EACD,CAND,CAME,OAAOK,CAAP,EAAU;IACV;IACAP,iBAAiB,GAAG,IAApB;EACD;AACF;;AAED,SAASQ,SAAT,CACEC,GADF,EAEEC,YAFF,EAGEC,GAHF,EAIEC,IAJF,EAKE;EACA;EACA;EACA,KAAKH,GAAL,GAAWA,GAAX,CAHA,CAGgB;;EAChB,KAAKE,GAAL,GAAWA,GAAX,CAJA,CAIe;;EACf,KAAKE,WAAL,GAAmB,IAAnB,CALA,CAKyB;;EACzB,KAAKC,IAAL,GAAY,IAAZ,CANA,CAMkB;;EAClB,KAAKC,SAAL,GAAiB,IAAjB,CAPA,CAOuB;EAEvB;EACA;;EACA,KAAKC,MAAL,GAAc,IAAd,CAXA,CAWmB;;EACnB,KAAKC,KAAL,GAAa,IAAb,CAZA,CAYkB;;EAClB,KAAKC,OAAL,GAAe,IAAf,CAbA,CAaoB;;EACpB,KAAKC,KAAL,GAAa,CAAb;EAEA,KAAKC,GAAL,GAAW,IAAX,CAhBA,CAiBA;;EACA,KAAKV,YAAL,GAAoBA,YAApB;EACA,KAAKW,aAAL,GAAqB,IAArB;EACA,KAAKC,WAAL,GAAmB,IAAnB;EACA,KAAKC,aAAL,GAAqB,IAArB;EACA,KAAKC,YAAL,GAAoB,IAApB;EAEA,KAAKZ,IAAL,GAAYA,IAAZ,CAxBA,CA0BA;EACA;;EACA,KAAKa,KAAL,GAAalF,OAAb;EACA,KAAKmF,YAAL,GAAoBnF,OAApB;EACA,KAAKoF,SAAL,GAAiB,IAAjB,CA9BA,CA+BA;;EACA,KAAKC,KAAL,GAAapD,OAAb;EACA,KAAKqD,UAAL,GAAkBrD,OAAlB,CAjCA,CAkCF;;EACE,KAAKsD,SAAL,GAAiB,IAAjB;;EAEA,IAAIhG,mBAAJ,EAAyB;IACvB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,KAAKiG,cAAL,GAAsBC,MAAM,CAACC,GAA7B;IACA,KAAKC,eAAL,GAAuBF,MAAM,CAACC,GAA9B;IACA,KAAKE,gBAAL,GAAwBH,MAAM,CAACC,GAA/B;IACA,KAAKG,gBAAL,GAAwBJ,MAAM,CAACC,GAA/B,CAhBuB,CAkBvB;IACA;IACA;;IACA,KAAKF,cAAL,GAAsB,CAAtB;IACA,KAAKG,eAAL,GAAuB,CAAC,CAAxB;IACA,KAAKC,gBAAL,GAAwB,CAAxB;IACA,KAAKC,gBAAL,GAAwB,CAAxB;EACD;;EAED,IAAInC,OAAJ,EAAa;IACX;IAEA,KAAKoC,YAAL,GAAoB,IAApB;IACA,KAAKC,WAAL,GAAmB,IAAnB;IACA,KAAKC,kBAAL,GAA0B,KAA1B;IACA,KAAKC,eAAL,GAAuB,IAAvB;;IACA,IAAI,CAACxC,iBAAD,IAAsB,OAAOG,MAAM,CAACC,iBAAd,KAAoC,UAA9D,EAA0E;MACxED,MAAM,CAACC,iBAAP,CAAyB,IAAzB;IACD;EACF;AACF,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;KA9FSI,S;;AA+FT,MAAMiC,WAAW,GAAG,UAClBhC,GADkB,EAElBC,YAFkB,EAGlBC,GAHkB,EAIlBC,IAJkB,EAKX;EACP;EACA,OAAO,IAAIJ,SAAJ,CAAcC,GAAd,EAAmBC,YAAnB,EAAiCC,GAAjC,EAAsCC,IAAtC,CAAP;AACD,CARD;;AAUA,SAAS8B,eAAT,CAA0BC,SAA1B,EAA+C;EAC7C,MAAMC,SAAS,GAAGD,SAAS,CAACC,SAA5B;EACA,OAAO,CAAC,EAAEA,SAAS,IAAIA,SAAS,CAACC,gBAAzB,CAAR;AACD;;AAED,OAAO,SAASC,yBAAT,CAAoChC,IAApC,EAA+C;EACpD,OACE,OAAOA,IAAP,KAAgB,UAAhB,IACA,CAAC4B,eAAe,CAAC5B,IAAD,CADhB,IAEAA,IAAI,CAACiC,YAAL,KAAsBC,SAHxB;AAKD;AAED,OAAO,SAASC,uBAAT,CAAkCN,SAAlC,EAAgE;EACrE,IAAI,OAAOA,SAAP,KAAqB,UAAzB,EAAqC;IACnC,OAAOD,eAAe,CAACC,SAAD,CAAf,GAA6B/F,cAA7B,GAA8Cc,iBAArD;EACD,CAFD,MAEO,IAAIiF,SAAS,KAAKK,SAAd,IAA2BL,SAAS,KAAK,IAA7C,EAAmD;IACxD,MAAMO,QAAQ,GAAGP,SAAS,CAACO,QAA3B;;IACA,IAAIA,QAAQ,KAAKlE,sBAAjB,EAAyC;MACvC,OAAO/B,UAAP;IACD;;IACD,IAAIiG,QAAQ,KAAKzD,eAAjB,EAAkC;MAChC,OAAO9B,aAAP;IACD;EACF;;EACD,OAAOhB,sBAAP;AACD,C,CAED;;AACA,OAAO,SAASwG,oBAAT,CAA+BC,OAA/B,EAA+C1C,YAA/C,EAAyE;EAC9E,IAAI2C,cAAc,GAAGD,OAAO,CAACtB,SAA7B;;EACA,IAAIuB,cAAc,KAAK,IAAvB,EAA6B;IAC3B;IACA;IACA;IACA;IACA;IACAA,cAAc,GAAGZ,WAAW,CAC1BW,OAAO,CAAC3C,GADkB,EAE1BC,YAF0B,EAG1B0C,OAAO,CAACzC,GAHkB,EAI1ByC,OAAO,CAACxC,IAJkB,CAA5B;IAMAyC,cAAc,CAACxC,WAAf,GAA6BuC,OAAO,CAACvC,WAArC;IACAwC,cAAc,CAACvC,IAAf,GAAsBsC,OAAO,CAACtC,IAA9B;IACAuC,cAAc,CAACtC,SAAf,GAA2BqC,OAAO,CAACrC,SAAnC;;IAEA,IAAId,OAAJ,EAAa;MACX;MAEAoD,cAAc,CAAChB,YAAf,GAA8Be,OAAO,CAACf,YAAtC;MACAgB,cAAc,CAACf,WAAf,GAA6Bc,OAAO,CAACd,WAArC;MACAe,cAAc,CAACb,eAAf,GAAiCY,OAAO,CAACZ,eAAzC;IACD;;IAEDa,cAAc,CAACvB,SAAf,GAA2BsB,OAA3B;IACAA,OAAO,CAACtB,SAAR,GAAoBuB,cAApB;EACD,CA1BD,MA0BO;IACLA,cAAc,CAAC3C,YAAf,GAA8BA,YAA9B,CADK,CAEL;;IACA2C,cAAc,CAACvC,IAAf,GAAsBsC,OAAO,CAACtC,IAA9B,CAHK,CAKL;IACA;;IACAuC,cAAc,CAAC5B,KAAf,GAAuBlF,OAAvB,CAPK,CASL;;IACA8G,cAAc,CAAC3B,YAAf,GAA8BnF,OAA9B;IACA8G,cAAc,CAAC1B,SAAf,GAA2B,IAA3B;;IAEA,IAAI7F,mBAAJ,EAAyB;MACvB;MACA;MACA;MACA;MACAuH,cAAc,CAACtB,cAAf,GAAgC,CAAhC;MACAsB,cAAc,CAACnB,eAAf,GAAiC,CAAC,CAAlC;IACD;EACF,CAjD6E,CAmD9E;EACA;;;EACAmB,cAAc,CAAC5B,KAAf,GAAuB2B,OAAO,CAAC3B,KAAR,GAAgBhF,UAAvC;EACA4G,cAAc,CAACxB,UAAf,GAA4BuB,OAAO,CAACvB,UAApC;EACAwB,cAAc,CAACzB,KAAf,GAAuBwB,OAAO,CAACxB,KAA/B;EAEAyB,cAAc,CAACpC,KAAf,GAAuBmC,OAAO,CAACnC,KAA/B;EACAoC,cAAc,CAAChC,aAAf,GAA+B+B,OAAO,CAAC/B,aAAvC;EACAgC,cAAc,CAAC9B,aAAf,GAA+B6B,OAAO,CAAC7B,aAAvC;EACA8B,cAAc,CAAC/B,WAAf,GAA6B8B,OAAO,CAAC9B,WAArC,CA5D8E,CA8D9E;EACA;;EACA,MAAMgC,mBAAmB,GAAGF,OAAO,CAAC5B,YAApC;EACA6B,cAAc,CAAC7B,YAAf,GACE8B,mBAAmB,KAAK,IAAxB,GACI,IADJ,GAEI;IACA1B,KAAK,EAAE0B,mBAAmB,CAAC1B,KAD3B;IAEA2B,YAAY,EAAED,mBAAmB,CAACC;EAFlC,CAHN,CAjE8E,CAyE9E;;EACAF,cAAc,CAACnC,OAAf,GAAyBkC,OAAO,CAAClC,OAAjC;EACAmC,cAAc,CAAClC,KAAf,GAAuBiC,OAAO,CAACjC,KAA/B;EACAkC,cAAc,CAACjC,GAAf,GAAqBgC,OAAO,CAAChC,GAA7B;;EAEA,IAAItF,mBAAJ,EAAyB;IACvBuH,cAAc,CAAClB,gBAAf,GAAkCiB,OAAO,CAACjB,gBAA1C;IACAkB,cAAc,CAACjB,gBAAf,GAAkCgB,OAAO,CAAChB,gBAA1C;EACD;;EAED,IAAInC,OAAJ,EAAa;IACXoD,cAAc,CAACd,kBAAf,GAAoCa,OAAO,CAACb,kBAA5C;;IACA,QAAQc,cAAc,CAAC5C,GAAvB;MACE,KAAK9D,sBAAL;MACA,KAAKe,iBAAL;MACA,KAAKE,mBAAL;QACEyF,cAAc,CAACvC,IAAf,GAAsBxC,8BAA8B,CAAC8E,OAAO,CAACtC,IAAT,CAApD;QACA;;MACF,KAAKlE,cAAL;QACEyG,cAAc,CAACvC,IAAf,GAAsBzC,2BAA2B,CAAC+E,OAAO,CAACtC,IAAT,CAAjD;QACA;;MACF,KAAK7D,UAAL;QACEoG,cAAc,CAACvC,IAAf,GAAsBvC,gCAAgC,CAAC6E,OAAO,CAACtC,IAAT,CAAtD;QACA;;MACF;QACE;IAbJ;EAeD;;EAED,OAAOuC,cAAP;AACD,C,CAED;;AACA,OAAO,SAASG,mBAAT,CAA8BH,cAA9B,EAAqDI,WAArD,EAAyE;EAC9E;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EACAJ,cAAc,CAAC5B,KAAf,IAAwBhF,UAAU,GAAGD,SAArC,CAX8E,CAa9E;;EAEA,MAAM4G,OAAO,GAAGC,cAAc,CAACvB,SAA/B;;EACA,IAAIsB,OAAO,KAAK,IAAhB,EAAsB;IACpB;IACAC,cAAc,CAACxB,UAAf,GAA4BrD,OAA5B;IACA6E,cAAc,CAACzB,KAAf,GAAuB6B,WAAvB;IAEAJ,cAAc,CAACpC,KAAf,GAAuB,IAAvB;IACAoC,cAAc,CAAC3B,YAAf,GAA8BnF,OAA9B;IACA8G,cAAc,CAAChC,aAAf,GAA+B,IAA/B;IACAgC,cAAc,CAAC9B,aAAf,GAA+B,IAA/B;IACA8B,cAAc,CAAC/B,WAAf,GAA6B,IAA7B;IAEA+B,cAAc,CAAC7B,YAAf,GAA8B,IAA9B;IAEA6B,cAAc,CAACtC,SAAf,GAA2B,IAA3B;;IAEA,IAAIjF,mBAAJ,EAAyB;MACvB;MACA;MACAuH,cAAc,CAAClB,gBAAf,GAAkC,CAAlC;MACAkB,cAAc,CAACjB,gBAAf,GAAkC,CAAlC;IACD;EACF,CArBD,MAqBO;IACL;IACAiB,cAAc,CAACxB,UAAf,GAA4BuB,OAAO,CAACvB,UAApC;IACAwB,cAAc,CAACzB,KAAf,GAAuBwB,OAAO,CAACxB,KAA/B;IAEAyB,cAAc,CAACpC,KAAf,GAAuBmC,OAAO,CAACnC,KAA/B;IACAoC,cAAc,CAAC3B,YAAf,GAA8BnF,OAA9B;IACA8G,cAAc,CAAC1B,SAAf,GAA2B,IAA3B;IACA0B,cAAc,CAAChC,aAAf,GAA+B+B,OAAO,CAAC/B,aAAvC;IACAgC,cAAc,CAAC9B,aAAf,GAA+B6B,OAAO,CAAC7B,aAAvC;IACA8B,cAAc,CAAC/B,WAAf,GAA6B8B,OAAO,CAAC9B,WAArC,CAVK,CAWL;;IACA+B,cAAc,CAACvC,IAAf,GAAsBsC,OAAO,CAACtC,IAA9B,CAZK,CAcL;IACA;;IACA,MAAMwC,mBAAmB,GAAGF,OAAO,CAAC5B,YAApC;IACA6B,cAAc,CAAC7B,YAAf,GACE8B,mBAAmB,KAAK,IAAxB,GACI,IADJ,GAEI;MACA1B,KAAK,EAAE0B,mBAAmB,CAAC1B,KAD3B;MAEA2B,YAAY,EAAED,mBAAmB,CAACC;IAFlC,CAHN;;IAQA,IAAIzH,mBAAJ,EAAyB;MACvB;MACA;MACAuH,cAAc,CAAClB,gBAAf,GAAkCiB,OAAO,CAACjB,gBAA1C;MACAkB,cAAc,CAACjB,gBAAf,GAAkCgB,OAAO,CAAChB,gBAA1C;IACD;EACF;;EAED,OAAOiB,cAAP;AACD;AAED,OAAO,SAASK,mBAAT,CACLjD,GADK,EAELkD,YAFK,EAGLC,kCAHK,EAIE;EACP,IAAIhD,IAAJ;;EACA,IAAIH,GAAG,KAAK/D,cAAZ,EAA4B;IAC1BkE,IAAI,GAAGlC,cAAP;;IACA,IAAIiF,YAAY,KAAK,IAArB,EAA2B;MACzB/C,IAAI,IAAI/B,gBAAR;;MAEA,IAAIhD,mBAAJ,EAAyB;QACvB+E,IAAI,IAAI9B,iBAAR;MACD;IACF,CAND,MAMO,IAAIjD,mBAAmB,IAAIF,gCAA3B,EAA6D;MAClEiF,IAAI,IAAI/B,gBAAgB,GAAGC,iBAA3B;IACD;;IACD,KACE;IACA;IACA,CAAC7C,wBAAD,IACA;IACCC,wBAAwB,IAAI0H,kCAL/B,EAME;MACAhD,IAAI,IAAI7B,8BAAR;IACD;EACF,CApBD,MAoBO;IACL6B,IAAI,GAAGnC,MAAP;EACD;;EAED,IAAI3C,mBAAmB,IAAIsC,iBAA3B,EAA8C;IAC5C;IACA;IACA;IACAwC,IAAI,IAAIhC,WAAR;EACD;;EAED,OAAO6D,WAAW,CAAC5F,QAAD,EAAW,IAAX,EAAiB,IAAjB,EAAuB+D,IAAvB,CAAlB;AACD;AAED,OAAO,SAASiD,2BAAT,CACL/C,IADK,EACM;AACXH,GAFK,EAGLD,YAHK,EAILoD,KAJK,EAKLlD,IALK,EAMLgB,KANK,EAOE;EACP,IAAImC,QAAQ,GAAGpH,sBAAf,CADO,CAEP;;EACA,IAAIqH,YAAY,GAAGlD,IAAnB;;EACA,IAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgC;IAC9B,IAAI4B,eAAe,CAAC5B,IAAD,CAAnB,EAA2B;MACzBiD,QAAQ,GAAGnH,cAAX;;MACA,IAAIqD,OAAJ,EAAa;QACX+D,YAAY,GAAG3F,2BAA2B,CAAC2F,YAAD,CAA1C;MACD;IACF,CALD,MAKO;MACL,IAAI/D,OAAJ,EAAa;QACX+D,YAAY,GAAG1F,8BAA8B,CAAC0F,YAAD,CAA7C;MACD;IACF;EACF,CAXD,MAWO,IAAI,OAAOlD,IAAP,KAAgB,QAApB,EAA8B;IACnCiD,QAAQ,GAAGjH,aAAX;EACD,CAFM,MAEA;IACLmH,MAAM,EAAE,QAAQnD,IAAR;MACN,KAAK7B,mBAAL;QACE,OAAOiF,uBAAuB,CAACxD,YAAY,CAACyD,QAAd,EAAwBvD,IAAxB,EAA8BgB,KAA9B,EAAqCjB,GAArC,CAA9B;;MACF,KAAKxB,sBAAL;QACE4E,QAAQ,GAAG5G,IAAX;QACAyD,IAAI,IAAI/B,gBAAR;;QACA,IAAIhD,mBAAmB,IAAI,CAAC+E,IAAI,GAAGlC,cAAR,MAA4BD,MAAvD,EAA+D;UAC7D;UACAmC,IAAI,IAAI9B,iBAAR;QACD;;QACD;;MACF,KAAKM,mBAAL;QACE,OAAOgF,uBAAuB,CAAC1D,YAAD,EAAeE,IAAf,EAAqBgB,KAArB,EAA4BjB,GAA5B,CAA9B;;MACF,KAAKpB,mBAAL;QACE,OAAO8E,uBAAuB,CAAC3D,YAAD,EAAeE,IAAf,EAAqBgB,KAArB,EAA4BjB,GAA5B,CAA9B;;MACF,KAAKnB,wBAAL;QACE,OAAO8E,2BAA2B,CAAC5D,YAAD,EAAeE,IAAf,EAAqBgB,KAArB,EAA4BjB,GAA5B,CAAlC;;MACF,KAAKf,oBAAL;QACE,OAAO2E,wBAAwB,CAAC7D,YAAD,EAAeE,IAAf,EAAqBgB,KAArB,EAA4BjB,GAA5B,CAA/B;;MACF,KAAKd,wBAAL;QACE,IAAI7D,kBAAJ,EAAwB;UACtB,OAAOwI,2BAA2B,CAAC9D,YAAD,EAAeE,IAAf,EAAqBgB,KAArB,EAA4BjB,GAA5B,CAAlC;QACD;;MACH;;MACA,KAAKhB,gBAAL;QACE,IAAI5D,cAAJ,EAAoB;UAClB,OAAO0I,oBAAoB,CAAC3D,IAAD,EAAOJ,YAAP,EAAqBE,IAArB,EAA2BgB,KAA3B,EAAkCjB,GAAlC,CAA3B;QACD;;MACH;;MACA,KAAKb,gBAAL;QACE,IAAIlE,WAAJ,EAAiB;UACf,OAAO8I,oBAAoB,CAAChE,YAAD,EAAeE,IAAf,EAAqBgB,KAArB,EAA4BjB,GAA5B,CAA3B;QACD;;MACH;;MACA,KAAKZ,yBAAL;QACE,IAAI5D,uBAAJ,EAA6B;UAC3B,OAAOwI,4BAA4B,CAACjE,YAAD,EAAeE,IAAf,EAAqBgB,KAArB,EAA4BjB,GAA5B,CAAnC;QACD;;MACH;;MACA,KAAKzB,6BAAL;QACE,IAAI9C,kBAAJ,EAAwB;UACtB2H,QAAQ,GAAG5G,IAAX;UACAyD,IAAI,IAAIjC,gBAAR;UACA;QACD;;MACH;;MACA;QAAS;UACP,IAAI,OAAOmC,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,KAAK,IAAzC,EAA+C;YAC7C,QAAQA,IAAI,CAACoC,QAAb;cACE,KAAK7D,mBAAL;gBACE0E,QAAQ,GAAG3G,eAAX;gBACA,MAAM6G,MAAN;;cACF,KAAK3E,kBAAL;gBACE;gBACAyE,QAAQ,GAAG1G,eAAX;gBACA,MAAM4G,MAAN;;cACF,KAAKjF,sBAAL;gBACE+E,QAAQ,GAAG9G,UAAX;;gBACA,IAAIgD,OAAJ,EAAa;kBACX+D,YAAY,GAAGzF,gCAAgC,CAACyF,YAAD,CAA/C;gBACD;;gBACD,MAAMC,MAAN;;cACF,KAAKxE,eAAL;gBACEsE,QAAQ,GAAGpG,aAAX;gBACA,MAAMsG,MAAN;;cACF,KAAKvE,eAAL;gBACEqE,QAAQ,GAAGlG,aAAX;gBACAmG,YAAY,GAAG,IAAf;gBACA,MAAMC,MAAN;YApBJ;UAsBD;;UACD,IAAIW,IAAI,GAAG,EAAX;;UACA,IAAI3E,OAAJ,EAAa;YACX,IACEa,IAAI,KAAKkC,SAAT,IACC,OAAOlC,IAAP,KAAgB,QAAhB,IACCA,IAAI,KAAK,IADV,IAECX,MAAM,CAAC0E,IAAP,CAAY/D,IAAZ,EAAkBgE,MAAlB,KAA6B,CAJjC,EAKE;cACAF,IAAI,IACF,+DACA,0DADA,GAEA,gBAHF;YAID;;YACD,MAAMG,SAAS,GAAGjB,KAAK,GAAG3F,yBAAyB,CAAC2F,KAAD,CAA5B,GAAsC,IAA7D;;YACA,IAAIiB,SAAJ,EAAe;cACbH,IAAI,IAAI,qCAAqCG,SAArC,GAAiD,IAAzD;YACD;UACF;;UAED,MAAM,IAAIC,KAAJ,CACJ,8DACA,6DADA,GAEC,YAAWlE,IAAI,IAAI,IAAR,GAAeA,IAAf,GAAsB,OAAOA,IAAK,IAAG8D,IAAK,EAHlD,CAAN;QAKD;IA/FK;EAiGT;;EAED,MAAMK,KAAK,GAAGxC,WAAW,CAACsB,QAAD,EAAWrD,YAAX,EAAyBC,GAAzB,EAA8BC,IAA9B,CAAzB;EACAqE,KAAK,CAACpE,WAAN,GAAoBC,IAApB;EACAmE,KAAK,CAACnE,IAAN,GAAakD,YAAb;EACAiB,KAAK,CAACrD,KAAN,GAAcA,KAAd;;EAEA,IAAI3B,OAAJ,EAAa;IACXgF,KAAK,CAAC3C,WAAN,GAAoBwB,KAApB;EACD;;EAED,OAAOmB,KAAP;AACD;AAED,OAAO,SAASC,iCAAT,CACLC,KADK,EAELC,SAFK,EAGLxD,KAHK,EAILjB,GAJK,EAKE;EACP,IAAItE,mBAAJ,EAAyB;IACvB,MAAMyE,IAAI,GAAGxE,yBAAyB,EAAtC;IACA,MAAM2I,KAAK,GAAGxC,WAAW,CAAC3F,aAAD,EAAgBqI,KAAhB,EAAuBxE,GAAvB,EAA4ByE,SAA5B,CAAzB;IACAH,KAAK,CAACpE,WAAN,GAAoBC,IAApB;IACAmE,KAAK,CAACnE,IAAN,GAAaA,IAAb;IACAmE,KAAK,CAACrD,KAAN,GAAcA,KAAd;IACA,OAAOqD,KAAP;EACD,CAPD,MAOO;IACL;IACA,MAAM,IAAID,KAAJ,CAAU,kBAAV,CAAN;EACD;AACF;AAED,OAAO,SAASK,sBAAT,CACLC,OADK,EAEL1E,IAFK,EAGLgB,KAHK,EAIE;EACP,IAAIkC,KAAK,GAAG,IAAZ;;EACA,IAAI7D,OAAJ,EAAa;IACX6D,KAAK,GAAGwB,OAAO,CAACC,MAAhB;EACD;;EACD,MAAMzE,IAAI,GAAGwE,OAAO,CAACxE,IAArB;EACA,MAAMH,GAAG,GAAG2E,OAAO,CAAC3E,GAApB;EACA,MAAMD,YAAY,GAAG4E,OAAO,CAACH,KAA7B;EACA,MAAMF,KAAK,GAAGpB,2BAA2B,CACvC/C,IADuC,EAEvCH,GAFuC,EAGvCD,YAHuC,EAIvCoD,KAJuC,EAKvClD,IALuC,EAMvCgB,KANuC,CAAzC;;EAQA,IAAI3B,OAAJ,EAAa;IACXgF,KAAK,CAAC5C,YAAN,GAAqBiD,OAAO,CAACE,OAA7B;IACAP,KAAK,CAAC3C,WAAN,GAAoBgD,OAAO,CAACC,MAA5B;EACD;;EACD,OAAON,KAAP;AACD;AAED,OAAO,SAASf,uBAAT,CACLuB,QADK,EAEL7E,IAFK,EAGLgB,KAHK,EAILjB,GAJK,EAKE;EACP,MAAMsE,KAAK,GAAGxC,WAAW,CAACvF,QAAD,EAAWuI,QAAX,EAAqB9E,GAArB,EAA0BC,IAA1B,CAAzB;EACAqE,KAAK,CAACrD,KAAN,GAAcA,KAAd;EACA,OAAOqD,KAAP;AACD;;AAED,SAASR,oBAAT,CACEiB,KADF,EAEEhF,YAFF,EAGEE,IAHF,EAIEgB,KAJF,EAKEjB,GALF,EAME;EACA,MAAMsE,KAAK,GAAGxC,WAAW,CAAC3E,cAAD,EAAiB4C,YAAjB,EAA+BC,GAA/B,EAAoCC,IAApC,CAAzB;EACAqE,KAAK,CAACnE,IAAN,GAAa4E,KAAb;EACAT,KAAK,CAACpE,WAAN,GAAoB6E,KAApB;EACAT,KAAK,CAACrD,KAAN,GAAcA,KAAd;EACA,OAAOqD,KAAP;AACD;;AAED,SAASb,uBAAT,CACE1D,YADF,EAEEE,IAFF,EAGEgB,KAHF,EAIEjB,GAJF,EAKS;EACP,IAAIV,OAAJ,EAAa;IACX,IAAI,OAAOS,YAAY,CAACiF,EAApB,KAA2B,QAA/B,EAAyC;MACvCC,OAAO,CAACC,KAAR,CACE,2FADF,EAEE,OAAOnF,YAAY,CAACiF,EAFtB;IAID;EACF;;EAED,MAAMV,KAAK,GAAGxC,WAAW,CAACnF,QAAD,EAAWoD,YAAX,EAAyBC,GAAzB,EAA8BC,IAAI,GAAGhC,WAArC,CAAzB;EACAqG,KAAK,CAACpE,WAAN,GAAoBzB,mBAApB;EACA6F,KAAK,CAACrD,KAAN,GAAcA,KAAd;;EAEA,IAAI9F,mBAAJ,EAAyB;IACvBmJ,KAAK,CAAClE,SAAN,GAAkB;MAChB+E,cAAc,EAAE,CADA;MAEhBC,qBAAqB,EAAE;IAFP,CAAlB;EAID;;EAED,OAAOd,KAAP;AACD;;AAED,OAAO,SAASZ,uBAAT,CACL3D,YADK,EAELE,IAFK,EAGLgB,KAHK,EAILjB,GAJK,EAKL;EACA,MAAMsE,KAAK,GAAGxC,WAAW,CAAClF,iBAAD,EAAoBmD,YAApB,EAAkCC,GAAlC,EAAuCC,IAAvC,CAAzB;EACAqE,KAAK,CAACpE,WAAN,GAAoBtB,mBAApB;EACA0F,KAAK,CAACrD,KAAN,GAAcA,KAAd;EACA,OAAOqD,KAAP;AACD;AAED,OAAO,SAASX,2BAAT,CACL5D,YADK,EAELE,IAFK,EAGLgB,KAHK,EAILjB,GAJK,EAKL;EACA,MAAMsE,KAAK,GAAGxC,WAAW,CAACjF,qBAAD,EAAwBkD,YAAxB,EAAsCC,GAAtC,EAA2CC,IAA3C,CAAzB;EACAqE,KAAK,CAACpE,WAAN,GAAoBrB,wBAApB;EACAyF,KAAK,CAACrD,KAAN,GAAcA,KAAd;EACA,OAAOqD,KAAP;AACD;AAED,OAAO,SAASV,wBAAT,CACL7D,YADK,EAELE,IAFK,EAGLgB,KAHK,EAILjB,GAJK,EAKL;EACA,MAAMsE,KAAK,GAAGxC,WAAW,CAAC1E,kBAAD,EAAqB2C,YAArB,EAAmCC,GAAnC,EAAwCC,IAAxC,CAAzB;EACAqE,KAAK,CAACpE,WAAN,GAAoBjB,oBAApB;EACAqF,KAAK,CAACrD,KAAN,GAAcA,KAAd;EACA,MAAMoE,oBAAuC,GAAG,EAAhD;EACAf,KAAK,CAAClE,SAAN,GAAkBiF,oBAAlB;EACA,OAAOf,KAAP;AACD;AAED,OAAO,SAAST,2BAAT,CACL9D,YADK,EAELE,IAFK,EAGLgB,KAHK,EAILjB,GAJK,EAKL;EACA,MAAMsE,KAAK,GAAGxC,WAAW,CAACzE,qBAAD,EAAwB0C,YAAxB,EAAsCC,GAAtC,EAA2CC,IAA3C,CAAzB;EACAqE,KAAK,CAACpE,WAAN,GAAoBhB,wBAApB;EACAoF,KAAK,CAACrD,KAAN,GAAcA,KAAd;EACA,OAAOqD,KAAP;AACD;AAED,OAAO,SAASP,oBAAT,CACLhE,YADK,EAELE,IAFK,EAGLgB,KAHK,EAILjB,GAJK,EAKL;EACA,MAAMsE,KAAK,GAAGxC,WAAW,CAACxE,cAAD,EAAiByC,YAAjB,EAA+BC,GAA/B,EAAoCC,IAApC,CAAzB;EACAqE,KAAK,CAACpE,WAAN,GAAoBf,gBAApB;EACAmF,KAAK,CAACrD,KAAN,GAAcA,KAAd;EACA,OAAOqD,KAAP;AACD;AAED,OAAO,SAASN,4BAAT,CACLjE,YADK,EAELE,IAFK,EAGLgB,KAHK,EAILjB,GAJK,EAKL;EACA,MAAMsE,KAAK,GAAGxC,WAAW,CAACvE,sBAAD,EAAyBwC,YAAzB,EAAuCC,GAAvC,EAA4CC,IAA5C,CAAzB;EACAqE,KAAK,CAACpE,WAAN,GAAoBd,yBAApB;EACAkF,KAAK,CAACrD,KAAN,GAAcA,KAAd;EACA,OAAOqD,KAAP;AACD;AAED,OAAO,SAASgB,mBAAT,CACLC,OADK,EAELtF,IAFK,EAGLgB,KAHK,EAIE;EACP,MAAMqD,KAAK,GAAGxC,WAAW,CAAC1F,QAAD,EAAWmJ,OAAX,EAAoB,IAApB,EAA0BtF,IAA1B,CAAzB;EACAqE,KAAK,CAACrD,KAAN,GAAcA,KAAd;EACA,OAAOqD,KAAP;AACD;AAED,OAAO,SAASkB,sCAAT,GAA0D;EAC/D,MAAMlB,KAAK,GAAGxC,WAAW,CAAC3F,aAAD,EAAgB,IAAhB,EAAsB,IAAtB,EAA4B2B,MAA5B,CAAzB;EACAwG,KAAK,CAACpE,WAAN,GAAoB,SAApB;EACA,OAAOoE,KAAP;AACD;AAED,OAAO,SAASmB,iCAAT,CACLC,cADK,EAEE;EACP,MAAMpB,KAAK,GAAGxC,WAAW,CAAChF,kBAAD,EAAqB,IAArB,EAA2B,IAA3B,EAAiCgB,MAAjC,CAAzB;EACAwG,KAAK,CAAClE,SAAN,GAAkBsF,cAAlB;EACA,OAAOpB,KAAP;AACD;AAED,OAAO,SAASqB,qBAAT,CACLC,MADK,EAEL3F,IAFK,EAGLgB,KAHK,EAIE;EACP,MAAMlB,YAAY,GAAG6F,MAAM,CAACpC,QAAP,KAAoB,IAApB,GAA2BoC,MAAM,CAACpC,QAAlC,GAA6C,EAAlE;EACA,MAAMc,KAAK,GAAGxC,WAAW,CAACzF,UAAD,EAAa0D,YAAb,EAA2B6F,MAAM,CAAC5F,GAAlC,EAAuCC,IAAvC,CAAzB;EACAqE,KAAK,CAACrD,KAAN,GAAcA,KAAd;EACAqD,KAAK,CAAClE,SAAN,GAAkB;IAChByF,aAAa,EAAED,MAAM,CAACC,aADN;IAEhBC,eAAe,EAAE,IAFD;IAEO;IACvBC,cAAc,EAAEH,MAAM,CAACG;EAHP,CAAlB;EAKA,OAAOzB,KAAP;AACD,C,CAED;;AACA,OAAO,SAAS0B,0BAAT,CACLC,MADK,EAELC,MAFK,EAGE;EACP,IAAID,MAAM,KAAK,IAAf,EAAqB;IACnB;IACA;IACAA,MAAM,GAAGnE,WAAW,CAAC9F,sBAAD,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC8B,MAArC,CAApB;EACD,CALM,CAOP;EACA;EACA;EACA;EACA;;;EAEAmI,MAAM,CAACnG,GAAP,GAAaoG,MAAM,CAACpG,GAApB;EACAmG,MAAM,CAACjG,GAAP,GAAakG,MAAM,CAAClG,GAApB;EACAiG,MAAM,CAAC/F,WAAP,GAAqBgG,MAAM,CAAChG,WAA5B;EACA+F,MAAM,CAAC9F,IAAP,GAAc+F,MAAM,CAAC/F,IAArB;EACA8F,MAAM,CAAC7F,SAAP,GAAmB8F,MAAM,CAAC9F,SAA1B;EACA6F,MAAM,CAAC5F,MAAP,GAAgB6F,MAAM,CAAC7F,MAAvB;EACA4F,MAAM,CAAC3F,KAAP,GAAe4F,MAAM,CAAC5F,KAAtB;EACA2F,MAAM,CAAC1F,OAAP,GAAiB2F,MAAM,CAAC3F,OAAxB;EACA0F,MAAM,CAACzF,KAAP,GAAe0F,MAAM,CAAC1F,KAAtB;EACAyF,MAAM,CAACxF,GAAP,GAAayF,MAAM,CAACzF,GAApB;EACAwF,MAAM,CAAClG,YAAP,GAAsBmG,MAAM,CAACnG,YAA7B;EACAkG,MAAM,CAACvF,aAAP,GAAuBwF,MAAM,CAACxF,aAA9B;EACAuF,MAAM,CAACtF,WAAP,GAAqBuF,MAAM,CAACvF,WAA5B;EACAsF,MAAM,CAACrF,aAAP,GAAuBsF,MAAM,CAACtF,aAA9B;EACAqF,MAAM,CAACpF,YAAP,GAAsBqF,MAAM,CAACrF,YAA7B;EACAoF,MAAM,CAAChG,IAAP,GAAciG,MAAM,CAACjG,IAArB;EACAgG,MAAM,CAACnF,KAAP,GAAeoF,MAAM,CAACpF,KAAtB;EACAmF,MAAM,CAAClF,YAAP,GAAsBmF,MAAM,CAACnF,YAA7B;EACAkF,MAAM,CAACjF,SAAP,GAAmBkF,MAAM,CAAClF,SAA1B;EACAiF,MAAM,CAAChF,KAAP,GAAeiF,MAAM,CAACjF,KAAtB;EACAgF,MAAM,CAAC/E,UAAP,GAAoBgF,MAAM,CAAChF,UAA3B;EACA+E,MAAM,CAAC9E,SAAP,GAAmB+E,MAAM,CAAC/E,SAA1B;;EACA,IAAIhG,mBAAJ,EAAyB;IACvB8K,MAAM,CAAC7E,cAAP,GAAwB8E,MAAM,CAAC9E,cAA/B;IACA6E,MAAM,CAAC1E,eAAP,GAAyB2E,MAAM,CAAC3E,eAAhC;IACA0E,MAAM,CAACzE,gBAAP,GAA0B0E,MAAM,CAAC1E,gBAAjC;IACAyE,MAAM,CAACxE,gBAAP,GAA0ByE,MAAM,CAACzE,gBAAjC;EACD;;EAEDwE,MAAM,CAACvE,YAAP,GAAsBwE,MAAM,CAACxE,YAA7B;EACAuE,MAAM,CAACtE,WAAP,GAAqBuE,MAAM,CAACvE,WAA5B;EACAsE,MAAM,CAACrE,kBAAP,GAA4BsE,MAAM,CAACtE,kBAAnC;EACAqE,MAAM,CAACpE,eAAP,GAAyBqE,MAAM,CAACrE,eAAhC;EACA,OAAOoE,MAAP;AACD"},"metadata":{},"sourceType":"module"}