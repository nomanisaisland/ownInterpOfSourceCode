{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\nimport { isPrimaryRenderer } from './ReactFiberHostConfig';\nimport { createCursor, push, pop } from './ReactFiberStack.new';\nimport { ContextProvider, ClassComponent, DehydratedFragment } from './ReactWorkTags';\nimport { NoLanes, NoTimestamp, isSubsetOfLanes, includesSomeLane, mergeLanes, pickArbitraryLane } from './ReactFiberLane.new';\nimport { NoFlags, DidPropagateContext, NeedsPropagation } from './ReactFiberFlags';\nimport is from 'shared/objectIs';\nimport { createUpdate, ForceUpdate } from './ReactUpdateQueue.new';\nimport { markWorkInProgressReceivedUpdate } from './ReactFiberBeginWork.new';\nimport { enableLazyContextPropagation, enableServerContext } from 'shared/ReactFeatureFlags';\nimport { REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED } from 'shared/ReactSymbols';\nconst valueCursor = createCursor(null);\nlet rendererSigil;\n\nif (__DEV__) {\n  // Use this to detect multiple renderers using the same context\n  rendererSigil = {};\n}\n\nlet currentlyRenderingFiber = null;\nlet lastContextDependency = null;\nlet lastFullyObservedContext = null;\nlet isDisallowedContextReadInDEV = false;\nexport function resetContextDependencies() {\n  // This is called right before React yields execution, to ensure `readContext`\n  // cannot be called outside the render phase.\n  currentlyRenderingFiber = null;\n  lastContextDependency = null;\n  lastFullyObservedContext = null;\n\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\nexport function enterDisallowedContextReadInDEV() {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = true;\n  }\n}\nexport function exitDisallowedContextReadInDEV() {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\nexport function pushProvider(providerFiber, context, nextValue) {\n  if (isPrimaryRenderer) {\n    push(valueCursor, context._currentValue, providerFiber);\n    context._currentValue = nextValue;\n\n    if (__DEV__) {\n      if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {\n        console.error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');\n      }\n\n      context._currentRenderer = rendererSigil;\n    }\n  } else {\n    push(valueCursor, context._currentValue2, providerFiber);\n    context._currentValue2 = nextValue;\n\n    if (__DEV__) {\n      if (context._currentRenderer2 !== undefined && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {\n        console.error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');\n      }\n\n      context._currentRenderer2 = rendererSigil;\n    }\n  }\n}\nexport function popProvider(context, providerFiber) {\n  const currentValue = valueCursor.current;\n  pop(valueCursor, providerFiber);\n\n  if (isPrimaryRenderer) {\n    if (enableServerContext && currentValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {\n      context._currentValue = context._defaultValue;\n    } else {\n      context._currentValue = currentValue;\n    }\n  } else {\n    if (enableServerContext && currentValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {\n      context._currentValue2 = context._defaultValue;\n    } else {\n      context._currentValue2 = currentValue;\n    }\n  }\n}\nexport function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {\n  // Update the child lanes of all the ancestors, including the alternates.\n  let node = parent;\n\n  while (node !== null) {\n    const alternate = node.alternate;\n\n    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\n      node.childLanes = mergeLanes(node.childLanes, renderLanes);\n\n      if (alternate !== null) {\n        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n      }\n    } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n    } else {// Neither alternate was updated.\n      // Normally, this would mean that the rest of the\n      // ancestor path already has sufficient priority.\n      // However, this is not necessarily true inside offscreen\n      // or fallback trees because childLanes may be inconsistent\n      // with the surroundings. This is why we continue the loop.\n    }\n\n    if (node === propagationRoot) {\n      break;\n    }\n\n    node = node.return;\n  }\n\n  if (__DEV__) {\n    if (node !== propagationRoot) {\n      console.error('Expected to find the propagation root when scheduling context work. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n    }\n  }\n}\nexport function propagateContextChange(workInProgress, context, renderLanes) {\n  if (enableLazyContextPropagation) {\n    // TODO: This path is only used by Cache components. Update\n    // lazilyPropagateParentContextChanges to look for Cache components so they\n    // can take advantage of lazy propagation.\n    const forcePropagateEntireTree = true;\n    propagateContextChanges(workInProgress, [context], renderLanes, forcePropagateEntireTree);\n  } else {\n    propagateContextChange_eager(workInProgress, context, renderLanes);\n  }\n}\n\nfunction propagateContextChange_eager(workInProgress, context, renderLanes) {\n  // Only used by eager implementation\n  if (enableLazyContextPropagation) {\n    return;\n  }\n\n  let fiber = workInProgress.child;\n\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n\n  while (fiber !== null) {\n    let nextFiber; // Visit this fiber.\n\n    const list = fiber.dependencies;\n\n    if (list !== null) {\n      nextFiber = fiber.child;\n      let dependency = list.firstContext;\n\n      while (dependency !== null) {\n        // Check if the context matches.\n        if (dependency.context === context) {\n          // Match! Schedule an update on this fiber.\n          if (fiber.tag === ClassComponent) {\n            // Schedule a force update on the work-in-progress.\n            const lane = pickArbitraryLane(renderLanes);\n            const update = createUpdate(NoTimestamp, lane);\n            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the\n            // update to the current fiber, too, which means it will persist even if\n            // this render is thrown away. Since it's a race condition, not sure it's\n            // worth fixing.\n            // Inlined `enqueueUpdate` to remove interleaved update check\n\n            const updateQueue = fiber.updateQueue;\n\n            if (updateQueue === null) {// Only occurs if the fiber has been unmounted.\n            } else {\n              const sharedQueue = updateQueue.shared;\n              const pending = sharedQueue.pending;\n\n              if (pending === null) {\n                // This is the first update. Create a circular list.\n                update.next = update;\n              } else {\n                update.next = pending.next;\n                pending.next = update;\n              }\n\n              sharedQueue.pending = update;\n            }\n          }\n\n          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n          const alternate = fiber.alternate;\n\n          if (alternate !== null) {\n            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n          }\n\n          scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress); // Mark the updated lanes on the list, too.\n\n          list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the\n          // dependency list.\n\n          break;\n        }\n\n        dependency = dependency.next;\n      }\n    } else if (fiber.tag === ContextProvider) {\n      // Don't scan deeper if this is a matching provider\n      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n    } else if (fiber.tag === DehydratedFragment) {\n      // If a dehydrated suspense boundary is in this subtree, we don't know\n      // if it will have any context consumers in it. The best we can do is\n      // mark it as having updates.\n      const parentSuspense = fiber.return;\n\n      if (parentSuspense === null) {\n        throw new Error('We just came from a parent so we must have had a parent. This is a bug in React.');\n      }\n\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n      const alternate = parentSuspense.alternate;\n\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n      } // This is intentionally passing this fiber as the parent\n      // because we want to schedule this fiber as having work\n      // on its children. We'll use the childLanes on\n      // this fiber to indicate that a context has changed.\n\n\n      scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);\n      nextFiber = fiber.sibling;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n\n        const sibling = nextFiber.sibling;\n\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        } // No more siblings. Traverse up.\n\n\n        nextFiber = nextFiber.return;\n      }\n    }\n\n    fiber = nextFiber;\n  }\n}\n\nfunction propagateContextChanges(workInProgress, contexts, renderLanes, forcePropagateEntireTree) {\n  // Only used by lazy implementation\n  if (!enableLazyContextPropagation) {\n    return;\n  }\n\n  let fiber = workInProgress.child;\n\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n\n  while (fiber !== null) {\n    let nextFiber; // Visit this fiber.\n\n    const list = fiber.dependencies;\n\n    if (list !== null) {\n      nextFiber = fiber.child;\n      let dep = list.firstContext;\n\n      findChangedDep: while (dep !== null) {\n        // Assigning these to constants to help Flow\n        const dependency = dep;\n        const consumer = fiber;\n\n        findContext: for (let i = 0; i < contexts.length; i++) {\n          const context = contexts[i]; // Check if the context matches.\n          // TODO: Compare selected values to bail out early.\n\n          if (dependency.context === context) {\n            // Match! Schedule an update on this fiber.\n            // In the lazy implementation, don't mark a dirty flag on the\n            // dependency itself. Not all changes are propagated, so we can't\n            // rely on the propagation function alone to determine whether\n            // something has changed; the consumer will check. In the future, we\n            // could add back a dirty flag as an optimization to avoid double\n            // checking, but until we have selectors it's not really worth\n            // the trouble.\n            consumer.lanes = mergeLanes(consumer.lanes, renderLanes);\n            const alternate = consumer.alternate;\n\n            if (alternate !== null) {\n              alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n            }\n\n            scheduleContextWorkOnParentPath(consumer.return, renderLanes, workInProgress);\n\n            if (!forcePropagateEntireTree) {\n              // During lazy propagation, when we find a match, we can defer\n              // propagating changes to the children, because we're going to\n              // visit them during render. We should continue propagating the\n              // siblings, though\n              nextFiber = null;\n            } // Since we already found a match, we can stop traversing the\n            // dependency list.\n\n\n            break findChangedDep;\n          }\n        }\n\n        dep = dependency.next;\n      }\n    } else if (fiber.tag === DehydratedFragment) {\n      // If a dehydrated suspense boundary is in this subtree, we don't know\n      // if it will have any context consumers in it. The best we can do is\n      // mark it as having updates.\n      const parentSuspense = fiber.return;\n\n      if (parentSuspense === null) {\n        throw new Error('We just came from a parent so we must have had a parent. This is a bug in React.');\n      }\n\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n      const alternate = parentSuspense.alternate;\n\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n      } // This is intentionally passing this fiber as the parent\n      // because we want to schedule this fiber as having work\n      // on its children. We'll use the childLanes on\n      // this fiber to indicate that a context has changed.\n\n\n      scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);\n      nextFiber = null;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n\n        const sibling = nextFiber.sibling;\n\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        } // No more siblings. Traverse up.\n\n\n        nextFiber = nextFiber.return;\n      }\n    }\n\n    fiber = nextFiber;\n  }\n}\n\nexport function lazilyPropagateParentContextChanges(current, workInProgress, renderLanes) {\n  const forcePropagateEntireTree = false;\n  propagateParentContextChanges(current, workInProgress, renderLanes, forcePropagateEntireTree);\n} // Used for propagating a deferred tree (Suspense, Offscreen). We must propagate\n// to the entire subtree, because we won't revisit it until after the current\n// render has completed, at which point we'll have lost track of which providers\n// have changed.\n\nexport function propagateParentContextChangesToDeferredTree(current, workInProgress, renderLanes) {\n  const forcePropagateEntireTree = true;\n  propagateParentContextChanges(current, workInProgress, renderLanes, forcePropagateEntireTree);\n}\n\nfunction propagateParentContextChanges(current, workInProgress, renderLanes, forcePropagateEntireTree) {\n  if (!enableLazyContextPropagation) {\n    return;\n  } // Collect all the parent providers that changed. Since this is usually small\n  // number, we use an Array instead of Set.\n\n\n  let contexts = null;\n  let parent = workInProgress;\n  let isInsidePropagationBailout = false;\n\n  while (parent !== null) {\n    if (!isInsidePropagationBailout) {\n      if ((parent.flags & NeedsPropagation) !== NoFlags) {\n        isInsidePropagationBailout = true;\n      } else if ((parent.flags & DidPropagateContext) !== NoFlags) {\n        break;\n      }\n    }\n\n    if (parent.tag === ContextProvider) {\n      const currentParent = parent.alternate;\n\n      if (currentParent === null) {\n        throw new Error('Should have a current fiber. This is a bug in React.');\n      }\n\n      const oldProps = currentParent.memoizedProps;\n\n      if (oldProps !== null) {\n        const providerType = parent.type;\n        const context = providerType._context;\n        const newProps = parent.pendingProps;\n        const newValue = newProps.value;\n        const oldValue = oldProps.value;\n\n        if (!is(newValue, oldValue)) {\n          if (contexts !== null) {\n            contexts.push(context);\n          } else {\n            contexts = [context];\n          }\n        }\n      }\n    }\n\n    parent = parent.return;\n  }\n\n  if (contexts !== null) {\n    // If there were any changed providers, search through the children and\n    // propagate their changes.\n    propagateContextChanges(workInProgress, contexts, renderLanes, forcePropagateEntireTree);\n  } // This is an optimization so that we only propagate once per subtree. If a\n  // deeply nested child bails out, and it calls this propagation function, it\n  // uses this flag to know that the remaining ancestor providers have already\n  // been propagated.\n  //\n  // NOTE: This optimization is only necessary because we sometimes enter the\n  // begin phase of nodes that don't have any work scheduled on them —\n  // specifically, the siblings of a node that _does_ have scheduled work. The\n  // siblings will bail out and call this function again, even though we already\n  // propagated content changes to it and its subtree. So we use this flag to\n  // mark that the parent providers already propagated.\n  //\n  // Unfortunately, though, we need to ignore this flag when we're inside a\n  // tree whose context propagation was deferred — that's what the\n  // `NeedsPropagation` flag is for.\n  //\n  // If we could instead bail out before entering the siblings' begin phase,\n  // then we could remove both `DidPropagateContext` and `NeedsPropagation`.\n  // Consider this as part of the next refactor to the fiber tree structure.\n\n\n  workInProgress.flags |= DidPropagateContext;\n}\n\nexport function checkIfContextChanged(currentDependencies) {\n  if (!enableLazyContextPropagation) {\n    return false;\n  } // Iterate over the current dependencies to see if something changed. This\n  // only gets called if props and state has already bailed out, so it's a\n  // relatively uncommon path, except at the root of a changed subtree.\n  // Alternatively, we could move these comparisons into `readContext`, but\n  // that's a much hotter path, so I think this is an appropriate trade off.\n\n\n  let dependency = currentDependencies.firstContext;\n\n  while (dependency !== null) {\n    const context = dependency.context;\n    const newValue = isPrimaryRenderer ? context._currentValue : context._currentValue2;\n    const oldValue = dependency.memoizedValue;\n\n    if (!is(newValue, oldValue)) {\n      return true;\n    }\n\n    dependency = dependency.next;\n  }\n\n  return false;\n}\nexport function prepareToReadContext(workInProgress, renderLanes) {\n  currentlyRenderingFiber = workInProgress;\n  lastContextDependency = null;\n  lastFullyObservedContext = null;\n  const dependencies = workInProgress.dependencies;\n\n  if (dependencies !== null) {\n    if (enableLazyContextPropagation) {\n      // Reset the work-in-progress list\n      dependencies.firstContext = null;\n    } else {\n      const firstContext = dependencies.firstContext;\n\n      if (firstContext !== null) {\n        if (includesSomeLane(dependencies.lanes, renderLanes)) {\n          // Context list has a pending update. Mark that this fiber performed work.\n          markWorkInProgressReceivedUpdate();\n        } // Reset the work-in-progress list\n\n\n        dependencies.firstContext = null;\n      }\n    }\n  }\n}\nexport function readContext(context) {\n  if (__DEV__) {\n    // This warning would fire if you read context inside a Hook like useMemo.\n    // Unlike the class check below, it's not enforced in production for perf.\n    if (isDisallowedContextReadInDEV) {\n      console.error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n    }\n  }\n\n  const value = isPrimaryRenderer ? context._currentValue : context._currentValue2;\n\n  if (lastFullyObservedContext === context) {// Nothing to do. We already observe everything in this context.\n  } else {\n    const contextItem = {\n      context: context,\n      memoizedValue: value,\n      next: null\n    };\n\n    if (lastContextDependency === null) {\n      if (currentlyRenderingFiber === null) {\n        throw new Error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n      } // This is the first dependency for this component. Create a new list.\n\n\n      lastContextDependency = contextItem;\n      currentlyRenderingFiber.dependencies = {\n        lanes: NoLanes,\n        firstContext: contextItem\n      };\n\n      if (enableLazyContextPropagation) {\n        currentlyRenderingFiber.flags |= NeedsPropagation;\n      }\n    } else {\n      // Append a new context item.\n      lastContextDependency = lastContextDependency.next = contextItem;\n    }\n  }\n\n  return value;\n}","map":{"version":3,"names":["isPrimaryRenderer","createCursor","push","pop","ContextProvider","ClassComponent","DehydratedFragment","NoLanes","NoTimestamp","isSubsetOfLanes","includesSomeLane","mergeLanes","pickArbitraryLane","NoFlags","DidPropagateContext","NeedsPropagation","is","createUpdate","ForceUpdate","markWorkInProgressReceivedUpdate","enableLazyContextPropagation","enableServerContext","REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED","valueCursor","rendererSigil","__DEV__","currentlyRenderingFiber","lastContextDependency","lastFullyObservedContext","isDisallowedContextReadInDEV","resetContextDependencies","enterDisallowedContextReadInDEV","exitDisallowedContextReadInDEV","pushProvider","providerFiber","context","nextValue","_currentValue","_currentRenderer","undefined","console","error","_currentValue2","_currentRenderer2","popProvider","currentValue","current","_defaultValue","scheduleContextWorkOnParentPath","parent","renderLanes","propagationRoot","node","alternate","childLanes","return","propagateContextChange","workInProgress","forcePropagateEntireTree","propagateContextChanges","propagateContextChange_eager","fiber","child","nextFiber","list","dependencies","dependency","firstContext","tag","lane","update","updateQueue","sharedQueue","shared","pending","next","lanes","type","parentSuspense","Error","sibling","contexts","dep","findChangedDep","consumer","findContext","i","length","lazilyPropagateParentContextChanges","propagateParentContextChanges","propagateParentContextChangesToDeferredTree","isInsidePropagationBailout","flags","currentParent","oldProps","memoizedProps","providerType","_context","newProps","pendingProps","newValue","value","oldValue","checkIfContextChanged","currentDependencies","memoizedValue","prepareToReadContext","readContext","contextItem"],"sources":["E:/react-test/src/react/packages/react-reconciler/src/ReactFiberNewContext.new.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {ReactContext, ReactProviderType} from 'shared/ReactTypes';\r\nimport type {\r\n  Fiber,\r\n  ContextDependency,\r\n  Dependencies,\r\n} from './ReactInternalTypes';\r\nimport type {StackCursor} from './ReactFiberStack.new';\r\nimport type {Lanes} from './ReactFiberLane.new';\r\nimport type {SharedQueue} from './ReactUpdateQueue.new';\r\n\r\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\r\nimport {createCursor, push, pop} from './ReactFiberStack.new';\r\nimport {\r\n  ContextProvider,\r\n  ClassComponent,\r\n  DehydratedFragment,\r\n} from './ReactWorkTags';\r\nimport {\r\n  NoLanes,\r\n  NoTimestamp,\r\n  isSubsetOfLanes,\r\n  includesSomeLane,\r\n  mergeLanes,\r\n  pickArbitraryLane,\r\n} from './ReactFiberLane.new';\r\nimport {\r\n  NoFlags,\r\n  DidPropagateContext,\r\n  NeedsPropagation,\r\n} from './ReactFiberFlags';\r\n\r\nimport is from 'shared/objectIs';\r\nimport {createUpdate, ForceUpdate} from './ReactUpdateQueue.new';\r\nimport {markWorkInProgressReceivedUpdate} from './ReactFiberBeginWork.new';\r\nimport {\r\n  enableLazyContextPropagation,\r\n  enableServerContext,\r\n} from 'shared/ReactFeatureFlags';\r\nimport {REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED} from 'shared/ReactSymbols';\r\n\r\nconst valueCursor: StackCursor<mixed> = createCursor(null);\r\n\r\nlet rendererSigil;\r\nif (__DEV__) {\r\n  // Use this to detect multiple renderers using the same context\r\n  rendererSigil = {};\r\n}\r\n\r\nlet currentlyRenderingFiber: Fiber | null = null;\r\nlet lastContextDependency: ContextDependency<mixed> | null = null;\r\nlet lastFullyObservedContext: ReactContext<any> | null = null;\r\n\r\nlet isDisallowedContextReadInDEV: boolean = false;\r\n\r\nexport function resetContextDependencies(): void {\r\n  // This is called right before React yields execution, to ensure `readContext`\r\n  // cannot be called outside the render phase.\r\n  currentlyRenderingFiber = null;\r\n  lastContextDependency = null;\r\n  lastFullyObservedContext = null;\r\n  if (__DEV__) {\r\n    isDisallowedContextReadInDEV = false;\r\n  }\r\n}\r\n\r\nexport function enterDisallowedContextReadInDEV(): void {\r\n  if (__DEV__) {\r\n    isDisallowedContextReadInDEV = true;\r\n  }\r\n}\r\n\r\nexport function exitDisallowedContextReadInDEV(): void {\r\n  if (__DEV__) {\r\n    isDisallowedContextReadInDEV = false;\r\n  }\r\n}\r\n\r\nexport function pushProvider<T>(\r\n  providerFiber: Fiber,\r\n  context: ReactContext<T>,\r\n  nextValue: T,\r\n): void {\r\n  if (isPrimaryRenderer) {\r\n    push(valueCursor, context._currentValue, providerFiber);\r\n\r\n    context._currentValue = nextValue;\r\n    if (__DEV__) {\r\n      if (\r\n        context._currentRenderer !== undefined &&\r\n        context._currentRenderer !== null &&\r\n        context._currentRenderer !== rendererSigil\r\n      ) {\r\n        console.error(\r\n          'Detected multiple renderers concurrently rendering the ' +\r\n            'same context provider. This is currently unsupported.',\r\n        );\r\n      }\r\n      context._currentRenderer = rendererSigil;\r\n    }\r\n  } else {\r\n    push(valueCursor, context._currentValue2, providerFiber);\r\n\r\n    context._currentValue2 = nextValue;\r\n    if (__DEV__) {\r\n      if (\r\n        context._currentRenderer2 !== undefined &&\r\n        context._currentRenderer2 !== null &&\r\n        context._currentRenderer2 !== rendererSigil\r\n      ) {\r\n        console.error(\r\n          'Detected multiple renderers concurrently rendering the ' +\r\n            'same context provider. This is currently unsupported.',\r\n        );\r\n      }\r\n      context._currentRenderer2 = rendererSigil;\r\n    }\r\n  }\r\n}\r\n\r\nexport function popProvider(\r\n  context: ReactContext<any>,\r\n  providerFiber: Fiber,\r\n): void {\r\n  const currentValue = valueCursor.current;\r\n  pop(valueCursor, providerFiber);\r\n  if (isPrimaryRenderer) {\r\n    if (\r\n      enableServerContext &&\r\n      currentValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED\r\n    ) {\r\n      context._currentValue = context._defaultValue;\r\n    } else {\r\n      context._currentValue = currentValue;\r\n    }\r\n  } else {\r\n    if (\r\n      enableServerContext &&\r\n      currentValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED\r\n    ) {\r\n      context._currentValue2 = context._defaultValue;\r\n    } else {\r\n      context._currentValue2 = currentValue;\r\n    }\r\n  }\r\n}\r\n\r\nexport function scheduleContextWorkOnParentPath(\r\n  parent: Fiber | null,\r\n  renderLanes: Lanes,\r\n  propagationRoot: Fiber,\r\n) {\r\n  // Update the child lanes of all the ancestors, including the alternates.\r\n  let node = parent;\r\n  while (node !== null) {\r\n    const alternate = node.alternate;\r\n    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\r\n      node.childLanes = mergeLanes(node.childLanes, renderLanes);\r\n      if (alternate !== null) {\r\n        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\r\n      }\r\n    } else if (\r\n      alternate !== null &&\r\n      !isSubsetOfLanes(alternate.childLanes, renderLanes)\r\n    ) {\r\n      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\r\n    } else {\r\n      // Neither alternate was updated.\r\n      // Normally, this would mean that the rest of the\r\n      // ancestor path already has sufficient priority.\r\n      // However, this is not necessarily true inside offscreen\r\n      // or fallback trees because childLanes may be inconsistent\r\n      // with the surroundings. This is why we continue the loop.\r\n    }\r\n    if (node === propagationRoot) {\r\n      break;\r\n    }\r\n    node = node.return;\r\n  }\r\n  if (__DEV__) {\r\n    if (node !== propagationRoot) {\r\n      console.error(\r\n        'Expected to find the propagation root when scheduling context work. ' +\r\n          'This error is likely caused by a bug in React. Please file an issue.',\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport function propagateContextChange<T>(\r\n  workInProgress: Fiber,\r\n  context: ReactContext<T>,\r\n  renderLanes: Lanes,\r\n): void {\r\n  if (enableLazyContextPropagation) {\r\n    // TODO: This path is only used by Cache components. Update\r\n    // lazilyPropagateParentContextChanges to look for Cache components so they\r\n    // can take advantage of lazy propagation.\r\n    const forcePropagateEntireTree = true;\r\n    propagateContextChanges(\r\n      workInProgress,\r\n      [context],\r\n      renderLanes,\r\n      forcePropagateEntireTree,\r\n    );\r\n  } else {\r\n    propagateContextChange_eager(workInProgress, context, renderLanes);\r\n  }\r\n}\r\n\r\nfunction propagateContextChange_eager<T>(\r\n  workInProgress: Fiber,\r\n  context: ReactContext<T>,\r\n  renderLanes: Lanes,\r\n): void {\r\n  // Only used by eager implementation\r\n  if (enableLazyContextPropagation) {\r\n    return;\r\n  }\r\n  let fiber = workInProgress.child;\r\n  if (fiber !== null) {\r\n    // Set the return pointer of the child to the work-in-progress fiber.\r\n    fiber.return = workInProgress;\r\n  }\r\n  while (fiber !== null) {\r\n    let nextFiber;\r\n\r\n    // Visit this fiber.\r\n    const list = fiber.dependencies;\r\n    if (list !== null) {\r\n      nextFiber = fiber.child;\r\n\r\n      let dependency = list.firstContext;\r\n      while (dependency !== null) {\r\n        // Check if the context matches.\r\n        if (dependency.context === context) {\r\n          // Match! Schedule an update on this fiber.\r\n          if (fiber.tag === ClassComponent) {\r\n            // Schedule a force update on the work-in-progress.\r\n            const lane = pickArbitraryLane(renderLanes);\r\n            const update = createUpdate(NoTimestamp, lane);\r\n            update.tag = ForceUpdate;\r\n            // TODO: Because we don't have a work-in-progress, this will add the\r\n            // update to the current fiber, too, which means it will persist even if\r\n            // this render is thrown away. Since it's a race condition, not sure it's\r\n            // worth fixing.\r\n\r\n            // Inlined `enqueueUpdate` to remove interleaved update check\r\n            const updateQueue = fiber.updateQueue;\r\n            if (updateQueue === null) {\r\n              // Only occurs if the fiber has been unmounted.\r\n            } else {\r\n              const sharedQueue: SharedQueue<any> = (updateQueue: any).shared;\r\n              const pending = sharedQueue.pending;\r\n              if (pending === null) {\r\n                // This is the first update. Create a circular list.\r\n                update.next = update;\r\n              } else {\r\n                update.next = pending.next;\r\n                pending.next = update;\r\n              }\r\n              sharedQueue.pending = update;\r\n            }\r\n          }\r\n\r\n          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\r\n          const alternate = fiber.alternate;\r\n          if (alternate !== null) {\r\n            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\r\n          }\r\n          scheduleContextWorkOnParentPath(\r\n            fiber.return,\r\n            renderLanes,\r\n            workInProgress,\r\n          );\r\n\r\n          // Mark the updated lanes on the list, too.\r\n          list.lanes = mergeLanes(list.lanes, renderLanes);\r\n\r\n          // Since we already found a match, we can stop traversing the\r\n          // dependency list.\r\n          break;\r\n        }\r\n        dependency = dependency.next;\r\n      }\r\n    } else if (fiber.tag === ContextProvider) {\r\n      // Don't scan deeper if this is a matching provider\r\n      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\r\n    } else if (fiber.tag === DehydratedFragment) {\r\n      // If a dehydrated suspense boundary is in this subtree, we don't know\r\n      // if it will have any context consumers in it. The best we can do is\r\n      // mark it as having updates.\r\n      const parentSuspense = fiber.return;\r\n\r\n      if (parentSuspense === null) {\r\n        throw new Error(\r\n          'We just came from a parent so we must have had a parent. This is a bug in React.',\r\n        );\r\n      }\r\n\r\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\r\n      const alternate = parentSuspense.alternate;\r\n      if (alternate !== null) {\r\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\r\n      }\r\n      // This is intentionally passing this fiber as the parent\r\n      // because we want to schedule this fiber as having work\r\n      // on its children. We'll use the childLanes on\r\n      // this fiber to indicate that a context has changed.\r\n      scheduleContextWorkOnParentPath(\r\n        parentSuspense,\r\n        renderLanes,\r\n        workInProgress,\r\n      );\r\n      nextFiber = fiber.sibling;\r\n    } else {\r\n      // Traverse down.\r\n      nextFiber = fiber.child;\r\n    }\r\n\r\n    if (nextFiber !== null) {\r\n      // Set the return pointer of the child to the work-in-progress fiber.\r\n      nextFiber.return = fiber;\r\n    } else {\r\n      // No child. Traverse to next sibling.\r\n      nextFiber = fiber;\r\n      while (nextFiber !== null) {\r\n        if (nextFiber === workInProgress) {\r\n          // We're back to the root of this subtree. Exit.\r\n          nextFiber = null;\r\n          break;\r\n        }\r\n        const sibling = nextFiber.sibling;\r\n        if (sibling !== null) {\r\n          // Set the return pointer of the sibling to the work-in-progress fiber.\r\n          sibling.return = nextFiber.return;\r\n          nextFiber = sibling;\r\n          break;\r\n        }\r\n        // No more siblings. Traverse up.\r\n        nextFiber = nextFiber.return;\r\n      }\r\n    }\r\n    fiber = nextFiber;\r\n  }\r\n}\r\n\r\nfunction propagateContextChanges<T>(\r\n  workInProgress: Fiber,\r\n  contexts: Array<any>,\r\n  renderLanes: Lanes,\r\n  forcePropagateEntireTree: boolean,\r\n): void {\r\n  // Only used by lazy implementation\r\n  if (!enableLazyContextPropagation) {\r\n    return;\r\n  }\r\n  let fiber = workInProgress.child;\r\n  if (fiber !== null) {\r\n    // Set the return pointer of the child to the work-in-progress fiber.\r\n    fiber.return = workInProgress;\r\n  }\r\n  while (fiber !== null) {\r\n    let nextFiber;\r\n\r\n    // Visit this fiber.\r\n    const list = fiber.dependencies;\r\n    if (list !== null) {\r\n      nextFiber = fiber.child;\r\n\r\n      let dep = list.firstContext;\r\n      findChangedDep: while (dep !== null) {\r\n        // Assigning these to constants to help Flow\r\n        const dependency = dep;\r\n        const consumer = fiber;\r\n        findContext: for (let i = 0; i < contexts.length; i++) {\r\n          const context: ReactContext<T> = contexts[i];\r\n          // Check if the context matches.\r\n          // TODO: Compare selected values to bail out early.\r\n          if (dependency.context === context) {\r\n            // Match! Schedule an update on this fiber.\r\n\r\n            // In the lazy implementation, don't mark a dirty flag on the\r\n            // dependency itself. Not all changes are propagated, so we can't\r\n            // rely on the propagation function alone to determine whether\r\n            // something has changed; the consumer will check. In the future, we\r\n            // could add back a dirty flag as an optimization to avoid double\r\n            // checking, but until we have selectors it's not really worth\r\n            // the trouble.\r\n            consumer.lanes = mergeLanes(consumer.lanes, renderLanes);\r\n            const alternate = consumer.alternate;\r\n            if (alternate !== null) {\r\n              alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\r\n            }\r\n            scheduleContextWorkOnParentPath(\r\n              consumer.return,\r\n              renderLanes,\r\n              workInProgress,\r\n            );\r\n\r\n            if (!forcePropagateEntireTree) {\r\n              // During lazy propagation, when we find a match, we can defer\r\n              // propagating changes to the children, because we're going to\r\n              // visit them during render. We should continue propagating the\r\n              // siblings, though\r\n              nextFiber = null;\r\n            }\r\n\r\n            // Since we already found a match, we can stop traversing the\r\n            // dependency list.\r\n            break findChangedDep;\r\n          }\r\n        }\r\n        dep = dependency.next;\r\n      }\r\n    } else if (fiber.tag === DehydratedFragment) {\r\n      // If a dehydrated suspense boundary is in this subtree, we don't know\r\n      // if it will have any context consumers in it. The best we can do is\r\n      // mark it as having updates.\r\n      const parentSuspense = fiber.return;\r\n\r\n      if (parentSuspense === null) {\r\n        throw new Error(\r\n          'We just came from a parent so we must have had a parent. This is a bug in React.',\r\n        );\r\n      }\r\n\r\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\r\n      const alternate = parentSuspense.alternate;\r\n      if (alternate !== null) {\r\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\r\n      }\r\n      // This is intentionally passing this fiber as the parent\r\n      // because we want to schedule this fiber as having work\r\n      // on its children. We'll use the childLanes on\r\n      // this fiber to indicate that a context has changed.\r\n      scheduleContextWorkOnParentPath(\r\n        parentSuspense,\r\n        renderLanes,\r\n        workInProgress,\r\n      );\r\n      nextFiber = null;\r\n    } else {\r\n      // Traverse down.\r\n      nextFiber = fiber.child;\r\n    }\r\n\r\n    if (nextFiber !== null) {\r\n      // Set the return pointer of the child to the work-in-progress fiber.\r\n      nextFiber.return = fiber;\r\n    } else {\r\n      // No child. Traverse to next sibling.\r\n      nextFiber = fiber;\r\n      while (nextFiber !== null) {\r\n        if (nextFiber === workInProgress) {\r\n          // We're back to the root of this subtree. Exit.\r\n          nextFiber = null;\r\n          break;\r\n        }\r\n        const sibling = nextFiber.sibling;\r\n        if (sibling !== null) {\r\n          // Set the return pointer of the sibling to the work-in-progress fiber.\r\n          sibling.return = nextFiber.return;\r\n          nextFiber = sibling;\r\n          break;\r\n        }\r\n        // No more siblings. Traverse up.\r\n        nextFiber = nextFiber.return;\r\n      }\r\n    }\r\n    fiber = nextFiber;\r\n  }\r\n}\r\n\r\nexport function lazilyPropagateParentContextChanges(\r\n  current: Fiber,\r\n  workInProgress: Fiber,\r\n  renderLanes: Lanes,\r\n) {\r\n  const forcePropagateEntireTree = false;\r\n  propagateParentContextChanges(\r\n    current,\r\n    workInProgress,\r\n    renderLanes,\r\n    forcePropagateEntireTree,\r\n  );\r\n}\r\n\r\n// Used for propagating a deferred tree (Suspense, Offscreen). We must propagate\r\n// to the entire subtree, because we won't revisit it until after the current\r\n// render has completed, at which point we'll have lost track of which providers\r\n// have changed.\r\nexport function propagateParentContextChangesToDeferredTree(\r\n  current: Fiber,\r\n  workInProgress: Fiber,\r\n  renderLanes: Lanes,\r\n) {\r\n  const forcePropagateEntireTree = true;\r\n  propagateParentContextChanges(\r\n    current,\r\n    workInProgress,\r\n    renderLanes,\r\n    forcePropagateEntireTree,\r\n  );\r\n}\r\n\r\nfunction propagateParentContextChanges(\r\n  current: Fiber,\r\n  workInProgress: Fiber,\r\n  renderLanes: Lanes,\r\n  forcePropagateEntireTree: boolean,\r\n) {\r\n  if (!enableLazyContextPropagation) {\r\n    return;\r\n  }\r\n\r\n  // Collect all the parent providers that changed. Since this is usually small\r\n  // number, we use an Array instead of Set.\r\n  let contexts = null;\r\n  let parent = workInProgress;\r\n  let isInsidePropagationBailout = false;\r\n  while (parent !== null) {\r\n    if (!isInsidePropagationBailout) {\r\n      if ((parent.flags & NeedsPropagation) !== NoFlags) {\r\n        isInsidePropagationBailout = true;\r\n      } else if ((parent.flags & DidPropagateContext) !== NoFlags) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (parent.tag === ContextProvider) {\r\n      const currentParent = parent.alternate;\r\n\r\n      if (currentParent === null) {\r\n        throw new Error('Should have a current fiber. This is a bug in React.');\r\n      }\r\n\r\n      const oldProps = currentParent.memoizedProps;\r\n      if (oldProps !== null) {\r\n        const providerType: ReactProviderType<any> = parent.type;\r\n        const context: ReactContext<any> = providerType._context;\r\n\r\n        const newProps = parent.pendingProps;\r\n        const newValue = newProps.value;\r\n\r\n        const oldValue = oldProps.value;\r\n\r\n        if (!is(newValue, oldValue)) {\r\n          if (contexts !== null) {\r\n            contexts.push(context);\r\n          } else {\r\n            contexts = [context];\r\n          }\r\n        }\r\n      }\r\n    }\r\n    parent = parent.return;\r\n  }\r\n\r\n  if (contexts !== null) {\r\n    // If there were any changed providers, search through the children and\r\n    // propagate their changes.\r\n    propagateContextChanges(\r\n      workInProgress,\r\n      contexts,\r\n      renderLanes,\r\n      forcePropagateEntireTree,\r\n    );\r\n  }\r\n\r\n  // This is an optimization so that we only propagate once per subtree. If a\r\n  // deeply nested child bails out, and it calls this propagation function, it\r\n  // uses this flag to know that the remaining ancestor providers have already\r\n  // been propagated.\r\n  //\r\n  // NOTE: This optimization is only necessary because we sometimes enter the\r\n  // begin phase of nodes that don't have any work scheduled on them —\r\n  // specifically, the siblings of a node that _does_ have scheduled work. The\r\n  // siblings will bail out and call this function again, even though we already\r\n  // propagated content changes to it and its subtree. So we use this flag to\r\n  // mark that the parent providers already propagated.\r\n  //\r\n  // Unfortunately, though, we need to ignore this flag when we're inside a\r\n  // tree whose context propagation was deferred — that's what the\r\n  // `NeedsPropagation` flag is for.\r\n  //\r\n  // If we could instead bail out before entering the siblings' begin phase,\r\n  // then we could remove both `DidPropagateContext` and `NeedsPropagation`.\r\n  // Consider this as part of the next refactor to the fiber tree structure.\r\n  workInProgress.flags |= DidPropagateContext;\r\n}\r\n\r\nexport function checkIfContextChanged(currentDependencies: Dependencies) {\r\n  if (!enableLazyContextPropagation) {\r\n    return false;\r\n  }\r\n  // Iterate over the current dependencies to see if something changed. This\r\n  // only gets called if props and state has already bailed out, so it's a\r\n  // relatively uncommon path, except at the root of a changed subtree.\r\n  // Alternatively, we could move these comparisons into `readContext`, but\r\n  // that's a much hotter path, so I think this is an appropriate trade off.\r\n  let dependency = currentDependencies.firstContext;\r\n  while (dependency !== null) {\r\n    const context = dependency.context;\r\n    const newValue = isPrimaryRenderer\r\n      ? context._currentValue\r\n      : context._currentValue2;\r\n    const oldValue = dependency.memoizedValue;\r\n    if (!is(newValue, oldValue)) {\r\n      return true;\r\n    }\r\n    dependency = dependency.next;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function prepareToReadContext(\r\n  workInProgress: Fiber,\r\n  renderLanes: Lanes,\r\n): void {\r\n  currentlyRenderingFiber = workInProgress;\r\n  lastContextDependency = null;\r\n  lastFullyObservedContext = null;\r\n\r\n  const dependencies = workInProgress.dependencies;\r\n  if (dependencies !== null) {\r\n    if (enableLazyContextPropagation) {\r\n      // Reset the work-in-progress list\r\n      dependencies.firstContext = null;\r\n    } else {\r\n      const firstContext = dependencies.firstContext;\r\n      if (firstContext !== null) {\r\n        if (includesSomeLane(dependencies.lanes, renderLanes)) {\r\n          // Context list has a pending update. Mark that this fiber performed work.\r\n          markWorkInProgressReceivedUpdate();\r\n        }\r\n        // Reset the work-in-progress list\r\n        dependencies.firstContext = null;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function readContext<T>(context: ReactContext<T>): T {\r\n  if (__DEV__) {\r\n    // This warning would fire if you read context inside a Hook like useMemo.\r\n    // Unlike the class check below, it's not enforced in production for perf.\r\n    if (isDisallowedContextReadInDEV) {\r\n      console.error(\r\n        'Context can only be read while React is rendering. ' +\r\n          'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\r\n          'In function components, you can read it directly in the function body, but not ' +\r\n          'inside Hooks like useReducer() or useMemo().',\r\n      );\r\n    }\r\n  }\r\n\r\n  const value = isPrimaryRenderer\r\n    ? context._currentValue\r\n    : context._currentValue2;\r\n\r\n  if (lastFullyObservedContext === context) {\r\n    // Nothing to do. We already observe everything in this context.\r\n  } else {\r\n    const contextItem = {\r\n      context: ((context: any): ReactContext<mixed>),\r\n      memoizedValue: value,\r\n      next: null,\r\n    };\r\n\r\n    if (lastContextDependency === null) {\r\n      if (currentlyRenderingFiber === null) {\r\n        throw new Error(\r\n          'Context can only be read while React is rendering. ' +\r\n            'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\r\n            'In function components, you can read it directly in the function body, but not ' +\r\n            'inside Hooks like useReducer() or useMemo().',\r\n        );\r\n      }\r\n\r\n      // This is the first dependency for this component. Create a new list.\r\n      lastContextDependency = contextItem;\r\n      currentlyRenderingFiber.dependencies = {\r\n        lanes: NoLanes,\r\n        firstContext: contextItem,\r\n      };\r\n      if (enableLazyContextPropagation) {\r\n        currentlyRenderingFiber.flags |= NeedsPropagation;\r\n      }\r\n    } else {\r\n      // Append a new context item.\r\n      lastContextDependency = lastContextDependency.next = contextItem;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}