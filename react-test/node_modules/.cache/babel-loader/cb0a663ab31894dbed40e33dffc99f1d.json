{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport { REACT_ELEMENT_TYPE } from 'shared/ReactSymbols';\nimport assign from 'shared/assign';\nimport hasOwnProperty from 'shared/hasOwnProperty';\nimport { checkKeyStringCoercion } from 'shared/CheckStringCoercion';\nimport ReactCurrentOwner from './ReactCurrentOwner';\nconst RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nlet specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;\n\nif (__DEV__) {\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  if (__DEV__) {\n    if (hasOwnProperty.call(config, 'ref')) {\n      const getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  if (__DEV__) {\n    if (hasOwnProperty.call(config, 'key')) {\n      const getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  const warnAboutAccessingKey = function () {\n    if (__DEV__) {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n        console.error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    }\n  };\n\n  warnAboutAccessingKey.isReactWarning = true;\n  Object.defineProperty(props, 'key', {\n    get: warnAboutAccessingKey,\n    configurable: true\n  });\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  const warnAboutAccessingRef = function () {\n    if (__DEV__) {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n        console.error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    }\n  };\n\n  warnAboutAccessingRef.isReactWarning = true;\n  Object.defineProperty(props, 'ref', {\n    get: warnAboutAccessingRef,\n    configurable: true\n  });\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config) {\n  if (__DEV__) {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {\n      const componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        console.error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n/**\r\n * Factory method to create a new React element. This no longer adheres to\r\n * the class pattern, so do not use new to call it. Also, instanceof check\r\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\r\n * if something is a React Element.\r\n *\r\n * @param {*} type\r\n * @param {*} props\r\n * @param {*} key\r\n * @param {string|object} ref\r\n * @param {*} owner\r\n * @param {*} self A *temporary* helper to detect places where `this` is\r\n * different from the `owner` when React.createElement is called, so that we\r\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\r\n * functions, and as long as `this` and owner are the same, there will be no\r\n * change in behavior.\r\n * @param {*} source An annotation object (added by a transpiler or otherwise)\r\n * indicating filename, line number, and/or other information.\r\n * @internal\r\n */\n\n\nconst ReactElement = function (type, key, ref, self, source, owner, props) {\n  // type,\n  // key,\n  // ref,\n  // self,\n  // source,\n  // ReactCurrentOwner.current,\n  // props\n  const element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  if (__DEV__) {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    });\n    console.log(element, \"构造_store属性对象为不可配置，不可枚举，可写，值为validated：false的对象\"); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n    console.log(element, \"将_self，_source设置为不可配置，不可枚举，不可写\");\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n\n    console.log(element, \"冻结element.props和element对象\");\n  }\n\n  console.log(\"虚拟DOM必要数据构造完毕\");\n  return element;\n};\n/**\r\n * https://github.com/reactjs/rfcs/pull/107\r\n * @param {*} type\r\n * @param {object} props\r\n * @param {string} key\r\n */\n\n\n_c = ReactElement;\nexport function jsx(type, config, maybeKey) {\n  let propName; // Reserved names are extracted\n\n  const props = {};\n  let key = null;\n  let ref = null; // Currently, key can be spread in as a prop. This causes a potential\n  // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n  // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n  // but as an intermediary step, we will use jsxDEV for everything except\n  // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n  // key is explicitly declared to be undefined or not.\n\n  if (maybeKey !== undefined) {\n    if (__DEV__) {\n      checkKeyStringCoercion(maybeKey);\n    }\n\n    key = '' + maybeKey;\n  }\n\n  if (hasValidKey(config)) {\n    if (__DEV__) {\n      checkKeyStringCoercion(config.key);\n    }\n\n    key = '' + config.key;\n  }\n\n  if (hasValidRef(config)) {\n    ref = config.ref;\n  } // Remaining properties are added to a new props object\n\n\n  for (propName in config) {\n    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n      props[propName] = config[propName];\n    }\n  } // Resolve default props\n\n\n  if (type && type.defaultProps) {\n    const defaultProps = type.defaultProps;\n\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  return ReactElement(type, key, ref, undefined, undefined, ReactCurrentOwner.current, props);\n}\n/**\r\n * https://github.com/reactjs/rfcs/pull/107\r\n * @param {*} type\r\n * @param {object} props\r\n * @param {string} key\r\n */\n\nexport function jsxDEV(type, config, maybeKey, source, self) {\n  let propName; // Reserved names are extracted\n\n  const props = {};\n  let key = null;\n  let ref = null; // Currently, key can be spread in as a prop. This causes a potential\n  // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n  // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n  // but as an intermediary step, we will use jsxDEV for everything except\n  // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n  // key is explicitly declared to be undefined or not.\n\n  if (maybeKey !== undefined) {\n    if (__DEV__) {\n      checkKeyStringCoercion(maybeKey);\n    }\n\n    key = '' + maybeKey;\n  }\n\n  if (hasValidKey(config)) {\n    if (__DEV__) {\n      checkKeyStringCoercion(config.key);\n    }\n\n    key = '' + config.key;\n  }\n\n  if (hasValidRef(config)) {\n    ref = config.ref;\n    warnIfStringRefCannotBeAutoConverted(config);\n  } // Remaining properties are added to a new props object\n\n\n  for (propName in config) {\n    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n      props[propName] = config[propName];\n    }\n  } // Resolve default props\n\n\n  if (type && type.defaultProps) {\n    const defaultProps = type.defaultProps;\n\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  if (key || ref) {\n    const displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n    if (key) {\n      defineKeyPropWarningGetter(props, displayName);\n    }\n\n    if (ref) {\n      defineRefPropWarningGetter(props, displayName);\n    }\n  }\n\n  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n}\n/**\r\n * Create and return a new ReactElement of the given type.\r\n * See https://reactjs.org/docs/react-api.html#createelement\r\n */\n\nexport function createElement(type, config, children) {\n  console.log({\n    type,\n    key,\n    ref,\n    self,\n    source,\n    current: ReactCurrentOwner.current,\n    props\n  }, \"基本数据结构规划完毕\");\n  let propName; // Reserved names are extracted\n\n  const props = {};\n  let key = null;\n  let ref = null;\n  let self = null;\n  let source = null;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      ref = config.ref;\n\n      if (__DEV__) {\n        warnIfStringRefCannotBeAutoConverted(config);\n      }\n    }\n\n    if (hasValidKey(config)) {\n      if (__DEV__) {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    self = config.__self === undefined ? null : config.__self;\n    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    }\n  } // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n\n\n  const childrenLength = arguments.length - 2;\n\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    const childArray = Array(childrenLength);\n\n    for (let i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n\n    if (__DEV__) {\n      if (Object.freeze) {\n        Object.freeze(childArray);\n      }\n    }\n\n    props.children = childArray;\n  } // Resolve default props\n\n\n  if (type && type.defaultProps) {\n    const defaultProps = type.defaultProps;\n\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  if (__DEV__) {\n    if (key || ref) {\n      const displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n  } // TODO next\n\n\n  console.log({\n    type,\n    key,\n    ref,\n    self,\n    source,\n    current: ReactCurrentOwner.current,\n    props\n  }, \"基本数据结构规划完毕\");\n  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n}\n/**\r\n * Return a function that produces ReactElements of a given type.\r\n * See https://reactjs.org/docs/react-api.html#createfactory\r\n */\n\nexport function createFactory(type) {\n  const factory = createElement.bind(null, type); // Expose the type on the factory and the prototype so that it can be\n  // easily accessed on elements. E.g. `<Foo />.type === Foo`.\n  // This should not be named `constructor` since this may not be the function\n  // that created the element, and it may not even be a constructor.\n  // Legacy hook: remove it\n\n  factory.type = type;\n  return factory;\n}\nexport function cloneAndReplaceKey(oldElement, newKey) {\n  const newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n  return newElement;\n}\n/**\r\n * Clone and return a new ReactElement using element as the starting point.\r\n * See https://reactjs.org/docs/react-api.html#cloneelement\r\n */\n\nexport function cloneElement(element, config, children) {\n  if (element === null || element === undefined) {\n    throw new Error(`React.cloneElement(...): The argument must be a React element, but you passed ${element}.`);\n  }\n\n  let propName; // Original props are copied\n\n  const props = assign({}, element.props); // Reserved names are extracted\n\n  let key = element.key;\n  let ref = element.ref; // Self is preserved since the owner is preserved.\n\n  const self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a\n  // transpiler, and the original source is probably a better indicator of the\n  // true owner.\n\n  const source = element._source; // Owner will be preserved, unless ref is overridden\n\n  let owner = element._owner;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      // Silently steal the ref from the parent.\n      ref = config.ref;\n      owner = ReactCurrentOwner.current;\n    }\n\n    if (hasValidKey(config)) {\n      if (__DEV__) {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    } // Remaining properties override existing props\n\n\n    let defaultProps;\n\n    if (element.type && element.type.defaultProps) {\n      defaultProps = element.type.defaultProps;\n    }\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        if (config[propName] === undefined && defaultProps !== undefined) {\n          // Resolve default props\n          props[propName] = defaultProps[propName];\n        } else {\n          props[propName] = config[propName];\n        }\n      }\n    }\n  } // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n\n\n  const childrenLength = arguments.length - 2;\n\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    const childArray = Array(childrenLength);\n\n    for (let i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n\n    props.children = childArray;\n  }\n\n  return ReactElement(element.type, key, ref, self, source, owner, props);\n}\n/**\r\n * Verifies the object is a ReactElement.\r\n * See https://reactjs.org/docs/react-api.html#isvalidelement\r\n * @param {?object} object\r\n * @return {boolean} True if `object` is a ReactElement.\r\n * @final\r\n */\n\nexport function isValidElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ReactElement\");","map":{"version":3,"names":["getComponentNameFromType","REACT_ELEMENT_TYPE","assign","hasOwnProperty","checkKeyStringCoercion","ReactCurrentOwner","RESERVED_PROPS","key","ref","__self","__source","specialPropKeyWarningShown","specialPropRefWarningShown","didWarnAboutStringRefs","__DEV__","hasValidRef","config","call","getter","Object","getOwnPropertyDescriptor","get","isReactWarning","undefined","hasValidKey","defineKeyPropWarningGetter","props","displayName","warnAboutAccessingKey","console","error","defineProperty","configurable","defineRefPropWarningGetter","warnAboutAccessingRef","warnIfStringRefCannotBeAutoConverted","current","stateNode","componentName","type","ReactElement","self","source","owner","element","$$typeof","_owner","_store","enumerable","writable","value","log","freeze","jsx","maybeKey","propName","defaultProps","jsxDEV","name","createElement","children","childrenLength","arguments","length","childArray","Array","i","createFactory","factory","bind","cloneAndReplaceKey","oldElement","newKey","newElement","_self","_source","cloneElement","Error","isValidElement","object"],"sources":["D:/project/font-end/debug-anything/react-test/src/react/packages/react/src/ReactElement.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\r\nimport { REACT_ELEMENT_TYPE } from 'shared/ReactSymbols';\r\nimport assign from 'shared/assign';\r\nimport hasOwnProperty from 'shared/hasOwnProperty';\r\nimport { checkKeyStringCoercion } from 'shared/CheckStringCoercion';\r\n\r\nimport ReactCurrentOwner from './ReactCurrentOwner';\r\n\r\nconst RESERVED_PROPS = {\r\n  key: true,\r\n  ref: true,\r\n  __self: true,\r\n  __source: true,\r\n};\r\n\r\nlet specialPropKeyWarningShown,\r\n  specialPropRefWarningShown,\r\n  didWarnAboutStringRefs;\r\n\r\nif (__DEV__) {\r\n  didWarnAboutStringRefs = {};\r\n}\r\n\r\nfunction hasValidRef (config) {\r\n  if (__DEV__) {\r\n    if (hasOwnProperty.call(config, 'ref')) {\r\n      const getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\r\n      if (getter && getter.isReactWarning) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return config.ref !== undefined;\r\n}\r\n\r\nfunction hasValidKey (config) {\r\n  if (__DEV__) {\r\n    if (hasOwnProperty.call(config, 'key')) {\r\n      const getter = Object.getOwnPropertyDescriptor(config, 'key').get;\r\n      if (getter && getter.isReactWarning) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return config.key !== undefined;\r\n}\r\n\r\nfunction defineKeyPropWarningGetter (props, displayName) {\r\n  const warnAboutAccessingKey = function () {\r\n    if (__DEV__) {\r\n      if (!specialPropKeyWarningShown) {\r\n        specialPropKeyWarningShown = true;\r\n        console.error(\r\n          '%s: `key` is not a prop. Trying to access it will result ' +\r\n          'in `undefined` being returned. If you need to access the same ' +\r\n          'value within the child component, you should pass it as a different ' +\r\n          'prop. (https://reactjs.org/link/special-props)',\r\n          displayName,\r\n        );\r\n      }\r\n    }\r\n  };\r\n  warnAboutAccessingKey.isReactWarning = true;\r\n  Object.defineProperty(props, 'key', {\r\n    get: warnAboutAccessingKey,\r\n    configurable: true,\r\n  });\r\n}\r\n\r\nfunction defineRefPropWarningGetter (props, displayName) {\r\n  const warnAboutAccessingRef = function () {\r\n    if (__DEV__) {\r\n      if (!specialPropRefWarningShown) {\r\n        specialPropRefWarningShown = true;\r\n        console.error(\r\n          '%s: `ref` is not a prop. Trying to access it will result ' +\r\n          'in `undefined` being returned. If you need to access the same ' +\r\n          'value within the child component, you should pass it as a different ' +\r\n          'prop. (https://reactjs.org/link/special-props)',\r\n          displayName,\r\n        );\r\n      }\r\n    }\r\n  };\r\n  warnAboutAccessingRef.isReactWarning = true;\r\n  Object.defineProperty(props, 'ref', {\r\n    get: warnAboutAccessingRef,\r\n    configurable: true,\r\n  });\r\n}\r\n\r\nfunction warnIfStringRefCannotBeAutoConverted (config) {\r\n  if (__DEV__) {\r\n    if (\r\n      typeof config.ref === 'string' &&\r\n      ReactCurrentOwner.current &&\r\n      config.__self &&\r\n      ReactCurrentOwner.current.stateNode !== config.__self\r\n    ) {\r\n      const componentName = getComponentNameFromType(\r\n        ReactCurrentOwner.current.type,\r\n      );\r\n\r\n      if (!didWarnAboutStringRefs[componentName]) {\r\n        console.error(\r\n          'Component \"%s\" contains the string ref \"%s\". ' +\r\n          'Support for string refs will be removed in a future major release. ' +\r\n          'This case cannot be automatically converted to an arrow function. ' +\r\n          'We ask you to manually fix this case by using useRef() or createRef() instead. ' +\r\n          'Learn more about using refs safely here: ' +\r\n          'https://reactjs.org/link/strict-mode-string-ref',\r\n          componentName,\r\n          config.ref,\r\n        );\r\n        didWarnAboutStringRefs[componentName] = true;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Factory method to create a new React element. This no longer adheres to\r\n * the class pattern, so do not use new to call it. Also, instanceof check\r\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\r\n * if something is a React Element.\r\n *\r\n * @param {*} type\r\n * @param {*} props\r\n * @param {*} key\r\n * @param {string|object} ref\r\n * @param {*} owner\r\n * @param {*} self A *temporary* helper to detect places where `this` is\r\n * different from the `owner` when React.createElement is called, so that we\r\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\r\n * functions, and as long as `this` and owner are the same, there will be no\r\n * change in behavior.\r\n * @param {*} source An annotation object (added by a transpiler or otherwise)\r\n * indicating filename, line number, and/or other information.\r\n * @internal\r\n */\r\nconst ReactElement = function (type, key, ref, self, source, owner, props) {\r\n  // type,\r\n  // key,\r\n  // ref,\r\n  // self,\r\n  // source,\r\n  // ReactCurrentOwner.current,\r\n  // props\r\n  const element = {\r\n    // This tag allows us to uniquely identify this as a React Element\r\n    $$typeof: REACT_ELEMENT_TYPE,\r\n\r\n    // Built-in properties that belong on the element\r\n    type: type,\r\n    key: key,\r\n    ref: ref,\r\n    props: props,\r\n\r\n    // Record the component responsible for creating this element.\r\n    _owner: owner,\r\n  };\r\n\r\n  if (__DEV__) {\r\n    // The validation flag is currently mutative. We put it on\r\n    // an external backing store so that we can freeze the whole object.\r\n    // This can be replaced with a WeakMap once they are implemented in\r\n    // commonly used development environments.\r\n    element._store = {};\r\n    // To make comparing ReactElements easier for testing purposes, we make\r\n    // the validation flag non-enumerable (where possible, which should\r\n    // include every environment we run tests in), so the test framework\r\n    // ignores it.\r\n    Object.defineProperty(element._store, 'validated', {\r\n      configurable: false,\r\n      enumerable: false,\r\n      writable: true,\r\n      value: false,\r\n    });\r\n    console.log(element, \"构造_store属性对象为不可配置，不可枚举，可写，值为validated：false的对象\")\r\n\r\n    // self and source are DEV only properties.\r\n    Object.defineProperty(element, '_self', {\r\n      configurable: false,\r\n      enumerable: false,\r\n      writable: false,\r\n      value: self,\r\n    });\r\n    // Two elements created in two different places should be considered\r\n    // equal for testing purposes and therefore we hide it from enumeration.\r\n    Object.defineProperty(element, '_source', {\r\n      configurable: false,\r\n      enumerable: false,\r\n      writable: false,\r\n      value: source,\r\n    });\r\n    console.log(element, \"将_self，_source设置为不可配置，不可枚举，不可写\")\r\n    if (Object.freeze) {\r\n      Object.freeze(element.props);\r\n      Object.freeze(element);\r\n    }\r\n    console.log(element, \"冻结element.props和element对象\")\r\n  }\r\n  console.log(\"虚拟DOM必要数据构造完毕\")\r\n  return element;\r\n};\r\n\r\n/**\r\n * https://github.com/reactjs/rfcs/pull/107\r\n * @param {*} type\r\n * @param {object} props\r\n * @param {string} key\r\n */\r\nexport function jsx (type, config, maybeKey) {\r\n  let propName;\r\n\r\n  // Reserved names are extracted\r\n  const props = {};\r\n\r\n  let key = null;\r\n  let ref = null;\r\n\r\n  // Currently, key can be spread in as a prop. This causes a potential\r\n  // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\r\n  // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\r\n  // but as an intermediary step, we will use jsxDEV for everything except\r\n  // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\r\n  // key is explicitly declared to be undefined or not.\r\n  if (maybeKey !== undefined) {\r\n    if (__DEV__) {\r\n      checkKeyStringCoercion(maybeKey);\r\n    }\r\n    key = '' + maybeKey;\r\n  }\r\n\r\n  if (hasValidKey(config)) {\r\n    if (__DEV__) {\r\n      checkKeyStringCoercion(config.key);\r\n    }\r\n    key = '' + config.key;\r\n  }\r\n\r\n  if (hasValidRef(config)) {\r\n    ref = config.ref;\r\n  }\r\n\r\n  // Remaining properties are added to a new props object\r\n  for (propName in config) {\r\n    if (\r\n      hasOwnProperty.call(config, propName) &&\r\n      !RESERVED_PROPS.hasOwnProperty(propName)\r\n    ) {\r\n      props[propName] = config[propName];\r\n    }\r\n  }\r\n\r\n  // Resolve default props\r\n  if (type && type.defaultProps) {\r\n    const defaultProps = type.defaultProps;\r\n    for (propName in defaultProps) {\r\n      if (props[propName] === undefined) {\r\n        props[propName] = defaultProps[propName];\r\n      }\r\n    }\r\n  }\r\n\r\n  return ReactElement(\r\n    type,\r\n    key,\r\n    ref,\r\n    undefined,\r\n    undefined,\r\n    ReactCurrentOwner.current,\r\n    props,\r\n  );\r\n}\r\n\r\n/**\r\n * https://github.com/reactjs/rfcs/pull/107\r\n * @param {*} type\r\n * @param {object} props\r\n * @param {string} key\r\n */\r\nexport function jsxDEV (type, config, maybeKey, source, self) {\r\n  let propName;\r\n\r\n  // Reserved names are extracted\r\n  const props = {};\r\n\r\n  let key = null;\r\n  let ref = null;\r\n\r\n  // Currently, key can be spread in as a prop. This causes a potential\r\n  // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\r\n  // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\r\n  // but as an intermediary step, we will use jsxDEV for everything except\r\n  // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\r\n  // key is explicitly declared to be undefined or not.\r\n  if (maybeKey !== undefined) {\r\n    if (__DEV__) {\r\n      checkKeyStringCoercion(maybeKey);\r\n    }\r\n    key = '' + maybeKey;\r\n  }\r\n\r\n  if (hasValidKey(config)) {\r\n    if (__DEV__) {\r\n      checkKeyStringCoercion(config.key);\r\n    }\r\n    key = '' + config.key;\r\n  }\r\n\r\n  if (hasValidRef(config)) {\r\n    ref = config.ref;\r\n    warnIfStringRefCannotBeAutoConverted(config);\r\n  }\r\n\r\n  // Remaining properties are added to a new props object\r\n  for (propName in config) {\r\n    if (\r\n      hasOwnProperty.call(config, propName) &&\r\n      !RESERVED_PROPS.hasOwnProperty(propName)\r\n    ) {\r\n      props[propName] = config[propName];\r\n    }\r\n  }\r\n\r\n  // Resolve default props\r\n  if (type && type.defaultProps) {\r\n    const defaultProps = type.defaultProps;\r\n    for (propName in defaultProps) {\r\n      if (props[propName] === undefined) {\r\n        props[propName] = defaultProps[propName];\r\n      }\r\n    }\r\n  }\r\n\r\n  if (key || ref) {\r\n    const displayName =\r\n      typeof type === 'function'\r\n        ? type.displayName || type.name || 'Unknown'\r\n        : type;\r\n    if (key) {\r\n      defineKeyPropWarningGetter(props, displayName);\r\n    }\r\n    if (ref) {\r\n      defineRefPropWarningGetter(props, displayName);\r\n    }\r\n  }\r\n\r\n  return ReactElement(\r\n    type,\r\n    key,\r\n    ref,\r\n    self,\r\n    source,\r\n    ReactCurrentOwner.current,\r\n    props,\r\n  );\r\n}\r\n\r\n/**\r\n * Create and return a new ReactElement of the given type.\r\n * See https://reactjs.org/docs/react-api.html#createelement\r\n */\r\nexport function createElement (type, config, children) {\r\n  console.log({\r\n    type,\r\n    key,\r\n    ref,\r\n    self,\r\n    source,\r\n    current: ReactCurrentOwner.current,\r\n    props\r\n  }, \"基本数据结构规划完毕\")\r\n  let propName;\r\n\r\n  // Reserved names are extracted\r\n  const props = {};\r\n\r\n  let key = null;\r\n  let ref = null;\r\n  let self = null;\r\n  let source = null;\r\n\r\n  if (config != null) {\r\n    if (hasValidRef(config)) {\r\n      ref = config.ref;\r\n\r\n      if (__DEV__) {\r\n        warnIfStringRefCannotBeAutoConverted(config);\r\n      }\r\n    }\r\n    if (hasValidKey(config)) {\r\n      if (__DEV__) {\r\n        checkKeyStringCoercion(config.key);\r\n      }\r\n      key = '' + config.key;\r\n    }\r\n\r\n    self = config.__self === undefined ? null : config.__self;\r\n    source = config.__source === undefined ? null : config.__source;\r\n    // Remaining properties are added to a new props object\r\n    for (propName in config) {\r\n      if (\r\n        hasOwnProperty.call(config, propName) &&\r\n        !RESERVED_PROPS.hasOwnProperty(propName)\r\n      ) {\r\n        props[propName] = config[propName];\r\n      }\r\n    }\r\n  }\r\n\r\n  // Children can be more than one argument, and those are transferred onto\r\n  // the newly allocated props object.\r\n  const childrenLength = arguments.length - 2;\r\n  if (childrenLength === 1) {\r\n    props.children = children;\r\n  } else if (childrenLength > 1) {\r\n    const childArray = Array(childrenLength);\r\n    for (let i = 0; i < childrenLength; i++) {\r\n      childArray[i] = arguments[i + 2];\r\n    }\r\n    if (__DEV__) {\r\n      if (Object.freeze) {\r\n        Object.freeze(childArray);\r\n      }\r\n    }\r\n    props.children = childArray;\r\n  }\r\n\r\n  // Resolve default props\r\n  if (type && type.defaultProps) {\r\n    const defaultProps = type.defaultProps;\r\n    for (propName in defaultProps) {\r\n      if (props[propName] === undefined) {\r\n        props[propName] = defaultProps[propName];\r\n      }\r\n    }\r\n  }\r\n  if (__DEV__) {\r\n    if (key || ref) {\r\n      const displayName =\r\n        typeof type === 'function'\r\n          ? type.displayName || type.name || 'Unknown'\r\n          : type;\r\n      if (key) {\r\n        defineKeyPropWarningGetter(props, displayName);\r\n      }\r\n      if (ref) {\r\n        defineRefPropWarningGetter(props, displayName);\r\n      }\r\n    }\r\n  }\r\n  // TODO next\r\n  console.log({\r\n    type,\r\n    key,\r\n    ref,\r\n    self,\r\n    source,\r\n    current: ReactCurrentOwner.current,\r\n    props\r\n  }, \"基本数据结构规划完毕\")\r\n  return ReactElement(\r\n    type,\r\n    key,\r\n    ref,\r\n    self,\r\n    source,\r\n    ReactCurrentOwner.current,\r\n    props,\r\n  );\r\n}\r\n\r\n/**\r\n * Return a function that produces ReactElements of a given type.\r\n * See https://reactjs.org/docs/react-api.html#createfactory\r\n */\r\nexport function createFactory (type) {\r\n  const factory = createElement.bind(null, type);\r\n  // Expose the type on the factory and the prototype so that it can be\r\n  // easily accessed on elements. E.g. `<Foo />.type === Foo`.\r\n  // This should not be named `constructor` since this may not be the function\r\n  // that created the element, and it may not even be a constructor.\r\n  // Legacy hook: remove it\r\n  factory.type = type;\r\n  return factory;\r\n}\r\n\r\nexport function cloneAndReplaceKey (oldElement, newKey) {\r\n  const newElement = ReactElement(\r\n    oldElement.type,\r\n    newKey,\r\n    oldElement.ref,\r\n    oldElement._self,\r\n    oldElement._source,\r\n    oldElement._owner,\r\n    oldElement.props,\r\n  );\r\n\r\n  return newElement;\r\n}\r\n\r\n/**\r\n * Clone and return a new ReactElement using element as the starting point.\r\n * See https://reactjs.org/docs/react-api.html#cloneelement\r\n */\r\nexport function cloneElement (element, config, children) {\r\n  if (element === null || element === undefined) {\r\n    throw new Error(\r\n      `React.cloneElement(...): The argument must be a React element, but you passed ${element}.`,\r\n    );\r\n  }\r\n\r\n  let propName;\r\n\r\n  // Original props are copied\r\n  const props = assign({}, element.props);\r\n\r\n  // Reserved names are extracted\r\n  let key = element.key;\r\n  let ref = element.ref;\r\n  // Self is preserved since the owner is preserved.\r\n  const self = element._self;\r\n  // Source is preserved since cloneElement is unlikely to be targeted by a\r\n  // transpiler, and the original source is probably a better indicator of the\r\n  // true owner.\r\n  const source = element._source;\r\n\r\n  // Owner will be preserved, unless ref is overridden\r\n  let owner = element._owner;\r\n\r\n  if (config != null) {\r\n    if (hasValidRef(config)) {\r\n      // Silently steal the ref from the parent.\r\n      ref = config.ref;\r\n      owner = ReactCurrentOwner.current;\r\n    }\r\n    if (hasValidKey(config)) {\r\n      if (__DEV__) {\r\n        checkKeyStringCoercion(config.key);\r\n      }\r\n      key = '' + config.key;\r\n    }\r\n\r\n    // Remaining properties override existing props\r\n    let defaultProps;\r\n    if (element.type && element.type.defaultProps) {\r\n      defaultProps = element.type.defaultProps;\r\n    }\r\n    for (propName in config) {\r\n      if (\r\n        hasOwnProperty.call(config, propName) &&\r\n        !RESERVED_PROPS.hasOwnProperty(propName)\r\n      ) {\r\n        if (config[propName] === undefined && defaultProps !== undefined) {\r\n          // Resolve default props\r\n          props[propName] = defaultProps[propName];\r\n        } else {\r\n          props[propName] = config[propName];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Children can be more than one argument, and those are transferred onto\r\n  // the newly allocated props object.\r\n  const childrenLength = arguments.length - 2;\r\n  if (childrenLength === 1) {\r\n    props.children = children;\r\n  } else if (childrenLength > 1) {\r\n    const childArray = Array(childrenLength);\r\n    for (let i = 0; i < childrenLength; i++) {\r\n      childArray[i] = arguments[i + 2];\r\n    }\r\n    props.children = childArray;\r\n  }\r\n\r\n  return ReactElement(element.type, key, ref, self, source, owner, props);\r\n}\r\n\r\n/**\r\n * Verifies the object is a ReactElement.\r\n * See https://reactjs.org/docs/react-api.html#isvalidelement\r\n * @param {?object} object\r\n * @return {boolean} True if `object` is a ReactElement.\r\n * @final\r\n */\r\nexport function isValidElement (object) {\r\n  return (\r\n    typeof object === 'object' &&\r\n    object !== null &&\r\n    object.$$typeof === REACT_ELEMENT_TYPE\r\n  );\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,wBAAP,MAAqC,iCAArC;AACA,SAASC,kBAAT,QAAmC,qBAAnC;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,SAASC,sBAAT,QAAuC,4BAAvC;AAEA,OAAOC,iBAAP,MAA8B,qBAA9B;AAEA,MAAMC,cAAc,GAAG;EACrBC,GAAG,EAAE,IADgB;EAErBC,GAAG,EAAE,IAFgB;EAGrBC,MAAM,EAAE,IAHa;EAIrBC,QAAQ,EAAE;AAJW,CAAvB;AAOA,IAAIC,0BAAJ,EACEC,0BADF,EAEEC,sBAFF;;AAIA,IAAIC,OAAJ,EAAa;EACXD,sBAAsB,GAAG,EAAzB;AACD;;AAED,SAASE,WAAT,CAAsBC,MAAtB,EAA8B;EAC5B,IAAIF,OAAJ,EAAa;IACX,IAAIX,cAAc,CAACc,IAAf,CAAoBD,MAApB,EAA4B,KAA5B,CAAJ,EAAwC;MACtC,MAAME,MAAM,GAAGC,MAAM,CAACC,wBAAP,CAAgCJ,MAAhC,EAAwC,KAAxC,EAA+CK,GAA9D;;MACA,IAAIH,MAAM,IAAIA,MAAM,CAACI,cAArB,EAAqC;QACnC,OAAO,KAAP;MACD;IACF;EACF;;EACD,OAAON,MAAM,CAACR,GAAP,KAAee,SAAtB;AACD;;AAED,SAASC,WAAT,CAAsBR,MAAtB,EAA8B;EAC5B,IAAIF,OAAJ,EAAa;IACX,IAAIX,cAAc,CAACc,IAAf,CAAoBD,MAApB,EAA4B,KAA5B,CAAJ,EAAwC;MACtC,MAAME,MAAM,GAAGC,MAAM,CAACC,wBAAP,CAAgCJ,MAAhC,EAAwC,KAAxC,EAA+CK,GAA9D;;MACA,IAAIH,MAAM,IAAIA,MAAM,CAACI,cAArB,EAAqC;QACnC,OAAO,KAAP;MACD;IACF;EACF;;EACD,OAAON,MAAM,CAACT,GAAP,KAAegB,SAAtB;AACD;;AAED,SAASE,0BAAT,CAAqCC,KAArC,EAA4CC,WAA5C,EAAyD;EACvD,MAAMC,qBAAqB,GAAG,YAAY;IACxC,IAAId,OAAJ,EAAa;MACX,IAAI,CAACH,0BAAL,EAAiC;QAC/BA,0BAA0B,GAAG,IAA7B;QACAkB,OAAO,CAACC,KAAR,CACE,8DACA,gEADA,GAEA,sEAFA,GAGA,gDAJF,EAKEH,WALF;MAOD;IACF;EACF,CAbD;;EAcAC,qBAAqB,CAACN,cAAtB,GAAuC,IAAvC;EACAH,MAAM,CAACY,cAAP,CAAsBL,KAAtB,EAA6B,KAA7B,EAAoC;IAClCL,GAAG,EAAEO,qBAD6B;IAElCI,YAAY,EAAE;EAFoB,CAApC;AAID;;AAED,SAASC,0BAAT,CAAqCP,KAArC,EAA4CC,WAA5C,EAAyD;EACvD,MAAMO,qBAAqB,GAAG,YAAY;IACxC,IAAIpB,OAAJ,EAAa;MACX,IAAI,CAACF,0BAAL,EAAiC;QAC/BA,0BAA0B,GAAG,IAA7B;QACAiB,OAAO,CAACC,KAAR,CACE,8DACA,gEADA,GAEA,sEAFA,GAGA,gDAJF,EAKEH,WALF;MAOD;IACF;EACF,CAbD;;EAcAO,qBAAqB,CAACZ,cAAtB,GAAuC,IAAvC;EACAH,MAAM,CAACY,cAAP,CAAsBL,KAAtB,EAA6B,KAA7B,EAAoC;IAClCL,GAAG,EAAEa,qBAD6B;IAElCF,YAAY,EAAE;EAFoB,CAApC;AAID;;AAED,SAASG,oCAAT,CAA+CnB,MAA/C,EAAuD;EACrD,IAAIF,OAAJ,EAAa;IACX,IACE,OAAOE,MAAM,CAACR,GAAd,KAAsB,QAAtB,IACAH,iBAAiB,CAAC+B,OADlB,IAEApB,MAAM,CAACP,MAFP,IAGAJ,iBAAiB,CAAC+B,OAAlB,CAA0BC,SAA1B,KAAwCrB,MAAM,CAACP,MAJjD,EAKE;MACA,MAAM6B,aAAa,GAAGtC,wBAAwB,CAC5CK,iBAAiB,CAAC+B,OAAlB,CAA0BG,IADkB,CAA9C;;MAIA,IAAI,CAAC1B,sBAAsB,CAACyB,aAAD,CAA3B,EAA4C;QAC1CT,OAAO,CAACC,KAAR,CACE,kDACA,qEADA,GAEA,oEAFA,GAGA,iFAHA,GAIA,2CAJA,GAKA,iDANF,EAOEQ,aAPF,EAQEtB,MAAM,CAACR,GART;QAUAK,sBAAsB,CAACyB,aAAD,CAAtB,GAAwC,IAAxC;MACD;IACF;EACF;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,YAAY,GAAG,UAAUD,IAAV,EAAgBhC,GAAhB,EAAqBC,GAArB,EAA0BiC,IAA1B,EAAgCC,MAAhC,EAAwCC,KAAxC,EAA+CjB,KAA/C,EAAsD;EACzE;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMkB,OAAO,GAAG;IACd;IACAC,QAAQ,EAAE5C,kBAFI;IAId;IACAsC,IAAI,EAAEA,IALQ;IAMdhC,GAAG,EAAEA,GANS;IAOdC,GAAG,EAAEA,GAPS;IAQdkB,KAAK,EAAEA,KARO;IAUd;IACAoB,MAAM,EAAEH;EAXM,CAAhB;;EAcA,IAAI7B,OAAJ,EAAa;IACX;IACA;IACA;IACA;IACA8B,OAAO,CAACG,MAAR,GAAiB,EAAjB,CALW,CAMX;IACA;IACA;IACA;;IACA5B,MAAM,CAACY,cAAP,CAAsBa,OAAO,CAACG,MAA9B,EAAsC,WAAtC,EAAmD;MACjDf,YAAY,EAAE,KADmC;MAEjDgB,UAAU,EAAE,KAFqC;MAGjDC,QAAQ,EAAE,IAHuC;MAIjDC,KAAK,EAAE;IAJ0C,CAAnD;IAMArB,OAAO,CAACsB,GAAR,CAAYP,OAAZ,EAAqB,gDAArB,EAhBW,CAkBX;;IACAzB,MAAM,CAACY,cAAP,CAAsBa,OAAtB,EAA+B,OAA/B,EAAwC;MACtCZ,YAAY,EAAE,KADwB;MAEtCgB,UAAU,EAAE,KAF0B;MAGtCC,QAAQ,EAAE,KAH4B;MAItCC,KAAK,EAAET;IAJ+B,CAAxC,EAnBW,CAyBX;IACA;;IACAtB,MAAM,CAACY,cAAP,CAAsBa,OAAtB,EAA+B,SAA/B,EAA0C;MACxCZ,YAAY,EAAE,KAD0B;MAExCgB,UAAU,EAAE,KAF4B;MAGxCC,QAAQ,EAAE,KAH8B;MAIxCC,KAAK,EAAER;IAJiC,CAA1C;IAMAb,OAAO,CAACsB,GAAR,CAAYP,OAAZ,EAAqB,gCAArB;;IACA,IAAIzB,MAAM,CAACiC,MAAX,EAAmB;MACjBjC,MAAM,CAACiC,MAAP,CAAcR,OAAO,CAAClB,KAAtB;MACAP,MAAM,CAACiC,MAAP,CAAcR,OAAd;IACD;;IACDf,OAAO,CAACsB,GAAR,CAAYP,OAAZ,EAAqB,2BAArB;EACD;;EACDf,OAAO,CAACsB,GAAR,CAAY,eAAZ;EACA,OAAOP,OAAP;AACD,CAhED;AAkEA;AACA;AACA;AACA;AACA;AACA;;;KAvEMJ,Y;AAwEN,OAAO,SAASa,GAAT,CAAcd,IAAd,EAAoBvB,MAApB,EAA4BsC,QAA5B,EAAsC;EAC3C,IAAIC,QAAJ,CAD2C,CAG3C;;EACA,MAAM7B,KAAK,GAAG,EAAd;EAEA,IAAInB,GAAG,GAAG,IAAV;EACA,IAAIC,GAAG,GAAG,IAAV,CAP2C,CAS3C;EACA;EACA;EACA;EACA;EACA;;EACA,IAAI8C,QAAQ,KAAK/B,SAAjB,EAA4B;IAC1B,IAAIT,OAAJ,EAAa;MACXV,sBAAsB,CAACkD,QAAD,CAAtB;IACD;;IACD/C,GAAG,GAAG,KAAK+C,QAAX;EACD;;EAED,IAAI9B,WAAW,CAACR,MAAD,CAAf,EAAyB;IACvB,IAAIF,OAAJ,EAAa;MACXV,sBAAsB,CAACY,MAAM,CAACT,GAAR,CAAtB;IACD;;IACDA,GAAG,GAAG,KAAKS,MAAM,CAACT,GAAlB;EACD;;EAED,IAAIQ,WAAW,CAACC,MAAD,CAAf,EAAyB;IACvBR,GAAG,GAAGQ,MAAM,CAACR,GAAb;EACD,CA/B0C,CAiC3C;;;EACA,KAAK+C,QAAL,IAAiBvC,MAAjB,EAAyB;IACvB,IACEb,cAAc,CAACc,IAAf,CAAoBD,MAApB,EAA4BuC,QAA5B,KACA,CAACjD,cAAc,CAACH,cAAf,CAA8BoD,QAA9B,CAFH,EAGE;MACA7B,KAAK,CAAC6B,QAAD,CAAL,GAAkBvC,MAAM,CAACuC,QAAD,CAAxB;IACD;EACF,CAzC0C,CA2C3C;;;EACA,IAAIhB,IAAI,IAAIA,IAAI,CAACiB,YAAjB,EAA+B;IAC7B,MAAMA,YAAY,GAAGjB,IAAI,CAACiB,YAA1B;;IACA,KAAKD,QAAL,IAAiBC,YAAjB,EAA+B;MAC7B,IAAI9B,KAAK,CAAC6B,QAAD,CAAL,KAAoBhC,SAAxB,EAAmC;QACjCG,KAAK,CAAC6B,QAAD,CAAL,GAAkBC,YAAY,CAACD,QAAD,CAA9B;MACD;IACF;EACF;;EAED,OAAOf,YAAY,CACjBD,IADiB,EAEjBhC,GAFiB,EAGjBC,GAHiB,EAIjBe,SAJiB,EAKjBA,SALiB,EAMjBlB,iBAAiB,CAAC+B,OAND,EAOjBV,KAPiB,CAAnB;AASD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS+B,MAAT,CAAiBlB,IAAjB,EAAuBvB,MAAvB,EAA+BsC,QAA/B,EAAyCZ,MAAzC,EAAiDD,IAAjD,EAAuD;EAC5D,IAAIc,QAAJ,CAD4D,CAG5D;;EACA,MAAM7B,KAAK,GAAG,EAAd;EAEA,IAAInB,GAAG,GAAG,IAAV;EACA,IAAIC,GAAG,GAAG,IAAV,CAP4D,CAS5D;EACA;EACA;EACA;EACA;EACA;;EACA,IAAI8C,QAAQ,KAAK/B,SAAjB,EAA4B;IAC1B,IAAIT,OAAJ,EAAa;MACXV,sBAAsB,CAACkD,QAAD,CAAtB;IACD;;IACD/C,GAAG,GAAG,KAAK+C,QAAX;EACD;;EAED,IAAI9B,WAAW,CAACR,MAAD,CAAf,EAAyB;IACvB,IAAIF,OAAJ,EAAa;MACXV,sBAAsB,CAACY,MAAM,CAACT,GAAR,CAAtB;IACD;;IACDA,GAAG,GAAG,KAAKS,MAAM,CAACT,GAAlB;EACD;;EAED,IAAIQ,WAAW,CAACC,MAAD,CAAf,EAAyB;IACvBR,GAAG,GAAGQ,MAAM,CAACR,GAAb;IACA2B,oCAAoC,CAACnB,MAAD,CAApC;EACD,CAhC2D,CAkC5D;;;EACA,KAAKuC,QAAL,IAAiBvC,MAAjB,EAAyB;IACvB,IACEb,cAAc,CAACc,IAAf,CAAoBD,MAApB,EAA4BuC,QAA5B,KACA,CAACjD,cAAc,CAACH,cAAf,CAA8BoD,QAA9B,CAFH,EAGE;MACA7B,KAAK,CAAC6B,QAAD,CAAL,GAAkBvC,MAAM,CAACuC,QAAD,CAAxB;IACD;EACF,CA1C2D,CA4C5D;;;EACA,IAAIhB,IAAI,IAAIA,IAAI,CAACiB,YAAjB,EAA+B;IAC7B,MAAMA,YAAY,GAAGjB,IAAI,CAACiB,YAA1B;;IACA,KAAKD,QAAL,IAAiBC,YAAjB,EAA+B;MAC7B,IAAI9B,KAAK,CAAC6B,QAAD,CAAL,KAAoBhC,SAAxB,EAAmC;QACjCG,KAAK,CAAC6B,QAAD,CAAL,GAAkBC,YAAY,CAACD,QAAD,CAA9B;MACD;IACF;EACF;;EAED,IAAIhD,GAAG,IAAIC,GAAX,EAAgB;IACd,MAAMmB,WAAW,GACf,OAAOY,IAAP,KAAgB,UAAhB,GACIA,IAAI,CAACZ,WAAL,IAAoBY,IAAI,CAACmB,IAAzB,IAAiC,SADrC,GAEInB,IAHN;;IAIA,IAAIhC,GAAJ,EAAS;MACPkB,0BAA0B,CAACC,KAAD,EAAQC,WAAR,CAA1B;IACD;;IACD,IAAInB,GAAJ,EAAS;MACPyB,0BAA0B,CAACP,KAAD,EAAQC,WAAR,CAA1B;IACD;EACF;;EAED,OAAOa,YAAY,CACjBD,IADiB,EAEjBhC,GAFiB,EAGjBC,GAHiB,EAIjBiC,IAJiB,EAKjBC,MALiB,EAMjBrC,iBAAiB,CAAC+B,OAND,EAOjBV,KAPiB,CAAnB;AASD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASiC,aAAT,CAAwBpB,IAAxB,EAA8BvB,MAA9B,EAAsC4C,QAAtC,EAAgD;EACrD/B,OAAO,CAACsB,GAAR,CAAY;IACVZ,IADU;IAEVhC,GAFU;IAGVC,GAHU;IAIViC,IAJU;IAKVC,MALU;IAMVN,OAAO,EAAE/B,iBAAiB,CAAC+B,OANjB;IAOVV;EAPU,CAAZ,EAQG,YARH;EASA,IAAI6B,QAAJ,CAVqD,CAYrD;;EACA,MAAM7B,KAAK,GAAG,EAAd;EAEA,IAAInB,GAAG,GAAG,IAAV;EACA,IAAIC,GAAG,GAAG,IAAV;EACA,IAAIiC,IAAI,GAAG,IAAX;EACA,IAAIC,MAAM,GAAG,IAAb;;EAEA,IAAI1B,MAAM,IAAI,IAAd,EAAoB;IAClB,IAAID,WAAW,CAACC,MAAD,CAAf,EAAyB;MACvBR,GAAG,GAAGQ,MAAM,CAACR,GAAb;;MAEA,IAAIM,OAAJ,EAAa;QACXqB,oCAAoC,CAACnB,MAAD,CAApC;MACD;IACF;;IACD,IAAIQ,WAAW,CAACR,MAAD,CAAf,EAAyB;MACvB,IAAIF,OAAJ,EAAa;QACXV,sBAAsB,CAACY,MAAM,CAACT,GAAR,CAAtB;MACD;;MACDA,GAAG,GAAG,KAAKS,MAAM,CAACT,GAAlB;IACD;;IAEDkC,IAAI,GAAGzB,MAAM,CAACP,MAAP,KAAkBc,SAAlB,GAA8B,IAA9B,GAAqCP,MAAM,CAACP,MAAnD;IACAiC,MAAM,GAAG1B,MAAM,CAACN,QAAP,KAAoBa,SAApB,GAAgC,IAAhC,GAAuCP,MAAM,CAACN,QAAvD,CAhBkB,CAiBlB;;IACA,KAAK6C,QAAL,IAAiBvC,MAAjB,EAAyB;MACvB,IACEb,cAAc,CAACc,IAAf,CAAoBD,MAApB,EAA4BuC,QAA5B,KACA,CAACjD,cAAc,CAACH,cAAf,CAA8BoD,QAA9B,CAFH,EAGE;QACA7B,KAAK,CAAC6B,QAAD,CAAL,GAAkBvC,MAAM,CAACuC,QAAD,CAAxB;MACD;IACF;EACF,CA9CoD,CAgDrD;EACA;;;EACA,MAAMM,cAAc,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAA1C;;EACA,IAAIF,cAAc,KAAK,CAAvB,EAA0B;IACxBnC,KAAK,CAACkC,QAAN,GAAiBA,QAAjB;EACD,CAFD,MAEO,IAAIC,cAAc,GAAG,CAArB,EAAwB;IAC7B,MAAMG,UAAU,GAAGC,KAAK,CAACJ,cAAD,CAAxB;;IACA,KAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,cAApB,EAAoCK,CAAC,EAArC,EAAyC;MACvCF,UAAU,CAACE,CAAD,CAAV,GAAgBJ,SAAS,CAACI,CAAC,GAAG,CAAL,CAAzB;IACD;;IACD,IAAIpD,OAAJ,EAAa;MACX,IAAIK,MAAM,CAACiC,MAAX,EAAmB;QACjBjC,MAAM,CAACiC,MAAP,CAAcY,UAAd;MACD;IACF;;IACDtC,KAAK,CAACkC,QAAN,GAAiBI,UAAjB;EACD,CAhEoD,CAkErD;;;EACA,IAAIzB,IAAI,IAAIA,IAAI,CAACiB,YAAjB,EAA+B;IAC7B,MAAMA,YAAY,GAAGjB,IAAI,CAACiB,YAA1B;;IACA,KAAKD,QAAL,IAAiBC,YAAjB,EAA+B;MAC7B,IAAI9B,KAAK,CAAC6B,QAAD,CAAL,KAAoBhC,SAAxB,EAAmC;QACjCG,KAAK,CAAC6B,QAAD,CAAL,GAAkBC,YAAY,CAACD,QAAD,CAA9B;MACD;IACF;EACF;;EACD,IAAIzC,OAAJ,EAAa;IACX,IAAIP,GAAG,IAAIC,GAAX,EAAgB;MACd,MAAMmB,WAAW,GACf,OAAOY,IAAP,KAAgB,UAAhB,GACIA,IAAI,CAACZ,WAAL,IAAoBY,IAAI,CAACmB,IAAzB,IAAiC,SADrC,GAEInB,IAHN;;MAIA,IAAIhC,GAAJ,EAAS;QACPkB,0BAA0B,CAACC,KAAD,EAAQC,WAAR,CAA1B;MACD;;MACD,IAAInB,GAAJ,EAAS;QACPyB,0BAA0B,CAACP,KAAD,EAAQC,WAAR,CAA1B;MACD;IACF;EACF,CAxFoD,CAyFrD;;;EACAE,OAAO,CAACsB,GAAR,CAAY;IACVZ,IADU;IAEVhC,GAFU;IAGVC,GAHU;IAIViC,IAJU;IAKVC,MALU;IAMVN,OAAO,EAAE/B,iBAAiB,CAAC+B,OANjB;IAOVV;EAPU,CAAZ,EAQG,YARH;EASA,OAAOc,YAAY,CACjBD,IADiB,EAEjBhC,GAFiB,EAGjBC,GAHiB,EAIjBiC,IAJiB,EAKjBC,MALiB,EAMjBrC,iBAAiB,CAAC+B,OAND,EAOjBV,KAPiB,CAAnB;AASD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASyC,aAAT,CAAwB5B,IAAxB,EAA8B;EACnC,MAAM6B,OAAO,GAAGT,aAAa,CAACU,IAAd,CAAmB,IAAnB,EAAyB9B,IAAzB,CAAhB,CADmC,CAEnC;EACA;EACA;EACA;EACA;;EACA6B,OAAO,CAAC7B,IAAR,GAAeA,IAAf;EACA,OAAO6B,OAAP;AACD;AAED,OAAO,SAASE,kBAAT,CAA6BC,UAA7B,EAAyCC,MAAzC,EAAiD;EACtD,MAAMC,UAAU,GAAGjC,YAAY,CAC7B+B,UAAU,CAAChC,IADkB,EAE7BiC,MAF6B,EAG7BD,UAAU,CAAC/D,GAHkB,EAI7B+D,UAAU,CAACG,KAJkB,EAK7BH,UAAU,CAACI,OALkB,EAM7BJ,UAAU,CAACzB,MANkB,EAO7ByB,UAAU,CAAC7C,KAPkB,CAA/B;EAUA,OAAO+C,UAAP;AACD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASG,YAAT,CAAuBhC,OAAvB,EAAgC5B,MAAhC,EAAwC4C,QAAxC,EAAkD;EACvD,IAAIhB,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAKrB,SAApC,EAA+C;IAC7C,MAAM,IAAIsD,KAAJ,CACH,iFAAgFjC,OAAQ,GADrF,CAAN;EAGD;;EAED,IAAIW,QAAJ,CAPuD,CASvD;;EACA,MAAM7B,KAAK,GAAGxB,MAAM,CAAC,EAAD,EAAK0C,OAAO,CAAClB,KAAb,CAApB,CAVuD,CAYvD;;EACA,IAAInB,GAAG,GAAGqC,OAAO,CAACrC,GAAlB;EACA,IAAIC,GAAG,GAAGoC,OAAO,CAACpC,GAAlB,CAduD,CAevD;;EACA,MAAMiC,IAAI,GAAGG,OAAO,CAAC8B,KAArB,CAhBuD,CAiBvD;EACA;EACA;;EACA,MAAMhC,MAAM,GAAGE,OAAO,CAAC+B,OAAvB,CApBuD,CAsBvD;;EACA,IAAIhC,KAAK,GAAGC,OAAO,CAACE,MAApB;;EAEA,IAAI9B,MAAM,IAAI,IAAd,EAAoB;IAClB,IAAID,WAAW,CAACC,MAAD,CAAf,EAAyB;MACvB;MACAR,GAAG,GAAGQ,MAAM,CAACR,GAAb;MACAmC,KAAK,GAAGtC,iBAAiB,CAAC+B,OAA1B;IACD;;IACD,IAAIZ,WAAW,CAACR,MAAD,CAAf,EAAyB;MACvB,IAAIF,OAAJ,EAAa;QACXV,sBAAsB,CAACY,MAAM,CAACT,GAAR,CAAtB;MACD;;MACDA,GAAG,GAAG,KAAKS,MAAM,CAACT,GAAlB;IACD,CAXiB,CAalB;;;IACA,IAAIiD,YAAJ;;IACA,IAAIZ,OAAO,CAACL,IAAR,IAAgBK,OAAO,CAACL,IAAR,CAAaiB,YAAjC,EAA+C;MAC7CA,YAAY,GAAGZ,OAAO,CAACL,IAAR,CAAaiB,YAA5B;IACD;;IACD,KAAKD,QAAL,IAAiBvC,MAAjB,EAAyB;MACvB,IACEb,cAAc,CAACc,IAAf,CAAoBD,MAApB,EAA4BuC,QAA5B,KACA,CAACjD,cAAc,CAACH,cAAf,CAA8BoD,QAA9B,CAFH,EAGE;QACA,IAAIvC,MAAM,CAACuC,QAAD,CAAN,KAAqBhC,SAArB,IAAkCiC,YAAY,KAAKjC,SAAvD,EAAkE;UAChE;UACAG,KAAK,CAAC6B,QAAD,CAAL,GAAkBC,YAAY,CAACD,QAAD,CAA9B;QACD,CAHD,MAGO;UACL7B,KAAK,CAAC6B,QAAD,CAAL,GAAkBvC,MAAM,CAACuC,QAAD,CAAxB;QACD;MACF;IACF;EACF,CAxDsD,CA0DvD;EACA;;;EACA,MAAMM,cAAc,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAA1C;;EACA,IAAIF,cAAc,KAAK,CAAvB,EAA0B;IACxBnC,KAAK,CAACkC,QAAN,GAAiBA,QAAjB;EACD,CAFD,MAEO,IAAIC,cAAc,GAAG,CAArB,EAAwB;IAC7B,MAAMG,UAAU,GAAGC,KAAK,CAACJ,cAAD,CAAxB;;IACA,KAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,cAApB,EAAoCK,CAAC,EAArC,EAAyC;MACvCF,UAAU,CAACE,CAAD,CAAV,GAAgBJ,SAAS,CAACI,CAAC,GAAG,CAAL,CAAzB;IACD;;IACDxC,KAAK,CAACkC,QAAN,GAAiBI,UAAjB;EACD;;EAED,OAAOxB,YAAY,CAACI,OAAO,CAACL,IAAT,EAAehC,GAAf,EAAoBC,GAApB,EAAyBiC,IAAzB,EAA+BC,MAA/B,EAAuCC,KAAvC,EAA8CjB,KAA9C,CAAnB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASoD,cAAT,CAAyBC,MAAzB,EAAiC;EACtC,OACE,OAAOA,MAAP,KAAkB,QAAlB,IACAA,MAAM,KAAK,IADX,IAEAA,MAAM,CAAClC,QAAP,KAAoB5C,kBAHtB;AAKD"},"metadata":{},"sourceType":"module"}