{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\n\n/* eslint-disable no-var */\nimport { enableSchedulerDebugging, enableProfiling, enableIsInputPending, enableIsInputPendingContinuous, frameYieldMs, continuousYieldMs, maxYieldMs } from '../SchedulerFeatureFlags';\nimport { push, pop, peek } from '../SchedulerMinHeap'; // TODO: Use symbols?\n\nimport { ImmediatePriority, UserBlockingPriority, NormalPriority, LowPriority, IdlePriority } from '../SchedulerPriorities';\nimport { markTaskRun, markTaskYield, markTaskCompleted, markTaskCanceled, markTaskErrored, markSchedulerSuspended, markSchedulerUnsuspended, markTaskStart, stopLoggingProfilingEvents, startLoggingProfilingEvents } from '../SchedulerProfiling';\nlet getCurrentTime;\nconst hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\n\nif (hasPerformanceNow) {\n  const localPerformance = performance;\n\n  getCurrentTime = () => localPerformance.now();\n} else {\n  const localDate = Date;\n  const initialTime = localDate.now();\n\n  getCurrentTime = () => localDate.now() - initialTime;\n} // Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\n\n\nvar maxSigned31BitInt = 1073741823; // Times out immediately\n\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\nvar USER_BLOCKING_PRIORITY_TIMEOUT = 250;\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\nvar LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n\nvar IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap\n\nvar taskQueue = [];\nvar timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\n\nvar taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\n\nvar isSchedulerPaused = false;\nvar currentTask = null;\nvar currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrance.\n\nvar isPerformingWork = false;\nvar isHostCallbackScheduled = false;\nvar isHostTimeoutScheduled = false; // Capture local references to native APIs, in case a polyfill overrides them.\n\nconst localSetTimeout = typeof setTimeout === 'function' ? setTimeout : null;\nconst localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : null;\nconst localSetImmediate = typeof setImmediate !== 'undefined' ? setImmediate : null; // IE and Node.js + jsdom\n\nconst isInputPending = typeof navigator !== 'undefined' && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;\nconst continuousOptions = {\n  includeContinuous: enableIsInputPendingContinuous\n};\n\nfunction advanceTimers(currentTime) {\n  // Check for tasks that are no longer delayed and add them to the queue.\n  let timer = peek(timerQueue);\n\n  while (timer !== null) {\n    if (timer.callback === null) {\n      // Timer was cancelled.\n      pop(timerQueue);\n    } else if (timer.startTime <= currentTime) {\n      // Timer fired. Transfer to the task queue.\n      pop(timerQueue);\n      timer.sortIndex = timer.expirationTime;\n      push(taskQueue, timer);\n\n      if (enableProfiling) {\n        markTaskStart(timer, currentTime);\n        timer.isQueued = true;\n      }\n    } else {\n      // Remaining timers are pending.\n      return;\n    }\n\n    timer = peek(timerQueue);\n  }\n}\n\nfunction handleTimeout(currentTime) {\n  isHostTimeoutScheduled = false;\n  advanceTimers(currentTime);\n\n  if (!isHostCallbackScheduled) {\n    if (peek(taskQueue) !== null) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    } else {\n      const firstTimer = peek(timerQueue);\n\n      if (firstTimer !== null) {\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n      }\n    }\n  }\n}\n\nfunction flushWork(hasTimeRemaining, initialTime) {\n  if (enableProfiling) {\n    markSchedulerUnsuspended(initialTime);\n  } // We'll need a host callback the next time work is scheduled.\n  // TODO What is the host?\n\n\n  isHostCallbackScheduled = false;\n\n  if (isHostTimeoutScheduled) {\n    // We scheduled a timeout but it's no longer needed. Cancel it.\n    isHostTimeoutScheduled = false;\n    cancelHostTimeout();\n  }\n\n  isPerformingWork = true;\n  const previousPriorityLevel = currentPriorityLevel;\n\n  try {\n    if (enableProfiling) {\n      try {\n        return workLoop(hasTimeRemaining, initialTime);\n      } catch (error) {\n        if (currentTask !== null) {\n          const currentTime = getCurrentTime();\n          markTaskErrored(currentTask, currentTime);\n          currentTask.isQueued = false;\n        }\n\n        throw error;\n      }\n    } else {\n      // No catch in prod code path.\n      return workLoop(hasTimeRemaining, initialTime);\n    }\n  } finally {\n    currentTask = null;\n    currentPriorityLevel = previousPriorityLevel;\n    isPerformingWork = false;\n\n    if (enableProfiling) {\n      const currentTime = getCurrentTime();\n      markSchedulerSuspended(currentTime);\n    }\n  }\n}\n\nfunction workLoop(hasTimeRemaining, initialTime) {\n  let currentTime = initialTime;\n  advanceTimers(currentTime);\n  currentTask = peek(taskQueue);\n\n  while (currentTask !== null && !(enableSchedulerDebugging && isSchedulerPaused)) {\n    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\n      // This currentTask hasn't expired, and we've reached the deadline.\n      break;\n    }\n\n    const callback = currentTask.callback;\n\n    if (typeof callback === 'function') {\n      currentTask.callback = null;\n      currentPriorityLevel = currentTask.priorityLevel;\n      const didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n\n      if (enableProfiling) {\n        markTaskRun(currentTask, currentTime);\n      }\n\n      const continuationCallback = callback(didUserCallbackTimeout);\n      currentTime = getCurrentTime();\n\n      if (typeof continuationCallback === 'function') {\n        currentTask.callback = continuationCallback;\n\n        if (enableProfiling) {\n          markTaskYield(currentTask, currentTime);\n        }\n      } else {\n        if (enableProfiling) {\n          markTaskCompleted(currentTask, currentTime);\n          currentTask.isQueued = false;\n        }\n\n        if (currentTask === peek(taskQueue)) {\n          pop(taskQueue);\n        }\n      }\n\n      advanceTimers(currentTime);\n    } else {\n      pop(taskQueue);\n    }\n\n    currentTask = peek(taskQueue);\n  } // Return whether there's additional work\n\n\n  if (currentTask !== null) {\n    return true;\n  } else {\n    const firstTimer = peek(timerQueue);\n\n    if (firstTimer !== null) {\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n    }\n\n    return false;\n  }\n} // export type PriorityLevel = 0 | 1 | 2 | 3 | 4 | 5;\n// export const NoPriority = 0;\n// export const ImmediatePriority = 1;\n// export const UserBlockingPriority = 2;\n// export const NormalPriority = 3;\n// export const LowPriority = 4;\n// export const IdlePriority = 5;\n// 该方法接收一个优先级常量与一个回调函数作为参数。回调函数会以优先级高低为顺序排列在一个定时器中并在合适的时间触发。\n\n\nfunction unstable_runWithPriority(priorityLevel, eventHandler) {\n  switch (priorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n    case LowPriority:\n    case IdlePriority:\n      break;\n\n    default:\n      priorityLevel = NormalPriority;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_next(eventHandler) {\n  var priorityLevel;\n\n  switch (currentPriorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n      // Shift down to normal priority\n      priorityLevel = NormalPriority;\n      break;\n\n    default:\n      // Anything lower than normal priority should remain at the current level.\n      priorityLevel = currentPriorityLevel;\n      break;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_wrapCallback(callback) {\n  var parentPriorityLevel = currentPriorityLevel;\n  return function () {\n    // This is a fork of runWithPriority, inlined for performance.\n    var previousPriorityLevel = currentPriorityLevel;\n    currentPriorityLevel = parentPriorityLevel;\n\n    try {\n      return callback.apply(this, arguments);\n    } finally {\n      currentPriorityLevel = previousPriorityLevel;\n    }\n  };\n}\n\nfunction unstable_scheduleCallback(priorityLevel, callback, options) {\n  console.log(priorityLevel);\n  var currentTime = getCurrentTime();\n  var startTime;\n\n  if (typeof options === 'object' && options !== null) {\n    var delay = options.delay;\n\n    if (typeof delay === 'number' && delay > 0) {\n      startTime = currentTime + delay;\n    } else {\n      startTime = currentTime;\n    }\n  } else {\n    startTime = currentTime;\n  }\n\n  var timeout;\n\n  switch (priorityLevel) {\n    case ImmediatePriority:\n      timeout = IMMEDIATE_PRIORITY_TIMEOUT;\n      break;\n\n    case UserBlockingPriority:\n      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\n      break;\n\n    case IdlePriority:\n      timeout = IDLE_PRIORITY_TIMEOUT;\n      break;\n\n    case LowPriority:\n      timeout = LOW_PRIORITY_TIMEOUT;\n      break;\n\n    case NormalPriority:\n    default:\n      timeout = NORMAL_PRIORITY_TIMEOUT;\n      break;\n  }\n\n  var expirationTime = startTime + timeout;\n  var newTask = {\n    id: taskIdCounter++,\n    callback,\n    priorityLevel,\n    startTime,\n    expirationTime,\n    sortIndex: -1\n  };\n\n  if (enableProfiling) {\n    newTask.isQueued = false;\n  }\n\n  if (startTime > currentTime) {\n    // This is a delayed task.\n    newTask.sortIndex = startTime;\n    push(timerQueue, newTask);\n\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n      // All tasks are delayed, and this is the task with the earliest delay.\n      if (isHostTimeoutScheduled) {\n        // Cancel an existing timeout.\n        cancelHostTimeout();\n      } else {\n        isHostTimeoutScheduled = true;\n      } // Schedule a timeout.\n\n\n      requestHostTimeout(handleTimeout, startTime - currentTime);\n    }\n  } else {\n    newTask.sortIndex = expirationTime;\n    push(taskQueue, newTask);\n\n    if (enableProfiling) {\n      markTaskStart(newTask, currentTime);\n      newTask.isQueued = true;\n    } // Schedule a host callback, if needed. If we're already performing work,\n    // wait until the next time we yield.\n\n\n    if (!isHostCallbackScheduled && !isPerformingWork) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    }\n  }\n\n  return newTask;\n}\n\nfunction unstable_pauseExecution() {\n  isSchedulerPaused = true;\n}\n\nfunction unstable_continueExecution() {\n  isSchedulerPaused = false;\n\n  if (!isHostCallbackScheduled && !isPerformingWork) {\n    isHostCallbackScheduled = true;\n    requestHostCallback(flushWork);\n  }\n}\n\nfunction unstable_getFirstCallbackNode() {\n  return peek(taskQueue);\n}\n\nfunction unstable_cancelCallback(task) {\n  if (enableProfiling) {\n    if (task.isQueued) {\n      const currentTime = getCurrentTime();\n      markTaskCanceled(task, currentTime);\n      task.isQueued = false;\n    }\n  } // Null out the callback to indicate the task has been canceled. (Can't\n  // remove from the queue because you can't remove arbitrary nodes from an\n  // array based heap, only the first one.)\n\n\n  task.callback = null;\n}\n\nfunction unstable_getCurrentPriorityLevel() {\n  return currentPriorityLevel;\n}\n\nlet isMessageLoopRunning = false;\nlet scheduledHostCallback = null;\nlet taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main\n// thread, like user events. By default, it yields multiple times per frame.\n// It does not attempt to align with frame boundaries, since most tasks don't\n// need to be frame aligned; for those that do, use requestAnimationFrame.\n\nlet frameInterval = frameYieldMs;\nconst continuousInputInterval = continuousYieldMs;\nconst maxInterval = maxYieldMs;\nlet startTime = -1;\nlet needsPaint = false; // 判断任务是否可以终止\n\nfunction shouldYieldToHost() {\n  const timeElapsed = getCurrentTime() - startTime;\n\n  if (timeElapsed < frameInterval) {\n    // The main thread has only been blocked for a really short amount of time;\n    // smaller than a single frame. Don't yield yet.\n    return false;\n  } // The main thread has been blocked for a non-negligible amount of time. We\n  // may want to yield control of the main thread, so the browser can perform\n  // high priority tasks. The main ones are painting and user input. If there's\n  // a pending paint or a pending input, then we should yield. But if there's\n  // neither, then we can yield less often while remaining responsive. We'll\n  // eventually yield regardless, since there could be a pending paint that\n  // wasn't accompanied by a call to `requestPaint`, or other main thread tasks\n  // like network events.\n\n\n  if (enableIsInputPending) {\n    if (needsPaint) {\n      // There's a pending paint (signaled by `requestPaint`). Yield now.\n      return true;\n    }\n\n    if (timeElapsed < continuousInputInterval) {\n      // We haven't blocked the thread for that long. Only yield if there's a\n      // pending discrete input (e.g. click). It's OK if there's pending\n      // continuous input (e.g. mouseover).\n      if (isInputPending !== null) {\n        return isInputPending();\n      }\n    } else if (timeElapsed < maxInterval) {\n      // Yield if there's either a pending discrete or continuous input.\n      if (isInputPending !== null) {\n        return isInputPending(continuousOptions);\n      }\n    } else {\n      // We've blocked the thread for a long time. Even if there's no pending\n      // input, there may be some other scheduled work that we don't know about,\n      // like a network event. Yield now.\n      return true;\n    }\n  } // `isInputPending` isn't available. Yield now.\n\n\n  return true;\n}\n\nfunction requestPaint() {\n  if (enableIsInputPending && navigator !== undefined && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined) {\n    needsPaint = true;\n  } // Since we yield every frame regardless, `requestPaint` has no effect.\n\n}\n\nfunction forceFrameRate(fps) {\n  if (fps < 0 || fps > 125) {\n    // Using console['error'] to evade Babel and ESLint\n    console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');\n    return;\n  }\n\n  if (fps > 0) {\n    frameInterval = Math.floor(1000 / fps);\n  } else {\n    // reset the framerate\n    frameInterval = frameYieldMs;\n  }\n}\n\nconst performWorkUntilDeadline = () => {\n  if (scheduledHostCallback !== null) {\n    const currentTime = getCurrentTime(); // Keep track of the start time so we can measure how long the main thread\n    // has been blocked.\n\n    startTime = currentTime;\n    const hasTimeRemaining = true; // If a scheduler task throws, exit the current browser task so the\n    // error can be observed.\n    //\n    // Intentionally not using a try-catch, since that makes some debugging\n    // techniques harder. Instead, if `scheduledHostCallback` errors, then\n    // `hasMoreWork` will remain true, and we'll continue the work loop.\n\n    let hasMoreWork = true;\n\n    try {\n      hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\n    } finally {\n      if (hasMoreWork) {\n        // If there's more work, schedule the next message event at the end\n        // of the preceding one.\n        schedulePerformWorkUntilDeadline();\n      } else {\n        isMessageLoopRunning = false;\n        scheduledHostCallback = null;\n      }\n    }\n  } else {\n    isMessageLoopRunning = false;\n  } // Yielding to the browser will give it a chance to paint, so we can\n  // reset this.\n\n\n  needsPaint = false;\n};\n\nlet schedulePerformWorkUntilDeadline;\n\nif (typeof localSetImmediate === 'function') {\n  // Node.js and old IE.\n  // There's a few reasons for why we prefer setImmediate.\n  //\n  // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.\n  // (Even though this is a DOM fork of the Scheduler, you could get here\n  // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)\n  // https://github.com/facebook/react/issues/20756\n  //\n  // But also, it runs earlier which is the semantic we want.\n  // If other browsers ever implement it, it's better to use it.\n  // Although both of these would be inferior to native scheduling.\n  schedulePerformWorkUntilDeadline = () => {\n    localSetImmediate(performWorkUntilDeadline);\n  };\n} else if (typeof MessageChannel !== 'undefined') {\n  // DOM and Worker environments.\n  // We prefer MessageChannel because of the 4ms setTimeout clamping.\n  // MessageChannel 执行时机比setTimeOut更靠前s\n  const channel = new MessageChannel();\n  const port = channel.port2;\n  channel.port1.onmessage = performWorkUntilDeadline;\n\n  schedulePerformWorkUntilDeadline = () => {\n    port.postMessage(null);\n  };\n} else {\n  // We should only fallback here in non-browser environments.\n  schedulePerformWorkUntilDeadline = () => {\n    localSetTimeout(performWorkUntilDeadline, 0);\n  };\n}\n\nfunction requestHostCallback(callback) {\n  scheduledHostCallback = callback;\n\n  if (!isMessageLoopRunning) {\n    isMessageLoopRunning = true;\n    schedulePerformWorkUntilDeadline();\n  }\n}\n\nfunction requestHostTimeout(callback, ms) {\n  taskTimeoutID = localSetTimeout(() => {\n    callback(getCurrentTime());\n  }, ms);\n}\n\nfunction cancelHostTimeout() {\n  localClearTimeout(taskTimeoutID);\n  taskTimeoutID = -1;\n}\n\nconst unstable_requestPaint = requestPaint;\nexport { ImmediatePriority as unstable_ImmediatePriority, UserBlockingPriority as unstable_UserBlockingPriority, NormalPriority as unstable_NormalPriority, IdlePriority as unstable_IdlePriority, LowPriority as unstable_LowPriority, unstable_runWithPriority, unstable_next, unstable_scheduleCallback, unstable_cancelCallback, unstable_wrapCallback, unstable_getCurrentPriorityLevel, shouldYieldToHost as unstable_shouldYield, unstable_requestPaint, unstable_continueExecution, unstable_pauseExecution, unstable_getFirstCallbackNode, getCurrentTime as unstable_now, forceFrameRate as unstable_forceFrameRate };\nexport const unstable_Profiling = enableProfiling ? {\n  startLoggingProfilingEvents,\n  stopLoggingProfilingEvents\n} : null;","map":{"version":3,"names":["enableSchedulerDebugging","enableProfiling","enableIsInputPending","enableIsInputPendingContinuous","frameYieldMs","continuousYieldMs","maxYieldMs","push","pop","peek","ImmediatePriority","UserBlockingPriority","NormalPriority","LowPriority","IdlePriority","markTaskRun","markTaskYield","markTaskCompleted","markTaskCanceled","markTaskErrored","markSchedulerSuspended","markSchedulerUnsuspended","markTaskStart","stopLoggingProfilingEvents","startLoggingProfilingEvents","getCurrentTime","hasPerformanceNow","performance","now","localPerformance","localDate","Date","initialTime","maxSigned31BitInt","IMMEDIATE_PRIORITY_TIMEOUT","USER_BLOCKING_PRIORITY_TIMEOUT","NORMAL_PRIORITY_TIMEOUT","LOW_PRIORITY_TIMEOUT","IDLE_PRIORITY_TIMEOUT","taskQueue","timerQueue","taskIdCounter","isSchedulerPaused","currentTask","currentPriorityLevel","isPerformingWork","isHostCallbackScheduled","isHostTimeoutScheduled","localSetTimeout","setTimeout","localClearTimeout","clearTimeout","localSetImmediate","setImmediate","isInputPending","navigator","scheduling","undefined","bind","continuousOptions","includeContinuous","advanceTimers","currentTime","timer","callback","startTime","sortIndex","expirationTime","isQueued","handleTimeout","requestHostCallback","flushWork","firstTimer","requestHostTimeout","hasTimeRemaining","cancelHostTimeout","previousPriorityLevel","workLoop","error","shouldYieldToHost","priorityLevel","didUserCallbackTimeout","continuationCallback","unstable_runWithPriority","eventHandler","unstable_next","unstable_wrapCallback","parentPriorityLevel","apply","arguments","unstable_scheduleCallback","options","console","log","delay","timeout","newTask","id","unstable_pauseExecution","unstable_continueExecution","unstable_getFirstCallbackNode","unstable_cancelCallback","task","unstable_getCurrentPriorityLevel","isMessageLoopRunning","scheduledHostCallback","taskTimeoutID","frameInterval","continuousInputInterval","maxInterval","needsPaint","timeElapsed","requestPaint","forceFrameRate","fps","Math","floor","performWorkUntilDeadline","hasMoreWork","schedulePerformWorkUntilDeadline","MessageChannel","channel","port","port2","port1","onmessage","postMessage","ms","unstable_requestPaint","unstable_ImmediatePriority","unstable_UserBlockingPriority","unstable_NormalPriority","unstable_IdlePriority","unstable_LowPriority","unstable_shouldYield","unstable_now","unstable_forceFrameRate","unstable_Profiling"],"sources":["D:/project/font-end/debug-anything/react-test/src/react/packages/scheduler/src/forks/Scheduler.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\n\r\n/* eslint-disable no-var */\r\n\r\nimport {\r\n  enableSchedulerDebugging,\r\n  enableProfiling,\r\n  enableIsInputPending,\r\n  enableIsInputPendingContinuous,\r\n  frameYieldMs,\r\n  continuousYieldMs,\r\n  maxYieldMs,\r\n} from '../SchedulerFeatureFlags';\r\n\r\nimport {push, pop, peek} from '../SchedulerMinHeap';\r\n\r\n// TODO: Use symbols?\r\nimport {\r\n  ImmediatePriority,\r\n  UserBlockingPriority,\r\n  NormalPriority,\r\n  LowPriority,\r\n  IdlePriority,\r\n} from '../SchedulerPriorities';\r\nimport {\r\n  markTaskRun,\r\n  markTaskYield,\r\n  markTaskCompleted,\r\n  markTaskCanceled,\r\n  markTaskErrored,\r\n  markSchedulerSuspended,\r\n  markSchedulerUnsuspended,\r\n  markTaskStart,\r\n  stopLoggingProfilingEvents,\r\n  startLoggingProfilingEvents,\r\n} from '../SchedulerProfiling';\r\n\r\nlet getCurrentTime;\r\nconst hasPerformanceNow =\r\n  typeof performance === 'object' && typeof performance.now === 'function';\r\n\r\nif (hasPerformanceNow) {\r\n  const localPerformance = performance;\r\n  getCurrentTime = () => localPerformance.now();\r\n} else {\r\n  const localDate = Date;\r\n  const initialTime = localDate.now();\r\n  getCurrentTime = () => localDate.now() - initialTime;\r\n}\r\n\r\n// Max 31 bit integer. The max integer size in V8 for 32-bit systems.\r\n// Math.pow(2, 30) - 1\r\n// 0b111111111111111111111111111111\r\nvar maxSigned31BitInt = 1073741823;\r\n\r\n// Times out immediately\r\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1;\r\n// Eventually times out\r\nvar USER_BLOCKING_PRIORITY_TIMEOUT = 250;\r\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\r\nvar LOW_PRIORITY_TIMEOUT = 10000;\r\n// Never times out\r\nvar IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;\r\n\r\n// Tasks are stored on a min heap\r\nvar taskQueue = [];\r\nvar timerQueue = [];\r\n\r\n// Incrementing id counter. Used to maintain insertion order.\r\nvar taskIdCounter = 1;\r\n\r\n// Pausing the scheduler is useful for debugging.\r\nvar isSchedulerPaused = false;\r\n\r\nvar currentTask = null;\r\nvar currentPriorityLevel = NormalPriority;\r\n\r\n// This is set while performing work, to prevent re-entrance.\r\nvar isPerformingWork = false;\r\n\r\nvar isHostCallbackScheduled = false;\r\nvar isHostTimeoutScheduled = false;\r\n\r\n// Capture local references to native APIs, in case a polyfill overrides them.\r\nconst localSetTimeout = typeof setTimeout === 'function' ? setTimeout : null;\r\nconst localClearTimeout =\r\n  typeof clearTimeout === 'function' ? clearTimeout : null;\r\nconst localSetImmediate =\r\n  typeof setImmediate !== 'undefined' ? setImmediate : null; // IE and Node.js + jsdom\r\n\r\nconst isInputPending =\r\n  typeof navigator !== 'undefined' &&\r\n  navigator.scheduling !== undefined &&\r\n  navigator.scheduling.isInputPending !== undefined\r\n    ? navigator.scheduling.isInputPending.bind(navigator.scheduling)\r\n    : null;\r\n\r\nconst continuousOptions = {includeContinuous: enableIsInputPendingContinuous};\r\n\r\nfunction advanceTimers(currentTime) {\r\n  // Check for tasks that are no longer delayed and add them to the queue.\r\n  let timer = peek(timerQueue);\r\n  while (timer !== null) {\r\n    if (timer.callback === null) {\r\n      // Timer was cancelled.\r\n      pop(timerQueue);\r\n    } else if (timer.startTime <= currentTime) {\r\n      // Timer fired. Transfer to the task queue.\r\n      pop(timerQueue);\r\n      timer.sortIndex = timer.expirationTime;\r\n      push(taskQueue, timer);\r\n      if (enableProfiling) {\r\n        markTaskStart(timer, currentTime);\r\n        timer.isQueued = true;\r\n      }\r\n    } else {\r\n      // Remaining timers are pending.\r\n      return;\r\n    }\r\n    timer = peek(timerQueue);\r\n  }\r\n}\r\n\r\nfunction handleTimeout(currentTime) {\r\n  isHostTimeoutScheduled = false;\r\n  advanceTimers(currentTime);\r\n\r\n  if (!isHostCallbackScheduled) {\r\n    if (peek(taskQueue) !== null) {\r\n      isHostCallbackScheduled = true;\r\n      requestHostCallback(flushWork);\r\n    } else {\r\n      const firstTimer = peek(timerQueue);\r\n      if (firstTimer !== null) {\r\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction flushWork(hasTimeRemaining, initialTime) {\r\n  if (enableProfiling) {\r\n    markSchedulerUnsuspended(initialTime);\r\n  }\r\n\r\n  // We'll need a host callback the next time work is scheduled.\r\n  // TODO What is the host?\r\n  isHostCallbackScheduled = false;\r\n  if (isHostTimeoutScheduled) {\r\n    // We scheduled a timeout but it's no longer needed. Cancel it.\r\n    isHostTimeoutScheduled = false;\r\n    cancelHostTimeout();\r\n  }\r\n\r\n  isPerformingWork = true;\r\n  const previousPriorityLevel = currentPriorityLevel;\r\n  try {\r\n    if (enableProfiling) {\r\n      try {\r\n        return workLoop(hasTimeRemaining, initialTime);\r\n      } catch (error) {\r\n        if (currentTask !== null) {\r\n          const currentTime = getCurrentTime();\r\n          markTaskErrored(currentTask, currentTime);\r\n          currentTask.isQueued = false;\r\n        }\r\n        throw error;\r\n      }\r\n    } else {\r\n      // No catch in prod code path.\r\n      return workLoop(hasTimeRemaining, initialTime);\r\n    }\r\n  } finally {\r\n    currentTask = null;\r\n    currentPriorityLevel = previousPriorityLevel;\r\n    isPerformingWork = false;\r\n    if (enableProfiling) {\r\n      const currentTime = getCurrentTime();\r\n      markSchedulerSuspended(currentTime);\r\n    }\r\n  }\r\n}\r\n\r\nfunction workLoop(hasTimeRemaining, initialTime) {\r\n  let currentTime = initialTime;\r\n  advanceTimers(currentTime);\r\n  currentTask = peek(taskQueue);\r\n  while (\r\n    currentTask !== null &&\r\n    !(enableSchedulerDebugging && isSchedulerPaused)\r\n  ) {\r\n    if (\r\n      currentTask.expirationTime > currentTime &&\r\n      (!hasTimeRemaining || shouldYieldToHost())\r\n    ) {\r\n      // This currentTask hasn't expired, and we've reached the deadline.\r\n      break;\r\n    }\r\n    const callback = currentTask.callback;\r\n    if (typeof callback === 'function') {\r\n      currentTask.callback = null;\r\n      currentPriorityLevel = currentTask.priorityLevel;\r\n      const didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\r\n      if (enableProfiling) {\r\n        markTaskRun(currentTask, currentTime);\r\n      }\r\n      const continuationCallback = callback(didUserCallbackTimeout);\r\n      currentTime = getCurrentTime();\r\n      if (typeof continuationCallback === 'function') {\r\n        currentTask.callback = continuationCallback;\r\n        if (enableProfiling) {\r\n          markTaskYield(currentTask, currentTime);\r\n        }\r\n      } else {\r\n        if (enableProfiling) {\r\n          markTaskCompleted(currentTask, currentTime);\r\n          currentTask.isQueued = false;\r\n        }\r\n        if (currentTask === peek(taskQueue)) {\r\n          pop(taskQueue);\r\n        }\r\n      }\r\n      advanceTimers(currentTime);\r\n    } else {\r\n      pop(taskQueue);\r\n    }\r\n    currentTask = peek(taskQueue);\r\n  }\r\n  // Return whether there's additional work\r\n  if (currentTask !== null) {\r\n    return true;\r\n  } else {\r\n    const firstTimer = peek(timerQueue);\r\n    if (firstTimer !== null) {\r\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n\r\n// export type PriorityLevel = 0 | 1 | 2 | 3 | 4 | 5;\r\n// export const NoPriority = 0;\r\n// export const ImmediatePriority = 1;\r\n// export const UserBlockingPriority = 2;\r\n// export const NormalPriority = 3;\r\n// export const LowPriority = 4;\r\n// export const IdlePriority = 5;\r\n// 该方法接收一个优先级常量与一个回调函数作为参数。回调函数会以优先级高低为顺序排列在一个定时器中并在合适的时间触发。\r\nfunction unstable_runWithPriority(priorityLevel, eventHandler) {\r\n  switch (priorityLevel) {\r\n    case ImmediatePriority:\r\n    case UserBlockingPriority:\r\n    case NormalPriority:\r\n    case LowPriority:\r\n    case IdlePriority:\r\n      break;\r\n    default:\r\n      priorityLevel = NormalPriority;\r\n  }\r\n\r\n  var previousPriorityLevel = currentPriorityLevel;\r\n  currentPriorityLevel = priorityLevel;\r\n\r\n  try {\r\n    return eventHandler();\r\n  } finally {\r\n    currentPriorityLevel = previousPriorityLevel;\r\n  }\r\n}\r\n\r\nfunction unstable_next(eventHandler) {\r\n  var priorityLevel;\r\n  switch (currentPriorityLevel) {\r\n    case ImmediatePriority:\r\n    case UserBlockingPriority:\r\n    case NormalPriority:\r\n      // Shift down to normal priority\r\n      priorityLevel = NormalPriority;\r\n      break;\r\n    default:\r\n      // Anything lower than normal priority should remain at the current level.\r\n      priorityLevel = currentPriorityLevel;\r\n      break;\r\n  }\r\n\r\n  var previousPriorityLevel = currentPriorityLevel;\r\n  currentPriorityLevel = priorityLevel;\r\n\r\n  try {\r\n    return eventHandler();\r\n  } finally {\r\n    currentPriorityLevel = previousPriorityLevel;\r\n  }\r\n}\r\n\r\nfunction unstable_wrapCallback(callback) {\r\n  var parentPriorityLevel = currentPriorityLevel;\r\n  return function() {\r\n    // This is a fork of runWithPriority, inlined for performance.\r\n    var previousPriorityLevel = currentPriorityLevel;\r\n    currentPriorityLevel = parentPriorityLevel;\r\n\r\n    try {\r\n      return callback.apply(this, arguments);\r\n    } finally {\r\n      currentPriorityLevel = previousPriorityLevel;\r\n    }\r\n  };\r\n}\r\n\r\nfunction unstable_scheduleCallback(priorityLevel, callback, options) {\r\n  console.log(priorityLevel)\r\n  var currentTime = getCurrentTime();\r\n\r\n  var startTime;\r\n  if (typeof options === 'object' && options !== null) {\r\n    var delay = options.delay;\r\n    if (typeof delay === 'number' && delay > 0) {\r\n      startTime = currentTime + delay;\r\n    } else {\r\n      startTime = currentTime;\r\n    }\r\n  } else {\r\n    startTime = currentTime;\r\n  }\r\n\r\n  var timeout;\r\n  switch (priorityLevel) {\r\n    case ImmediatePriority:\r\n      timeout = IMMEDIATE_PRIORITY_TIMEOUT;\r\n      break;\r\n    case UserBlockingPriority:\r\n      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\r\n      break;\r\n    case IdlePriority:\r\n      timeout = IDLE_PRIORITY_TIMEOUT;\r\n      break;\r\n    case LowPriority:\r\n      timeout = LOW_PRIORITY_TIMEOUT;\r\n      break;\r\n    case NormalPriority:\r\n    default:\r\n      timeout = NORMAL_PRIORITY_TIMEOUT;\r\n      break;\r\n  }\r\n\r\n  var expirationTime = startTime + timeout;\r\n\r\n  var newTask = {\r\n    id: taskIdCounter++,\r\n    callback,\r\n    priorityLevel,\r\n    startTime,\r\n    expirationTime,\r\n    sortIndex: -1,\r\n  };\r\n  if (enableProfiling) {\r\n    newTask.isQueued = false;\r\n  }\r\n\r\n  if (startTime > currentTime) {\r\n    // This is a delayed task.\r\n    newTask.sortIndex = startTime;\r\n    push(timerQueue, newTask);\r\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\r\n      // All tasks are delayed, and this is the task with the earliest delay.\r\n      if (isHostTimeoutScheduled) {\r\n        // Cancel an existing timeout.\r\n        cancelHostTimeout();\r\n      } else {\r\n        isHostTimeoutScheduled = true;\r\n      }\r\n      // Schedule a timeout.\r\n      requestHostTimeout(handleTimeout, startTime - currentTime);\r\n    }\r\n  } else {\r\n    newTask.sortIndex = expirationTime;\r\n    push(taskQueue, newTask);\r\n    if (enableProfiling) {\r\n      markTaskStart(newTask, currentTime);\r\n      newTask.isQueued = true;\r\n    }\r\n    // Schedule a host callback, if needed. If we're already performing work,\r\n    // wait until the next time we yield.\r\n    if (!isHostCallbackScheduled && !isPerformingWork) {\r\n      isHostCallbackScheduled = true;\r\n      requestHostCallback(flushWork);\r\n    }\r\n  }\r\n\r\n  return newTask;\r\n}\r\n\r\nfunction unstable_pauseExecution() {\r\n  isSchedulerPaused = true;\r\n}\r\n\r\nfunction unstable_continueExecution() {\r\n  isSchedulerPaused = false;\r\n  if (!isHostCallbackScheduled && !isPerformingWork) {\r\n    isHostCallbackScheduled = true;\r\n    requestHostCallback(flushWork);\r\n  }\r\n}\r\n\r\nfunction unstable_getFirstCallbackNode() {\r\n  return peek(taskQueue);\r\n}\r\n\r\nfunction unstable_cancelCallback(task) {\r\n  if (enableProfiling) {\r\n    if (task.isQueued) {\r\n      const currentTime = getCurrentTime();\r\n      markTaskCanceled(task, currentTime);\r\n      task.isQueued = false;\r\n    }\r\n  }\r\n\r\n  // Null out the callback to indicate the task has been canceled. (Can't\r\n  // remove from the queue because you can't remove arbitrary nodes from an\r\n  // array based heap, only the first one.)\r\n  task.callback = null;\r\n}\r\n\r\nfunction unstable_getCurrentPriorityLevel() {\r\n  return currentPriorityLevel;\r\n}\r\n\r\nlet isMessageLoopRunning = false;\r\nlet scheduledHostCallback = null;\r\nlet taskTimeoutID = -1;\r\n\r\n// Scheduler periodically yields in case there is other work on the main\r\n// thread, like user events. By default, it yields multiple times per frame.\r\n// It does not attempt to align with frame boundaries, since most tasks don't\r\n// need to be frame aligned; for those that do, use requestAnimationFrame.\r\nlet frameInterval = frameYieldMs;\r\nconst continuousInputInterval = continuousYieldMs;\r\nconst maxInterval = maxYieldMs;\r\nlet startTime = -1;\r\n\r\nlet needsPaint = false;\r\n\r\n// 判断任务是否可以终止\r\nfunction shouldYieldToHost() {\r\n  const timeElapsed = getCurrentTime() - startTime;\r\n  if (timeElapsed < frameInterval) {\r\n    // The main thread has only been blocked for a really short amount of time;\r\n    // smaller than a single frame. Don't yield yet.\r\n    return false;\r\n  }\r\n\r\n  // The main thread has been blocked for a non-negligible amount of time. We\r\n  // may want to yield control of the main thread, so the browser can perform\r\n  // high priority tasks. The main ones are painting and user input. If there's\r\n  // a pending paint or a pending input, then we should yield. But if there's\r\n  // neither, then we can yield less often while remaining responsive. We'll\r\n  // eventually yield regardless, since there could be a pending paint that\r\n  // wasn't accompanied by a call to `requestPaint`, or other main thread tasks\r\n  // like network events.\r\n  if (enableIsInputPending) {\r\n    if (needsPaint) {\r\n      // There's a pending paint (signaled by `requestPaint`). Yield now.\r\n      return true;\r\n    }\r\n    if (timeElapsed < continuousInputInterval) {\r\n      // We haven't blocked the thread for that long. Only yield if there's a\r\n      // pending discrete input (e.g. click). It's OK if there's pending\r\n      // continuous input (e.g. mouseover).\r\n      if (isInputPending !== null) {\r\n        return isInputPending();\r\n      }\r\n    } else if (timeElapsed < maxInterval) {\r\n      // Yield if there's either a pending discrete or continuous input.\r\n      if (isInputPending !== null) {\r\n        return isInputPending(continuousOptions);\r\n      }\r\n    } else {\r\n      // We've blocked the thread for a long time. Even if there's no pending\r\n      // input, there may be some other scheduled work that we don't know about,\r\n      // like a network event. Yield now.\r\n      return true;\r\n    }\r\n  }\r\n\r\n  // `isInputPending` isn't available. Yield now.\r\n  return true;\r\n}\r\n\r\nfunction requestPaint() {\r\n  if (\r\n    enableIsInputPending &&\r\n    navigator !== undefined &&\r\n    navigator.scheduling !== undefined &&\r\n    navigator.scheduling.isInputPending !== undefined\r\n  ) {\r\n    needsPaint = true;\r\n  }\r\n\r\n  // Since we yield every frame regardless, `requestPaint` has no effect.\r\n}\r\n\r\nfunction forceFrameRate(fps) {\r\n  if (fps < 0 || fps > 125) {\r\n    // Using console['error'] to evade Babel and ESLint\r\n    console['error'](\r\n      'forceFrameRate takes a positive int between 0 and 125, ' +\r\n        'forcing frame rates higher than 125 fps is not supported',\r\n    );\r\n    return;\r\n  }\r\n  if (fps > 0) {\r\n    frameInterval = Math.floor(1000 / fps);\r\n  } else {\r\n    // reset the framerate\r\n    frameInterval = frameYieldMs;\r\n  }\r\n}\r\n\r\nconst performWorkUntilDeadline = () => {\r\n  if (scheduledHostCallback !== null) {\r\n    const currentTime = getCurrentTime();\r\n    // Keep track of the start time so we can measure how long the main thread\r\n    // has been blocked.\r\n    startTime = currentTime;\r\n    const hasTimeRemaining = true;\r\n\r\n    // If a scheduler task throws, exit the current browser task so the\r\n    // error can be observed.\r\n    //\r\n    // Intentionally not using a try-catch, since that makes some debugging\r\n    // techniques harder. Instead, if `scheduledHostCallback` errors, then\r\n    // `hasMoreWork` will remain true, and we'll continue the work loop.\r\n    let hasMoreWork = true;\r\n    try {\r\n      hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\r\n    } finally {\r\n      if (hasMoreWork) {\r\n        // If there's more work, schedule the next message event at the end\r\n        // of the preceding one.\r\n        schedulePerformWorkUntilDeadline();\r\n      } else {\r\n        isMessageLoopRunning = false;\r\n        scheduledHostCallback = null;\r\n      }\r\n    }\r\n  } else {\r\n    isMessageLoopRunning = false;\r\n  }\r\n  // Yielding to the browser will give it a chance to paint, so we can\r\n  // reset this.\r\n  needsPaint = false;\r\n};\r\n\r\nlet schedulePerformWorkUntilDeadline;\r\nif (typeof localSetImmediate === 'function') {\r\n  // Node.js and old IE.\r\n  // There's a few reasons for why we prefer setImmediate.\r\n  //\r\n  // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.\r\n  // (Even though this is a DOM fork of the Scheduler, you could get here\r\n  // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)\r\n  // https://github.com/facebook/react/issues/20756\r\n  //\r\n  // But also, it runs earlier which is the semantic we want.\r\n  // If other browsers ever implement it, it's better to use it.\r\n  // Although both of these would be inferior to native scheduling.\r\n  schedulePerformWorkUntilDeadline = () => {\r\n    localSetImmediate(performWorkUntilDeadline);\r\n  };\r\n} else if (typeof MessageChannel !== 'undefined') {\r\n  // DOM and Worker environments.\r\n  // We prefer MessageChannel because of the 4ms setTimeout clamping.\r\n  // MessageChannel 执行时机比setTimeOut更靠前s\r\n  const channel = new MessageChannel();\r\n  const port = channel.port2;\r\n  channel.port1.onmessage = performWorkUntilDeadline;\r\n  schedulePerformWorkUntilDeadline = () => {\r\n    port.postMessage(null);\r\n  };\r\n} else {\r\n  // We should only fallback here in non-browser environments.\r\n  schedulePerformWorkUntilDeadline = () => {\r\n    localSetTimeout(performWorkUntilDeadline, 0);\r\n  };\r\n}\r\n\r\nfunction requestHostCallback(callback) {\r\n  scheduledHostCallback = callback;\r\n  if (!isMessageLoopRunning) {\r\n    isMessageLoopRunning = true;\r\n    schedulePerformWorkUntilDeadline();\r\n  }\r\n}\r\n\r\nfunction requestHostTimeout(callback, ms) {\r\n  taskTimeoutID = localSetTimeout(() => {\r\n    callback(getCurrentTime());\r\n  }, ms);\r\n}\r\n\r\nfunction cancelHostTimeout() {\r\n  localClearTimeout(taskTimeoutID);\r\n  taskTimeoutID = -1;\r\n}\r\n\r\nconst unstable_requestPaint = requestPaint;\r\n\r\nexport {\r\n  ImmediatePriority as unstable_ImmediatePriority,\r\n  UserBlockingPriority as unstable_UserBlockingPriority,\r\n  NormalPriority as unstable_NormalPriority,\r\n  IdlePriority as unstable_IdlePriority,\r\n  LowPriority as unstable_LowPriority,\r\n  unstable_runWithPriority,\r\n  unstable_next,\r\n  unstable_scheduleCallback,\r\n  unstable_cancelCallback,\r\n  unstable_wrapCallback,\r\n  unstable_getCurrentPriorityLevel,\r\n  shouldYieldToHost as unstable_shouldYield,\r\n  unstable_requestPaint,\r\n  unstable_continueExecution,\r\n  unstable_pauseExecution,\r\n  unstable_getFirstCallbackNode,\r\n  getCurrentTime as unstable_now,\r\n  forceFrameRate as unstable_forceFrameRate,\r\n};\r\n\r\nexport const unstable_Profiling = enableProfiling\r\n  ? {\r\n      startLoggingProfilingEvents,\r\n      stopLoggingProfilingEvents,\r\n    }\r\n  : null;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}