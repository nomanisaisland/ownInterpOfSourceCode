{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\nimport { enableFilterEmptyStringAttributesDOM, enableCustomElementPropertySupport } from 'shared/ReactFeatureFlags';\nimport hasOwnProperty from 'shared/hasOwnProperty';\n// A reserved attribute.\n// It is handled by React separately and shouldn't be written to the DOM.\nexport const RESERVED = 0; // A simple string attribute.\n// Attributes that aren't in the filter are presumed to have this type.\n\nexport const STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called\n// \"enumerated\" attributes with \"true\" and \"false\" as possible values.\n// When true, it should be set to a \"true\" string.\n// When false, it should be set to a \"false\" string.\n\nexport const BOOLEANISH_STRING = 2; // A real boolean attribute.\n// When true, it should be present (set either to an empty string or its name).\n// When false, it should be omitted.\n\nexport const BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.\n// When true, it should be present (set either to an empty string or its name).\n// When false, it should be omitted.\n// For any other value, should be present with that value.\n\nexport const OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.\n// When falsy, it should be removed.\n\nexport const NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.\n// When falsy, it should be removed.\n\nexport const POSITIVE_NUMERIC = 6;\n\n/* eslint-disable max-len */\nexport const ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\n/* eslint-enable max-len */\n\nexport const ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + '\\\\-.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nexport const VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');\nconst illegalAttributeNameCache = {};\nconst validatedAttributeNameCache = {};\nexport function isAttributeNameSafe(attributeName) {\n  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {\n    return true;\n  }\n\n  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {\n    return false;\n  }\n\n  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {\n    validatedAttributeNameCache[attributeName] = true;\n    return true;\n  }\n\n  illegalAttributeNameCache[attributeName] = true;\n\n  if (__DEV__) {\n    console.error('Invalid attribute name: `%s`', attributeName);\n  }\n\n  return false;\n}\nexport function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {\n  if (propertyInfo !== null) {\n    return propertyInfo.type === RESERVED;\n  }\n\n  if (isCustomComponentTag) {\n    return false;\n  }\n\n  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {\n    return true;\n  }\n\n  return false;\n}\nexport function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {\n  if (propertyInfo !== null && propertyInfo.type === RESERVED) {\n    return false;\n  }\n\n  switch (typeof value) {\n    case 'function': // $FlowIssue symbol is perfectly valid here\n\n    case 'symbol':\n      // eslint-disable-line\n      return true;\n\n    case 'boolean':\n      {\n        if (isCustomComponentTag) {\n          return false;\n        }\n\n        if (propertyInfo !== null) {\n          return !propertyInfo.acceptsBooleans;\n        } else {\n          const prefix = name.toLowerCase().slice(0, 5);\n          return prefix !== 'data-' && prefix !== 'aria-';\n        }\n      }\n\n    default:\n      return false;\n  }\n}\nexport function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {\n  if (value === null || typeof value === 'undefined') {\n    return true;\n  }\n\n  if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {\n    return true;\n  }\n\n  if (isCustomComponentTag) {\n    return false;\n  }\n\n  if (propertyInfo !== null) {\n    if (enableFilterEmptyStringAttributesDOM) {\n      if (propertyInfo.removeEmptyString && value === '') {\n        if (__DEV__) {\n          if (name === 'src') {\n            console.error('An empty string (\"\") was passed to the %s attribute. ' + 'This may cause the browser to download the whole page again over the network. ' + 'To fix this, either do not render the element at all ' + 'or pass null to %s instead of an empty string.', name, name);\n          } else {\n            console.error('An empty string (\"\") was passed to the %s attribute. ' + 'To fix this, either do not render the element at all ' + 'or pass null to %s instead of an empty string.', name, name);\n          }\n        }\n\n        return true;\n      }\n    }\n\n    switch (propertyInfo.type) {\n      case BOOLEAN:\n        return !value;\n\n      case OVERLOADED_BOOLEAN:\n        return value === false;\n\n      case NUMERIC:\n        return isNaN(value);\n\n      case POSITIVE_NUMERIC:\n        return isNaN(value) || value < 1;\n    }\n  }\n\n  return false;\n}\nexport function getPropertyInfo(name) {\n  return properties.hasOwnProperty(name) ? properties[name] : null;\n}\n\nfunction PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {\n  this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;\n  this.attributeName = attributeName;\n  this.attributeNamespace = attributeNamespace;\n  this.mustUseProperty = mustUseProperty;\n  this.propertyName = name;\n  this.type = type;\n  this.sanitizeURL = sanitizeURL;\n  this.removeEmptyString = removeEmptyString;\n} // When adding attributes to this list, be sure to also add them to\n// the `possibleStandardNames` module to ensure casing and incorrect\n// name warnings.\n\n\n_c = PropertyInfoRecord;\nconst properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.\n\nconst reservedProps = ['children', 'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular\n// elements (not just inputs). Now that ReactDOMInput assigns to the\n// defaultValue property -- do we need this?\n'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'];\n\nif (enableCustomElementPropertySupport) {\n  reservedProps.push('innerText', 'textContent');\n}\n\nreservedProps.forEach(name => {\n  properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty\n  name, // attributeName\n  null, // attributeNamespace\n  false, // sanitizeURL\n  false);\n}); // A few React string attributes have a different name.\n// This is a mapping from React prop names to the attribute names.\n\n[['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(_ref => {\n  let [name, attributeName] = _ref;\n  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty\n  attributeName, // attributeName\n  null, // attributeNamespace\n  false, // sanitizeURL\n  false);\n}); // These are \"enumerated\" HTML attributes that accept \"true\" and \"false\".\n// In React, we let users pass `true` and `false` even though technically\n// these aren't boolean attributes (they are coerced to strings).\n\n['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(name => {\n  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty\n  name.toLowerCase(), // attributeName\n  null, // attributeNamespace\n  false, // sanitizeURL\n  false);\n}); // These are \"enumerated\" SVG attributes that accept \"true\" and \"false\".\n// In React, we let users pass `true` and `false` even though technically\n// these aren't boolean attributes (they are coerced to strings).\n// Since these are SVG attributes, their attribute names are case-sensitive.\n\n['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(name => {\n  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty\n  name, // attributeName\n  null, // attributeNamespace\n  false, // sanitizeURL\n  false);\n}); // These are HTML boolean attributes.\n\n['allowFullScreen', 'async', // Note: there is a special case that prevents it from being written to the DOM\n// on the client side because the browsers are inconsistent. Instead we call focus().\n'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'disableRemotePlayback', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata\n'itemScope'].forEach(name => {\n  properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty\n  name.toLowerCase(), // attributeName\n  null, // attributeNamespace\n  false, // sanitizeURL\n  false);\n}); // These are the few React props that we set as DOM properties\n// rather than attributes. These are all booleans.\n\n['checked', // Note: `option.selected` is not updated if `select.multiple` is\n// disabled with `removeAttribute`. We have special logic for handling this.\n'multiple', 'muted', 'selected' // NOTE: if you add a camelCased prop to this list,\n// you'll need to set attributeName to name.toLowerCase()\n// instead in the assignment below.\n].forEach(name => {\n  properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty\n  name, // attributeName\n  null, // attributeNamespace\n  false, // sanitizeURL\n  false);\n}); // These are HTML attributes that are \"overloaded booleans\": they behave like\n// booleans, but can also accept a string value.\n\n['capture', 'download' // NOTE: if you add a camelCased prop to this list,\n// you'll need to set attributeName to name.toLowerCase()\n// instead in the assignment below.\n].forEach(name => {\n  properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty\n  name, // attributeName\n  null, // attributeNamespace\n  false, // sanitizeURL\n  false);\n}); // These are HTML attributes that must be positive numbers.\n\n['cols', 'rows', 'size', 'span' // NOTE: if you add a camelCased prop to this list,\n// you'll need to set attributeName to name.toLowerCase()\n// instead in the assignment below.\n].forEach(name => {\n  properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty\n  name, // attributeName\n  null, // attributeNamespace\n  false, // sanitizeURL\n  false);\n}); // These are HTML attributes that must be numbers.\n\n['rowSpan', 'start'].forEach(name => {\n  properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty\n  name.toLowerCase(), // attributeName\n  null, // attributeNamespace\n  false, // sanitizeURL\n  false);\n});\nconst CAMELIZE = /[\\-\\:]([a-z])/g;\n\nconst capitalize = token => token[1].toUpperCase(); // This is a list of all SVG attributes that need special casing, namespacing,\n// or boolean value assignment. Regular attributes that just accept strings\n// and have the same names are omitted, just like in the HTML attribute filter.\n// Some of these attributes can be hard to find. This list was created by\n// scraping the MDN documentation.\n\n\n['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height' // NOTE: if you add a camelCased prop to this list,\n// you'll need to set attributeName to name.toLowerCase()\n// instead in the assignment below.\n].forEach(attributeName => {\n  const name = attributeName.replace(CAMELIZE, capitalize);\n  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty\n  attributeName, null, // attributeNamespace\n  false, // sanitizeURL\n  false);\n}); // String SVG attributes with the xlink namespace.\n\n['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type' // NOTE: if you add a camelCased prop to this list,\n// you'll need to set attributeName to name.toLowerCase()\n// instead in the assignment below.\n].forEach(attributeName => {\n  const name = attributeName.replace(CAMELIZE, capitalize);\n  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty\n  attributeName, 'http://www.w3.org/1999/xlink', false, // sanitizeURL\n  false);\n}); // String SVG attributes with the xml namespace.\n\n['xml:base', 'xml:lang', 'xml:space' // NOTE: if you add a camelCased prop to this list,\n// you'll need to set attributeName to name.toLowerCase()\n// instead in the assignment below.\n].forEach(attributeName => {\n  const name = attributeName.replace(CAMELIZE, capitalize);\n  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty\n  attributeName, 'http://www.w3.org/XML/1998/namespace', false, // sanitizeURL\n  false);\n}); // These attribute exists both in HTML and SVG.\n// The attribute name is case-sensitive in SVG so we can't just use\n// the React name like we do for attributes that exist only in HTML.\n\n['tabIndex', 'crossOrigin'].forEach(attributeName => {\n  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty\n  attributeName.toLowerCase(), // attributeName\n  null, // attributeNamespace\n  false, // sanitizeURL\n  false);\n}); // These attributes accept URLs. These must not allow javascript: URLS.\n// These will also need to accept Trusted Types object in the future.\n\nconst xlinkHref = 'xlinkHref';\nproperties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, // mustUseProperty\n'xlink:href', 'http://www.w3.org/1999/xlink', true, // sanitizeURL\nfalse);\n['src', 'href', 'action', 'formAction'].forEach(attributeName => {\n  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty\n  attributeName.toLowerCase(), // attributeName\n  null, // attributeNamespace\n  true, // sanitizeURL\n  true);\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"PropertyInfoRecord\");","map":{"version":3,"names":["enableFilterEmptyStringAttributesDOM","enableCustomElementPropertySupport","hasOwnProperty","RESERVED","STRING","BOOLEANISH_STRING","BOOLEAN","OVERLOADED_BOOLEAN","NUMERIC","POSITIVE_NUMERIC","ATTRIBUTE_NAME_START_CHAR","ATTRIBUTE_NAME_CHAR","VALID_ATTRIBUTE_NAME_REGEX","RegExp","illegalAttributeNameCache","validatedAttributeNameCache","isAttributeNameSafe","attributeName","call","test","__DEV__","console","error","shouldIgnoreAttribute","name","propertyInfo","isCustomComponentTag","type","length","shouldRemoveAttributeWithWarning","value","acceptsBooleans","prefix","toLowerCase","slice","shouldRemoveAttribute","removeEmptyString","isNaN","getPropertyInfo","properties","PropertyInfoRecord","mustUseProperty","attributeNamespace","sanitizeURL","propertyName","reservedProps","push","forEach","CAMELIZE","capitalize","token","toUpperCase","replace","xlinkHref"],"sources":["D:/project/font-end/debug-anything/react-test/src/react/packages/react-dom/src/shared/DOMProperty.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport {\r\n  enableFilterEmptyStringAttributesDOM,\r\n  enableCustomElementPropertySupport,\r\n} from 'shared/ReactFeatureFlags';\r\nimport hasOwnProperty from 'shared/hasOwnProperty';\r\n\r\ntype PropertyType = 0 | 1 | 2 | 3 | 4 | 5 | 6;\r\n\r\n// A reserved attribute.\r\n// It is handled by React separately and shouldn't be written to the DOM.\r\nexport const RESERVED = 0;\r\n\r\n// A simple string attribute.\r\n// Attributes that aren't in the filter are presumed to have this type.\r\nexport const STRING = 1;\r\n\r\n// A string attribute that accepts booleans in React. In HTML, these are called\r\n// \"enumerated\" attributes with \"true\" and \"false\" as possible values.\r\n// When true, it should be set to a \"true\" string.\r\n// When false, it should be set to a \"false\" string.\r\nexport const BOOLEANISH_STRING = 2;\r\n\r\n// A real boolean attribute.\r\n// When true, it should be present (set either to an empty string or its name).\r\n// When false, it should be omitted.\r\nexport const BOOLEAN = 3;\r\n\r\n// An attribute that can be used as a flag as well as with a value.\r\n// When true, it should be present (set either to an empty string or its name).\r\n// When false, it should be omitted.\r\n// For any other value, should be present with that value.\r\nexport const OVERLOADED_BOOLEAN = 4;\r\n\r\n// An attribute that must be numeric or parse as a numeric.\r\n// When falsy, it should be removed.\r\nexport const NUMERIC = 5;\r\n\r\n// An attribute that must be positive numeric or parse as a positive numeric.\r\n// When falsy, it should be removed.\r\nexport const POSITIVE_NUMERIC = 6;\r\n\r\nexport type PropertyInfo = {|\r\n  +acceptsBooleans: boolean,\r\n  +attributeName: string,\r\n  +attributeNamespace: string | null,\r\n  +mustUseProperty: boolean,\r\n  +propertyName: string,\r\n  +type: PropertyType,\r\n  +sanitizeURL: boolean,\r\n  +removeEmptyString: boolean,\r\n|};\r\n\r\n/* eslint-disable max-len */\r\nexport const ATTRIBUTE_NAME_START_CHAR =\r\n  ':A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\r\n/* eslint-enable max-len */\r\nexport const ATTRIBUTE_NAME_CHAR =\r\n  ATTRIBUTE_NAME_START_CHAR + '\\\\-.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\r\n\r\nexport const VALID_ATTRIBUTE_NAME_REGEX = new RegExp(\r\n  '^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$',\r\n);\r\n\r\nconst illegalAttributeNameCache = {};\r\nconst validatedAttributeNameCache = {};\r\n\r\nexport function isAttributeNameSafe(attributeName: string): boolean {\r\n  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {\r\n    return true;\r\n  }\r\n  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {\r\n    return false;\r\n  }\r\n  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {\r\n    validatedAttributeNameCache[attributeName] = true;\r\n    return true;\r\n  }\r\n  illegalAttributeNameCache[attributeName] = true;\r\n  if (__DEV__) {\r\n    console.error('Invalid attribute name: `%s`', attributeName);\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function shouldIgnoreAttribute(\r\n  name: string,\r\n  propertyInfo: PropertyInfo | null,\r\n  isCustomComponentTag: boolean,\r\n): boolean {\r\n  if (propertyInfo !== null) {\r\n    return propertyInfo.type === RESERVED;\r\n  }\r\n  if (isCustomComponentTag) {\r\n    return false;\r\n  }\r\n  if (\r\n    name.length > 2 &&\r\n    (name[0] === 'o' || name[0] === 'O') &&\r\n    (name[1] === 'n' || name[1] === 'N')\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function shouldRemoveAttributeWithWarning(\r\n  name: string,\r\n  value: mixed,\r\n  propertyInfo: PropertyInfo | null,\r\n  isCustomComponentTag: boolean,\r\n): boolean {\r\n  if (propertyInfo !== null && propertyInfo.type === RESERVED) {\r\n    return false;\r\n  }\r\n  switch (typeof value) {\r\n    case 'function':\r\n    // $FlowIssue symbol is perfectly valid here\r\n    case 'symbol': // eslint-disable-line\r\n      return true;\r\n    case 'boolean': {\r\n      if (isCustomComponentTag) {\r\n        return false;\r\n      }\r\n      if (propertyInfo !== null) {\r\n        return !propertyInfo.acceptsBooleans;\r\n      } else {\r\n        const prefix = name.toLowerCase().slice(0, 5);\r\n        return prefix !== 'data-' && prefix !== 'aria-';\r\n      }\r\n    }\r\n    default:\r\n      return false;\r\n  }\r\n}\r\n\r\nexport function shouldRemoveAttribute(\r\n  name: string,\r\n  value: mixed,\r\n  propertyInfo: PropertyInfo | null,\r\n  isCustomComponentTag: boolean,\r\n): boolean {\r\n  if (value === null || typeof value === 'undefined') {\r\n    return true;\r\n  }\r\n  if (\r\n    shouldRemoveAttributeWithWarning(\r\n      name,\r\n      value,\r\n      propertyInfo,\r\n      isCustomComponentTag,\r\n    )\r\n  ) {\r\n    return true;\r\n  }\r\n  if (isCustomComponentTag) {\r\n    return false;\r\n  }\r\n  if (propertyInfo !== null) {\r\n    if (enableFilterEmptyStringAttributesDOM) {\r\n      if (propertyInfo.removeEmptyString && value === '') {\r\n        if (__DEV__) {\r\n          if (name === 'src') {\r\n            console.error(\r\n              'An empty string (\"\") was passed to the %s attribute. ' +\r\n                'This may cause the browser to download the whole page again over the network. ' +\r\n                'To fix this, either do not render the element at all ' +\r\n                'or pass null to %s instead of an empty string.',\r\n              name,\r\n              name,\r\n            );\r\n          } else {\r\n            console.error(\r\n              'An empty string (\"\") was passed to the %s attribute. ' +\r\n                'To fix this, either do not render the element at all ' +\r\n                'or pass null to %s instead of an empty string.',\r\n              name,\r\n              name,\r\n            );\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n\r\n    switch (propertyInfo.type) {\r\n      case BOOLEAN:\r\n        return !value;\r\n      case OVERLOADED_BOOLEAN:\r\n        return value === false;\r\n      case NUMERIC:\r\n        return isNaN(value);\r\n      case POSITIVE_NUMERIC:\r\n        return isNaN(value) || (value: any) < 1;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function getPropertyInfo(name: string): PropertyInfo | null {\r\n  return properties.hasOwnProperty(name) ? properties[name] : null;\r\n}\r\n\r\nfunction PropertyInfoRecord(\r\n  name: string,\r\n  type: PropertyType,\r\n  mustUseProperty: boolean,\r\n  attributeName: string,\r\n  attributeNamespace: string | null,\r\n  sanitizeURL: boolean,\r\n  removeEmptyString: boolean,\r\n) {\r\n  this.acceptsBooleans =\r\n    type === BOOLEANISH_STRING ||\r\n    type === BOOLEAN ||\r\n    type === OVERLOADED_BOOLEAN;\r\n  this.attributeName = attributeName;\r\n  this.attributeNamespace = attributeNamespace;\r\n  this.mustUseProperty = mustUseProperty;\r\n  this.propertyName = name;\r\n  this.type = type;\r\n  this.sanitizeURL = sanitizeURL;\r\n  this.removeEmptyString = removeEmptyString;\r\n}\r\n\r\n// When adding attributes to this list, be sure to also add them to\r\n// the `possibleStandardNames` module to ensure casing and incorrect\r\n// name warnings.\r\nconst properties = {};\r\n\r\n// These props are reserved by React. They shouldn't be written to the DOM.\r\nconst reservedProps = [\r\n  'children',\r\n  'dangerouslySetInnerHTML',\r\n  // TODO: This prevents the assignment of defaultValue to regular\r\n  // elements (not just inputs). Now that ReactDOMInput assigns to the\r\n  // defaultValue property -- do we need this?\r\n  'defaultValue',\r\n  'defaultChecked',\r\n  'innerHTML',\r\n  'suppressContentEditableWarning',\r\n  'suppressHydrationWarning',\r\n  'style',\r\n];\r\nif (enableCustomElementPropertySupport) {\r\n  reservedProps.push('innerText', 'textContent');\r\n}\r\n\r\nreservedProps.forEach(name => {\r\n  properties[name] = new PropertyInfoRecord(\r\n    name,\r\n    RESERVED,\r\n    false, // mustUseProperty\r\n    name, // attributeName\r\n    null, // attributeNamespace\r\n    false, // sanitizeURL\r\n    false, // removeEmptyString\r\n  );\r\n});\r\n\r\n// A few React string attributes have a different name.\r\n// This is a mapping from React prop names to the attribute names.\r\n[\r\n  ['acceptCharset', 'accept-charset'],\r\n  ['className', 'class'],\r\n  ['htmlFor', 'for'],\r\n  ['httpEquiv', 'http-equiv'],\r\n].forEach(([name, attributeName]) => {\r\n  properties[name] = new PropertyInfoRecord(\r\n    name,\r\n    STRING,\r\n    false, // mustUseProperty\r\n    attributeName, // attributeName\r\n    null, // attributeNamespace\r\n    false, // sanitizeURL\r\n    false, // removeEmptyString\r\n  );\r\n});\r\n\r\n// These are \"enumerated\" HTML attributes that accept \"true\" and \"false\".\r\n// In React, we let users pass `true` and `false` even though technically\r\n// these aren't boolean attributes (they are coerced to strings).\r\n['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(name => {\r\n  properties[name] = new PropertyInfoRecord(\r\n    name,\r\n    BOOLEANISH_STRING,\r\n    false, // mustUseProperty\r\n    name.toLowerCase(), // attributeName\r\n    null, // attributeNamespace\r\n    false, // sanitizeURL\r\n    false, // removeEmptyString\r\n  );\r\n});\r\n\r\n// These are \"enumerated\" SVG attributes that accept \"true\" and \"false\".\r\n// In React, we let users pass `true` and `false` even though technically\r\n// these aren't boolean attributes (they are coerced to strings).\r\n// Since these are SVG attributes, their attribute names are case-sensitive.\r\n[\r\n  'autoReverse',\r\n  'externalResourcesRequired',\r\n  'focusable',\r\n  'preserveAlpha',\r\n].forEach(name => {\r\n  properties[name] = new PropertyInfoRecord(\r\n    name,\r\n    BOOLEANISH_STRING,\r\n    false, // mustUseProperty\r\n    name, // attributeName\r\n    null, // attributeNamespace\r\n    false, // sanitizeURL\r\n    false, // removeEmptyString\r\n  );\r\n});\r\n\r\n// These are HTML boolean attributes.\r\n[\r\n  'allowFullScreen',\r\n  'async',\r\n  // Note: there is a special case that prevents it from being written to the DOM\r\n  // on the client side because the browsers are inconsistent. Instead we call focus().\r\n  'autoFocus',\r\n  'autoPlay',\r\n  'controls',\r\n  'default',\r\n  'defer',\r\n  'disabled',\r\n  'disablePictureInPicture',\r\n  'disableRemotePlayback',\r\n  'formNoValidate',\r\n  'hidden',\r\n  'loop',\r\n  'noModule',\r\n  'noValidate',\r\n  'open',\r\n  'playsInline',\r\n  'readOnly',\r\n  'required',\r\n  'reversed',\r\n  'scoped',\r\n  'seamless',\r\n  // Microdata\r\n  'itemScope',\r\n].forEach(name => {\r\n  properties[name] = new PropertyInfoRecord(\r\n    name,\r\n    BOOLEAN,\r\n    false, // mustUseProperty\r\n    name.toLowerCase(), // attributeName\r\n    null, // attributeNamespace\r\n    false, // sanitizeURL\r\n    false, // removeEmptyString\r\n  );\r\n});\r\n\r\n// These are the few React props that we set as DOM properties\r\n// rather than attributes. These are all booleans.\r\n[\r\n  'checked',\r\n  // Note: `option.selected` is not updated if `select.multiple` is\r\n  // disabled with `removeAttribute`. We have special logic for handling this.\r\n  'multiple',\r\n  'muted',\r\n  'selected',\r\n\r\n  // NOTE: if you add a camelCased prop to this list,\r\n  // you'll need to set attributeName to name.toLowerCase()\r\n  // instead in the assignment below.\r\n].forEach(name => {\r\n  properties[name] = new PropertyInfoRecord(\r\n    name,\r\n    BOOLEAN,\r\n    true, // mustUseProperty\r\n    name, // attributeName\r\n    null, // attributeNamespace\r\n    false, // sanitizeURL\r\n    false, // removeEmptyString\r\n  );\r\n});\r\n\r\n// These are HTML attributes that are \"overloaded booleans\": they behave like\r\n// booleans, but can also accept a string value.\r\n[\r\n  'capture',\r\n  'download',\r\n\r\n  // NOTE: if you add a camelCased prop to this list,\r\n  // you'll need to set attributeName to name.toLowerCase()\r\n  // instead in the assignment below.\r\n].forEach(name => {\r\n  properties[name] = new PropertyInfoRecord(\r\n    name,\r\n    OVERLOADED_BOOLEAN,\r\n    false, // mustUseProperty\r\n    name, // attributeName\r\n    null, // attributeNamespace\r\n    false, // sanitizeURL\r\n    false, // removeEmptyString\r\n  );\r\n});\r\n\r\n// These are HTML attributes that must be positive numbers.\r\n[\r\n  'cols',\r\n  'rows',\r\n  'size',\r\n  'span',\r\n\r\n  // NOTE: if you add a camelCased prop to this list,\r\n  // you'll need to set attributeName to name.toLowerCase()\r\n  // instead in the assignment below.\r\n].forEach(name => {\r\n  properties[name] = new PropertyInfoRecord(\r\n    name,\r\n    POSITIVE_NUMERIC,\r\n    false, // mustUseProperty\r\n    name, // attributeName\r\n    null, // attributeNamespace\r\n    false, // sanitizeURL\r\n    false, // removeEmptyString\r\n  );\r\n});\r\n\r\n// These are HTML attributes that must be numbers.\r\n['rowSpan', 'start'].forEach(name => {\r\n  properties[name] = new PropertyInfoRecord(\r\n    name,\r\n    NUMERIC,\r\n    false, // mustUseProperty\r\n    name.toLowerCase(), // attributeName\r\n    null, // attributeNamespace\r\n    false, // sanitizeURL\r\n    false, // removeEmptyString\r\n  );\r\n});\r\n\r\nconst CAMELIZE = /[\\-\\:]([a-z])/g;\r\nconst capitalize = token => token[1].toUpperCase();\r\n\r\n// This is a list of all SVG attributes that need special casing, namespacing,\r\n// or boolean value assignment. Regular attributes that just accept strings\r\n// and have the same names are omitted, just like in the HTML attribute filter.\r\n// Some of these attributes can be hard to find. This list was created by\r\n// scraping the MDN documentation.\r\n[\r\n  'accent-height',\r\n  'alignment-baseline',\r\n  'arabic-form',\r\n  'baseline-shift',\r\n  'cap-height',\r\n  'clip-path',\r\n  'clip-rule',\r\n  'color-interpolation',\r\n  'color-interpolation-filters',\r\n  'color-profile',\r\n  'color-rendering',\r\n  'dominant-baseline',\r\n  'enable-background',\r\n  'fill-opacity',\r\n  'fill-rule',\r\n  'flood-color',\r\n  'flood-opacity',\r\n  'font-family',\r\n  'font-size',\r\n  'font-size-adjust',\r\n  'font-stretch',\r\n  'font-style',\r\n  'font-variant',\r\n  'font-weight',\r\n  'glyph-name',\r\n  'glyph-orientation-horizontal',\r\n  'glyph-orientation-vertical',\r\n  'horiz-adv-x',\r\n  'horiz-origin-x',\r\n  'image-rendering',\r\n  'letter-spacing',\r\n  'lighting-color',\r\n  'marker-end',\r\n  'marker-mid',\r\n  'marker-start',\r\n  'overline-position',\r\n  'overline-thickness',\r\n  'paint-order',\r\n  'panose-1',\r\n  'pointer-events',\r\n  'rendering-intent',\r\n  'shape-rendering',\r\n  'stop-color',\r\n  'stop-opacity',\r\n  'strikethrough-position',\r\n  'strikethrough-thickness',\r\n  'stroke-dasharray',\r\n  'stroke-dashoffset',\r\n  'stroke-linecap',\r\n  'stroke-linejoin',\r\n  'stroke-miterlimit',\r\n  'stroke-opacity',\r\n  'stroke-width',\r\n  'text-anchor',\r\n  'text-decoration',\r\n  'text-rendering',\r\n  'underline-position',\r\n  'underline-thickness',\r\n  'unicode-bidi',\r\n  'unicode-range',\r\n  'units-per-em',\r\n  'v-alphabetic',\r\n  'v-hanging',\r\n  'v-ideographic',\r\n  'v-mathematical',\r\n  'vector-effect',\r\n  'vert-adv-y',\r\n  'vert-origin-x',\r\n  'vert-origin-y',\r\n  'word-spacing',\r\n  'writing-mode',\r\n  'xmlns:xlink',\r\n  'x-height',\r\n\r\n  // NOTE: if you add a camelCased prop to this list,\r\n  // you'll need to set attributeName to name.toLowerCase()\r\n  // instead in the assignment below.\r\n].forEach(attributeName => {\r\n  const name = attributeName.replace(CAMELIZE, capitalize);\r\n  properties[name] = new PropertyInfoRecord(\r\n    name,\r\n    STRING,\r\n    false, // mustUseProperty\r\n    attributeName,\r\n    null, // attributeNamespace\r\n    false, // sanitizeURL\r\n    false, // removeEmptyString\r\n  );\r\n});\r\n\r\n// String SVG attributes with the xlink namespace.\r\n[\r\n  'xlink:actuate',\r\n  'xlink:arcrole',\r\n  'xlink:role',\r\n  'xlink:show',\r\n  'xlink:title',\r\n  'xlink:type',\r\n\r\n  // NOTE: if you add a camelCased prop to this list,\r\n  // you'll need to set attributeName to name.toLowerCase()\r\n  // instead in the assignment below.\r\n].forEach(attributeName => {\r\n  const name = attributeName.replace(CAMELIZE, capitalize);\r\n  properties[name] = new PropertyInfoRecord(\r\n    name,\r\n    STRING,\r\n    false, // mustUseProperty\r\n    attributeName,\r\n    'http://www.w3.org/1999/xlink',\r\n    false, // sanitizeURL\r\n    false, // removeEmptyString\r\n  );\r\n});\r\n\r\n// String SVG attributes with the xml namespace.\r\n[\r\n  'xml:base',\r\n  'xml:lang',\r\n  'xml:space',\r\n\r\n  // NOTE: if you add a camelCased prop to this list,\r\n  // you'll need to set attributeName to name.toLowerCase()\r\n  // instead in the assignment below.\r\n].forEach(attributeName => {\r\n  const name = attributeName.replace(CAMELIZE, capitalize);\r\n  properties[name] = new PropertyInfoRecord(\r\n    name,\r\n    STRING,\r\n    false, // mustUseProperty\r\n    attributeName,\r\n    'http://www.w3.org/XML/1998/namespace',\r\n    false, // sanitizeURL\r\n    false, // removeEmptyString\r\n  );\r\n});\r\n\r\n// These attribute exists both in HTML and SVG.\r\n// The attribute name is case-sensitive in SVG so we can't just use\r\n// the React name like we do for attributes that exist only in HTML.\r\n['tabIndex', 'crossOrigin'].forEach(attributeName => {\r\n  properties[attributeName] = new PropertyInfoRecord(\r\n    attributeName,\r\n    STRING,\r\n    false, // mustUseProperty\r\n    attributeName.toLowerCase(), // attributeName\r\n    null, // attributeNamespace\r\n    false, // sanitizeURL\r\n    false, // removeEmptyString\r\n  );\r\n});\r\n\r\n// These attributes accept URLs. These must not allow javascript: URLS.\r\n// These will also need to accept Trusted Types object in the future.\r\nconst xlinkHref = 'xlinkHref';\r\nproperties[xlinkHref] = new PropertyInfoRecord(\r\n  'xlinkHref',\r\n  STRING,\r\n  false, // mustUseProperty\r\n  'xlink:href',\r\n  'http://www.w3.org/1999/xlink',\r\n  true, // sanitizeURL\r\n  false, // removeEmptyString\r\n);\r\n\r\n['src', 'href', 'action', 'formAction'].forEach(attributeName => {\r\n  properties[attributeName] = new PropertyInfoRecord(\r\n    attributeName,\r\n    STRING,\r\n    false, // mustUseProperty\r\n    attributeName.toLowerCase(), // attributeName\r\n    null, // attributeNamespace\r\n    true, // sanitizeURL\r\n    true, // removeEmptyString\r\n  );\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}