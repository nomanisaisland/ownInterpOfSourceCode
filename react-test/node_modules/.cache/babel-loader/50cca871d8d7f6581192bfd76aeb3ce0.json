{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\nconst loggedTypeFailures = {};\nimport { describeUnknownElementTypeFrameInDEV } from 'shared/ReactComponentStackFrame';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport hasOwnProperty from 'shared/hasOwnProperty';\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  if (__DEV__) {\n    if (element) {\n      const owner = element._owner;\n      const stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nexport default function checkPropTypes(typeSpecs, values, location, componentName, element) {\n  if (__DEV__) {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    const has = Function.call.bind(hasOwnProperty);\n\n    for (const typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        let error; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            const err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error = ex;\n        }\n\n        if (error && !(error instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n          console.error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);\n          setCurrentlyValidatingElement(null);\n        }\n\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n          setCurrentlyValidatingElement(element);\n          console.error('Failed %s type: %s', location, error.message);\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}","map":{"version":3,"names":["loggedTypeFailures","describeUnknownElementTypeFrameInDEV","ReactSharedInternals","hasOwnProperty","ReactDebugCurrentFrame","setCurrentlyValidatingElement","element","__DEV__","owner","_owner","stack","type","_source","setExtraStackFrame","checkPropTypes","typeSpecs","values","location","componentName","has","Function","call","bind","typeSpecName","error","err","Error","name","ex","console","message"],"sources":["E:/react-test/src/react/packages/shared/checkPropTypes.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nconst loggedTypeFailures = {};\r\n\r\nimport {describeUnknownElementTypeFrameInDEV} from 'shared/ReactComponentStackFrame';\r\n\r\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\r\nimport hasOwnProperty from 'shared/hasOwnProperty';\r\n\r\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\r\n\r\nfunction setCurrentlyValidatingElement(element) {\r\n  if (__DEV__) {\r\n    if (element) {\r\n      const owner = element._owner;\r\n      const stack = describeUnknownElementTypeFrameInDEV(\r\n        element.type,\r\n        element._source,\r\n        owner ? owner.type : null,\r\n      );\r\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\r\n    } else {\r\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\r\n    }\r\n  }\r\n}\r\n\r\nexport default function checkPropTypes(\r\n  typeSpecs: Object,\r\n  values: Object,\r\n  location: string,\r\n  componentName: ?string,\r\n  element?: any,\r\n): void {\r\n  if (__DEV__) {\r\n    // $FlowFixMe This is okay but Flow doesn't know it.\r\n    const has = Function.call.bind(hasOwnProperty);\r\n    for (const typeSpecName in typeSpecs) {\r\n      if (has(typeSpecs, typeSpecName)) {\r\n        let error;\r\n        // Prop type validation may throw. In case they do, we don't want to\r\n        // fail the render phase where it didn't fail before. So we log it.\r\n        // After these have been cleaned up, we'll let them throw.\r\n        try {\r\n          // This is intentionally an invariant that gets caught. It's the same\r\n          // behavior as without this statement except with a better message.\r\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\r\n            // eslint-disable-next-line react-internal/prod-error-codes\r\n            const err = Error(\r\n              (componentName || 'React class') +\r\n                ': ' +\r\n                location +\r\n                ' type `' +\r\n                typeSpecName +\r\n                '` is invalid; ' +\r\n                'it must be a function, usually from the `prop-types` package, but received `' +\r\n                typeof typeSpecs[typeSpecName] +\r\n                '`.' +\r\n                'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.',\r\n            );\r\n            err.name = 'Invariant Violation';\r\n            throw err;\r\n          }\r\n          error = typeSpecs[typeSpecName](\r\n            values,\r\n            typeSpecName,\r\n            componentName,\r\n            location,\r\n            null,\r\n            'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED',\r\n          );\r\n        } catch (ex) {\r\n          error = ex;\r\n        }\r\n        if (error && !(error instanceof Error)) {\r\n          setCurrentlyValidatingElement(element);\r\n          console.error(\r\n            '%s: type specification of %s' +\r\n              ' `%s` is invalid; the type checker ' +\r\n              'function must return `null` or an `Error` but returned a %s. ' +\r\n              'You may have forgotten to pass an argument to the type checker ' +\r\n              'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\r\n              'shape all require an argument).',\r\n            componentName || 'React class',\r\n            location,\r\n            typeSpecName,\r\n            typeof error,\r\n          );\r\n          setCurrentlyValidatingElement(null);\r\n        }\r\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\r\n          // Only monitor this failure once because there tends to be a lot of the\r\n          // same error.\r\n          loggedTypeFailures[error.message] = true;\r\n          setCurrentlyValidatingElement(element);\r\n          console.error('Failed %s type: %s', location, error.message);\r\n          setCurrentlyValidatingElement(null);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,kBAAkB,GAAG,EAA3B;AAEA,SAAQC,oCAAR,QAAmD,iCAAnD;AAEA,OAAOC,oBAAP,MAAiC,6BAAjC;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AAEA,MAAMC,sBAAsB,GAAGF,oBAAoB,CAACE,sBAApD;;AAEA,SAASC,6BAAT,CAAuCC,OAAvC,EAAgD;EAC9C,IAAIC,OAAJ,EAAa;IACX,IAAID,OAAJ,EAAa;MACX,MAAME,KAAK,GAAGF,OAAO,CAACG,MAAtB;MACA,MAAMC,KAAK,GAAGT,oCAAoC,CAChDK,OAAO,CAACK,IADwC,EAEhDL,OAAO,CAACM,OAFwC,EAGhDJ,KAAK,GAAGA,KAAK,CAACG,IAAT,GAAgB,IAH2B,CAAlD;MAKAP,sBAAsB,CAACS,kBAAvB,CAA0CH,KAA1C;IACD,CARD,MAQO;MACLN,sBAAsB,CAACS,kBAAvB,CAA0C,IAA1C;IACD;EACF;AACF;;AAED,eAAe,SAASC,cAAT,CACbC,SADa,EAEbC,MAFa,EAGbC,QAHa,EAIbC,aAJa,EAKbZ,OALa,EAMP;EACN,IAAIC,OAAJ,EAAa;IACX;IACA,MAAMY,GAAG,GAAGC,QAAQ,CAACC,IAAT,CAAcC,IAAd,CAAmBnB,cAAnB,CAAZ;;IACA,KAAK,MAAMoB,YAAX,IAA2BR,SAA3B,EAAsC;MACpC,IAAII,GAAG,CAACJ,SAAD,EAAYQ,YAAZ,CAAP,EAAkC;QAChC,IAAIC,KAAJ,CADgC,CAEhC;QACA;QACA;;QACA,IAAI;UACF;UACA;UACA,IAAI,OAAOT,SAAS,CAACQ,YAAD,CAAhB,KAAmC,UAAvC,EAAmD;YACjD;YACA,MAAME,GAAG,GAAGC,KAAK,CACf,CAACR,aAAa,IAAI,aAAlB,IACE,IADF,GAEED,QAFF,GAGE,SAHF,GAIEM,YAJF,GAKE,gBALF,GAME,8EANF,GAOE,OAAOR,SAAS,CAACQ,YAAD,CAPlB,GAQE,IARF,GASE,+FAVa,CAAjB;YAYAE,GAAG,CAACE,IAAJ,GAAW,qBAAX;YACA,MAAMF,GAAN;UACD;;UACDD,KAAK,GAAGT,SAAS,CAACQ,YAAD,CAAT,CACNP,MADM,EAENO,YAFM,EAGNL,aAHM,EAIND,QAJM,EAKN,IALM,EAMN,8CANM,CAAR;QAQD,CA5BD,CA4BE,OAAOW,EAAP,EAAW;UACXJ,KAAK,GAAGI,EAAR;QACD;;QACD,IAAIJ,KAAK,IAAI,EAAEA,KAAK,YAAYE,KAAnB,CAAb,EAAwC;UACtCrB,6BAA6B,CAACC,OAAD,CAA7B;UACAuB,OAAO,CAACL,KAAR,CACE,iCACE,qCADF,GAEE,+DAFF,GAGE,iEAHF,GAIE,gEAJF,GAKE,iCANJ,EAOEN,aAAa,IAAI,aAPnB,EAQED,QARF,EASEM,YATF,EAUE,OAAOC,KAVT;UAYAnB,6BAA6B,CAAC,IAAD,CAA7B;QACD;;QACD,IAAImB,KAAK,YAAYE,KAAjB,IAA0B,EAAEF,KAAK,CAACM,OAAN,IAAiB9B,kBAAnB,CAA9B,EAAsE;UACpE;UACA;UACAA,kBAAkB,CAACwB,KAAK,CAACM,OAAP,CAAlB,GAAoC,IAApC;UACAzB,6BAA6B,CAACC,OAAD,CAA7B;UACAuB,OAAO,CAACL,KAAR,CAAc,oBAAd,EAAoCP,QAApC,EAA8CO,KAAK,CAACM,OAApD;UACAzB,6BAA6B,CAAC,IAAD,CAA7B;QACD;MACF;IACF;EACF;AACF"},"metadata":{},"sourceType":"module"}